(function () {
  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["apps-apps-module"], {
    /***/
    "./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js":
    /*!**********************************************************************!*\
      !*** ./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js ***!
      \**********************************************************************/

    /*! exports provided: CDK_DRAG_CONFIG, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, ɵangular_material_src_cdk_drag_drop_drag_drop_b */

    /***/
    function node_modulesAngularCdk__ivy_ngcc__Fesm2015DragDropJs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CDK_DRAG_CONFIG", function () {
        return CDK_DRAG_CONFIG;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CDK_DROP_LIST", function () {
        return CDK_DROP_LIST;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkDrag", function () {
        return CdkDrag;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkDragHandle", function () {
        return CdkDragHandle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkDragPlaceholder", function () {
        return CdkDragPlaceholder;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkDragPreview", function () {
        return CdkDragPreview;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkDropList", function () {
        return CdkDropList;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CdkDropListGroup", function () {
        return CdkDropListGroup;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DragDrop", function () {
        return DragDrop;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DragDropModule", function () {
        return DragDropModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DragDropRegistry", function () {
        return DragDropRegistry;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DragRef", function () {
        return DragRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DropListRef", function () {
        return DropListRef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "copyArrayItem", function () {
        return copyArrayItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "moveItemInArray", function () {
        return moveItemInArray;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "transferArrayItem", function () {
        return transferArrayItem;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵangular_material_src_cdk_drag_drop_drag_drop_b", function () {
        return CDK_DRAG_PARENT;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/scrolling.js");
      /* harmony import */


      var _angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/platform */
      "./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/platform.js");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "./node_modules/@angular/cdk/fesm2015/coercion.js");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! rxjs */
      "./node_modules/rxjs/_esm2015/index.js");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! rxjs/operators */
      "./node_modules/rxjs/_esm2015/operators/index.js");
      /* harmony import */


      var _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/cdk/bidi */
      "./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/bidi.js");
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Shallow-extends a stylesheet object with another stylesheet object.
       * @docs-private
       */


      function extendStyles(dest, source) {
        for (var key in source) {
          if (source.hasOwnProperty(key)) {
            dest[key] = source[key];
          }
        }

        return dest;
      }
      /**
       * Toggles whether the native drag interactions should be enabled for an element.
       * @param element Element on which to toggle the drag interactions.
       * @param enable Whether the drag interactions should be enabled.
       * @docs-private
       */


      function toggleNativeDragInteractions(element, enable) {
        var userSelect = enable ? '' : 'none';
        extendStyles(element.style, {
          touchAction: enable ? '' : 'none',
          webkitUserDrag: enable ? '' : 'none',
          webkitTapHighlightColor: enable ? '' : 'transparent',
          userSelect: userSelect,
          msUserSelect: userSelect,
          webkitUserSelect: userSelect,
          MozUserSelect: userSelect
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Parses a CSS time value to milliseconds. */


      function parseCssTimeUnitsToMs(value) {
        // Some browsers will return it in seconds, whereas others will return milliseconds.
        var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;
        return parseFloat(value) * multiplier;
      }
      /** Gets the transform transition duration, including the delay, of an element in milliseconds. */


      function getTransformTransitionDurationInMs(element) {
        var computedStyle = getComputedStyle(element);
        var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');
        var property = transitionedProperties.find(function (prop) {
          return prop === 'transform' || prop === 'all';
        }); // If there's no transition for `all` or `transform`, we shouldn't do anything.

        if (!property) {
          return 0;
        } // Get the index of the property that we're interested in and match
        // it up to the same index in `transition-delay` and `transition-duration`.


        var propertyIndex = transitionedProperties.indexOf(property);
        var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');
        var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');
        return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);
      }
      /** Parses out multiple values from a computed style into an array. */


      function parseCssPropertyValue(computedStyle, name) {
        var value = computedStyle.getPropertyValue(name);
        return value.split(',').map(function (part) {
          return part.trim();
        });
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Gets a mutable version of an element's bounding `ClientRect`. */


      function getMutableClientRect(element) {
        var clientRect = element.getBoundingClientRect(); // We need to clone the `clientRect` here, because all the values on it are readonly
        // and we need to be able to update them. Also we can't use a spread here, because
        // the values on a `ClientRect` aren't own properties. See:
        // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes

        return {
          top: clientRect.top,
          right: clientRect.right,
          bottom: clientRect.bottom,
          left: clientRect.left,
          width: clientRect.width,
          height: clientRect.height
        };
      }
      /**
       * Checks whether some coordinates are within a `ClientRect`.
       * @param clientRect ClientRect that is being checked.
       * @param x Coordinates along the X axis.
       * @param y Coordinates along the Y axis.
       */


      function isInsideClientRect(clientRect, x, y) {
        var top = clientRect.top,
            bottom = clientRect.bottom,
            left = clientRect.left,
            right = clientRect.right;
        return y >= top && y <= bottom && x >= left && x <= right;
      }
      /**
       * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.
       * @param clientRect `ClientRect` that should be updated.
       * @param top Amount to add to the `top` position.
       * @param left Amount to add to the `left` position.
       */


      function adjustClientRect(clientRect, top, left) {
        clientRect.top += top;
        clientRect.bottom = clientRect.top + clientRect.height;
        clientRect.left += left;
        clientRect.right = clientRect.left + clientRect.width;
      }
      /**
       * Checks whether the pointer coordinates are close to a ClientRect.
       * @param rect ClientRect to check against.
       * @param threshold Threshold around the ClientRect.
       * @param pointerX Coordinates along the X axis.
       * @param pointerY Coordinates along the Y axis.
       */


      function isPointerNearClientRect(rect, threshold, pointerX, pointerY) {
        var top = rect.top,
            right = rect.right,
            bottom = rect.bottom,
            left = rect.left,
            width = rect.width,
            height = rect.height;
        var xThreshold = width * threshold;
        var yThreshold = height * threshold;
        return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Keeps track of the scroll position and dimensions of the parents of an element. */


      var ParentPositionTracker = /*#__PURE__*/function () {
        function ParentPositionTracker(_document, _viewportRuler) {
          _classCallCheck(this, ParentPositionTracker);

          this._document = _document;
          this._viewportRuler = _viewportRuler;
          /** Cached positions of the scrollable parent elements. */

          this.positions = new Map();
        }
        /** Clears the cached positions. */


        _createClass(ParentPositionTracker, [{
          key: "clear",
          value: function clear() {
            this.positions.clear();
          }
          /** Caches the positions. Should be called at the beginning of a drag sequence. */

        }, {
          key: "cache",
          value: function cache(elements) {
            var _this2 = this;

            this.clear();
            this.positions.set(this._document, {
              scrollPosition: this._viewportRuler.getViewportScrollPosition()
            });
            elements.forEach(function (element) {
              _this2.positions.set(element, {
                scrollPosition: {
                  top: element.scrollTop,
                  left: element.scrollLeft
                },
                clientRect: getMutableClientRect(element)
              });
            });
          }
          /** Handles scrolling while a drag is taking place. */

        }, {
          key: "handleScroll",
          value: function handleScroll(event) {
            var target = event.target;
            var cachedPosition = this.positions.get(target);

            if (!cachedPosition) {
              return null;
            } // Used when figuring out whether an element is inside the scroll parent. If the scrolled
            // parent is the `document`, we use the `documentElement`, because IE doesn't support
            // `contains` on the `document`.


            var scrolledParentNode = target === this._document ? target.documentElement : target;
            var scrollPosition = cachedPosition.scrollPosition;
            var newTop;
            var newLeft;

            if (target === this._document) {
              var viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();

              newTop = viewportScrollPosition.top;
              newLeft = viewportScrollPosition.left;
            } else {
              newTop = target.scrollTop;
              newLeft = target.scrollLeft;
            }

            var topDifference = scrollPosition.top - newTop;
            var leftDifference = scrollPosition.left - newLeft; // Go through and update the cached positions of the scroll
            // parents that are inside the element that was scrolled.

            this.positions.forEach(function (position, node) {
              if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {
                adjustClientRect(position.clientRect, topDifference, leftDifference);
              }
            });
            scrollPosition.top = newTop;
            scrollPosition.left = newLeft;
            return {
              top: topDifference,
              left: leftDifference
            };
          }
        }]);

        return ParentPositionTracker;
      }();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Options that can be used to bind a passive event listener. */


      var passiveEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__["normalizePassiveListenerOptions"])({
        passive: true
      });
      /** Options that can be used to bind an active event listener. */

      var activeEventListenerOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__["normalizePassiveListenerOptions"])({
        passive: false
      });
      /**
       * Time in milliseconds for which to ignore mouse events, after
       * receiving a touch event. Used to avoid doing double work for
       * touch devices where the browser fires fake mouse events, in
       * addition to touch events.
       */

      var MOUSE_EVENT_IGNORE_TIME = 800;
      /**
       * Reference to a draggable item. Used to manipulate or dispose of the item.
       */

      var DragRef = /*#__PURE__*/function () {
        function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {
          var _this3 = this;

          _classCallCheck(this, DragRef);

          this._config = _config;
          this._document = _document;
          this._ngZone = _ngZone;
          this._viewportRuler = _viewportRuler;
          this._dragDropRegistry = _dragDropRegistry;
          /**
           * CSS `transform` applied to the element when it isn't being dragged. We need a
           * passive transform in order for the dragged element to retain its new position
           * after the user has stopped dragging and because we need to know the relative
           * position in case they start dragging again. This corresponds to `element.style.transform`.
           */

          this._passiveTransform = {
            x: 0,
            y: 0
          };
          /** CSS `transform` that is applied to the element while it's being dragged. */

          this._activeTransform = {
            x: 0,
            y: 0
          };
          /** Emits when the item is being moved. */

          this._moveEvents = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Subscription to pointer movement events. */

          this._pointerMoveSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /** Subscription to the event that is dispatched when the user lifts their pointer. */

          this._pointerUpSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /** Subscription to the viewport being scrolled. */

          this._scrollSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /** Subscription to the viewport being resized. */

          this._resizeSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /** Cached reference to the boundary element. */

          this._boundaryElement = null;
          /** Whether the native dragging interactions have been enabled on the root element. */

          this._nativeInteractionsEnabled = true;
          /** Elements that can be used to drag the draggable item. */

          this._handles = [];
          /** Registered handles that are currently disabled. */

          this._disabledHandles = new Set();
          /** Layout direction of the item. */

          this._direction = 'ltr';
          /**
           * Amount of milliseconds to wait after the user has put their
           * pointer down before starting to drag the element.
           */

          this.dragStartDelay = 0;
          this._disabled = false;
          /** Emits as the drag sequence is being prepared. */

          this.beforeStarted = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the user starts dragging the item. */

          this.started = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the user has released a drag item, before any animations have started. */

          this.released = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the user stops dragging an item in the container. */

          this.ended = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the user has moved the item into a new container. */

          this.entered = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the user removes the item its container by dragging it into another container. */

          this.exited = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the user drops the item inside a container. */

          this.dropped = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Emits as the user is dragging the item. Use with caution,
           * because this event will fire for every pixel that the user has dragged.
           */

          this.moved = this._moveEvents.asObservable();
          /** Handler for the `mousedown`/`touchstart` events. */

          this._pointerDown = function (event) {
            _this3.beforeStarted.next(); // Delegate the event based on whether it started from a handle or the element itself.


            if (_this3._handles.length) {
              var targetHandle = _this3._handles.find(function (handle) {
                var target = event.target;
                return !!target && (target === handle || handle.contains(target));
              });

              if (targetHandle && !_this3._disabledHandles.has(targetHandle) && !_this3.disabled) {
                _this3._initializeDragSequence(targetHandle, event);
              }
            } else if (!_this3.disabled) {
              _this3._initializeDragSequence(_this3._rootElement, event);
            }
          };
          /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */


          this._pointerMove = function (event) {
            // Prevent the default action as early as possible in order to block
            // native actions like dragging the selected text or images with the mouse.
            event.preventDefault();

            var pointerPosition = _this3._getPointerPositionOnPage(event);

            if (!_this3._hasStartedDragging) {
              var distanceX = Math.abs(pointerPosition.x - _this3._pickupPositionOnPage.x);
              var distanceY = Math.abs(pointerPosition.y - _this3._pickupPositionOnPage.y);
              var isOverThreshold = distanceX + distanceY >= _this3._config.dragStartThreshold; // Only start dragging after the user has moved more than the minimum distance in either
              // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`
              // in the `pointerMove` subscription, because we're not guaranteed to have one move event
              // per pixel of movement (e.g. if the user moves their pointer quickly).

              if (isOverThreshold) {
                var isDelayElapsed = Date.now() >= _this3._dragStartTime + _this3._getDragStartDelay(event);

                if (!isDelayElapsed) {
                  _this3._endDragSequence(event);

                  return;
                } // Prevent other drag sequences from starting while something in the container is still
                // being dragged. This can happen while we're waiting for the drop animation to finish
                // and can cause errors, because some elements might still be moving around.


                if (!_this3._dropContainer || !_this3._dropContainer.isDragging()) {
                  _this3._hasStartedDragging = true;

                  _this3._ngZone.run(function () {
                    return _this3._startDragSequence(event);
                  });
                }
              }

              return;
            } // We only need the preview dimensions if we have a boundary element.


            if (_this3._boundaryElement) {
              // Cache the preview element rect if we haven't cached it already or if
              // we cached it too early before the element dimensions were computed.
              if (!_this3._previewRect || !_this3._previewRect.width && !_this3._previewRect.height) {
                _this3._previewRect = (_this3._preview || _this3._rootElement).getBoundingClientRect();
              }
            }

            var constrainedPointerPosition = _this3._getConstrainedPointerPosition(pointerPosition);

            _this3._hasMoved = true;
            _this3._lastKnownPointerPosition = pointerPosition;

            _this3._updatePointerDirectionDelta(constrainedPointerPosition);

            if (_this3._dropContainer) {
              _this3._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);
            } else {
              var activeTransform = _this3._activeTransform;
              activeTransform.x = constrainedPointerPosition.x - _this3._pickupPositionOnPage.x + _this3._passiveTransform.x;
              activeTransform.y = constrainedPointerPosition.y - _this3._pickupPositionOnPage.y + _this3._passiveTransform.y;

              _this3._applyRootElementTransform(activeTransform.x, activeTransform.y); // Apply transform as attribute if dragging and svg element to work for IE


              if (typeof SVGElement !== 'undefined' && _this3._rootElement instanceof SVGElement) {
                var appliedTransform = "translate(".concat(activeTransform.x, " ").concat(activeTransform.y, ")");

                _this3._rootElement.setAttribute('transform', appliedTransform);
              }
            } // Since this event gets fired for every pixel while dragging, we only
            // want to fire it if the consumer opted into it. Also we have to
            // re-enter the zone because we run all of the events on the outside.


            if (_this3._moveEvents.observers.length) {
              _this3._ngZone.run(function () {
                _this3._moveEvents.next({
                  source: _this3,
                  pointerPosition: constrainedPointerPosition,
                  event: event,
                  distance: _this3._getDragDistance(constrainedPointerPosition),
                  delta: _this3._pointerDirectionDelta
                });
              });
            }
          };
          /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */


          this._pointerUp = function (event) {
            _this3._endDragSequence(event);
          };

          this.withRootElement(element);
          this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);

          _dragDropRegistry.registerDragItem(this);
        }
        /** Whether starting to drag this element is disabled. */


        _createClass(DragRef, [{
          key: "getPlaceholderElement",

          /**
           * Returns the element that is being used as a placeholder
           * while the current element is being dragged.
           */
          value: function getPlaceholderElement() {
            return this._placeholder;
          }
          /** Returns the root draggable element. */

        }, {
          key: "getRootElement",
          value: function getRootElement() {
            return this._rootElement;
          }
          /**
           * Gets the currently-visible element that represents the drag item.
           * While dragging this is the placeholder, otherwise it's the root element.
           */

        }, {
          key: "getVisibleElement",
          value: function getVisibleElement() {
            return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();
          }
          /** Registers the handles that can be used to drag the element. */

        }, {
          key: "withHandles",
          value: function withHandles(handles) {
            this._handles = handles.map(function (handle) {
              return Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(handle);
            });

            this._handles.forEach(function (handle) {
              return toggleNativeDragInteractions(handle, false);
            });

            this._toggleNativeDragInteractions();

            return this;
          }
          /**
           * Registers the template that should be used for the drag preview.
           * @param template Template that from which to stamp out the preview.
           */

        }, {
          key: "withPreviewTemplate",
          value: function withPreviewTemplate(template) {
            this._previewTemplate = template;
            return this;
          }
          /**
           * Registers the template that should be used for the drag placeholder.
           * @param template Template that from which to stamp out the placeholder.
           */

        }, {
          key: "withPlaceholderTemplate",
          value: function withPlaceholderTemplate(template) {
            this._placeholderTemplate = template;
            return this;
          }
          /**
           * Sets an alternate drag root element. The root element is the element that will be moved as
           * the user is dragging. Passing an alternate root element is useful when trying to enable
           * dragging on an element that you might not have access to.
           */

        }, {
          key: "withRootElement",
          value: function withRootElement(rootElement) {
            var _this4 = this;

            var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(rootElement);

            if (element !== this._rootElement) {
              if (this._rootElement) {
                this._removeRootElementListeners(this._rootElement);
              }

              this._ngZone.runOutsideAngular(function () {
                element.addEventListener('mousedown', _this4._pointerDown, activeEventListenerOptions);
                element.addEventListener('touchstart', _this4._pointerDown, passiveEventListenerOptions);
              });

              this._initialTransform = undefined;
              this._rootElement = element;
            }

            if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {
              this._ownerSVGElement = this._rootElement.ownerSVGElement;
            }

            return this;
          }
          /**
           * Element to which the draggable's position will be constrained.
           */

        }, {
          key: "withBoundaryElement",
          value: function withBoundaryElement(boundaryElement) {
            var _this5 = this;

            this._boundaryElement = boundaryElement ? Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(boundaryElement) : null;

            this._resizeSubscription.unsubscribe();

            if (boundaryElement) {
              this._resizeSubscription = this._viewportRuler.change(10).subscribe(function () {
                return _this5._containInsideBoundaryOnResize();
              });
            }

            return this;
          }
          /** Removes the dragging functionality from the DOM element. */

        }, {
          key: "dispose",
          value: function dispose() {
            this._removeRootElementListeners(this._rootElement); // Do this check before removing from the registry since it'll
            // stop being considered as dragged once it is removed.


            if (this.isDragging()) {
              // Since we move out the element to the end of the body while it's being
              // dragged, we have to make sure that it's removed if it gets destroyed.
              removeNode(this._rootElement);
            }

            removeNode(this._anchor);

            this._destroyPreview();

            this._destroyPlaceholder();

            this._dragDropRegistry.removeDragItem(this);

            this._removeSubscriptions();

            this.beforeStarted.complete();
            this.started.complete();
            this.released.complete();
            this.ended.complete();
            this.entered.complete();
            this.exited.complete();
            this.dropped.complete();

            this._moveEvents.complete();

            this._handles = [];

            this._disabledHandles.clear();

            this._dropContainer = undefined;

            this._resizeSubscription.unsubscribe();

            this._parentPositions.clear();

            this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = null;
          }
          /** Checks whether the element is currently being dragged. */

        }, {
          key: "isDragging",
          value: function isDragging() {
            return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);
          }
          /** Resets a standalone drag item to its initial position. */

        }, {
          key: "reset",
          value: function reset() {
            this._rootElement.style.transform = this._initialTransform || '';
            this._activeTransform = {
              x: 0,
              y: 0
            };
            this._passiveTransform = {
              x: 0,
              y: 0
            };
          }
          /**
           * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.
           * @param handle Handle element that should be disabled.
           */

        }, {
          key: "disableHandle",
          value: function disableHandle(handle) {
            if (this._handles.indexOf(handle) > -1) {
              this._disabledHandles.add(handle);
            }
          }
          /**
           * Enables a handle, if it has been disabled.
           * @param handle Handle element to be enabled.
           */

        }, {
          key: "enableHandle",
          value: function enableHandle(handle) {
            this._disabledHandles["delete"](handle);
          }
          /** Sets the layout direction of the draggable item. */

        }, {
          key: "withDirection",
          value: function withDirection(direction) {
            this._direction = direction;
            return this;
          }
          /** Sets the container that the item is part of. */

        }, {
          key: "_withDropContainer",
          value: function _withDropContainer(container) {
            this._dropContainer = container;
          }
          /**
           * Gets the current position in pixels the draggable outside of a drop container.
           */

        }, {
          key: "getFreeDragPosition",
          value: function getFreeDragPosition() {
            var position = this.isDragging() ? this._activeTransform : this._passiveTransform;
            return {
              x: position.x,
              y: position.y
            };
          }
          /**
           * Sets the current position in pixels the draggable outside of a drop container.
           * @param value New position to be set.
           */

        }, {
          key: "setFreeDragPosition",
          value: function setFreeDragPosition(value) {
            this._activeTransform = {
              x: 0,
              y: 0
            };
            this._passiveTransform.x = value.x;
            this._passiveTransform.y = value.y;

            if (!this._dropContainer) {
              this._applyRootElementTransform(value.x, value.y);
            }

            return this;
          }
          /** Updates the item's sort order based on the last-known pointer position. */

        }, {
          key: "_sortFromLastPointerPosition",
          value: function _sortFromLastPointerPosition() {
            var position = this._lastKnownPointerPosition;

            if (position && this._dropContainer) {
              this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);
            }
          }
          /** Unsubscribes from the global subscriptions. */

        }, {
          key: "_removeSubscriptions",
          value: function _removeSubscriptions() {
            this._pointerMoveSubscription.unsubscribe();

            this._pointerUpSubscription.unsubscribe();

            this._scrollSubscription.unsubscribe();
          }
          /** Destroys the preview element and its ViewRef. */

        }, {
          key: "_destroyPreview",
          value: function _destroyPreview() {
            if (this._preview) {
              removeNode(this._preview);
            }

            if (this._previewRef) {
              this._previewRef.destroy();
            }

            this._preview = this._previewRef = null;
          }
          /** Destroys the placeholder element and its ViewRef. */

        }, {
          key: "_destroyPlaceholder",
          value: function _destroyPlaceholder() {
            if (this._placeholder) {
              removeNode(this._placeholder);
            }

            if (this._placeholderRef) {
              this._placeholderRef.destroy();
            }

            this._placeholder = this._placeholderRef = null;
          }
          /**
           * Clears subscriptions and stops the dragging sequence.
           * @param event Browser event object that ended the sequence.
           */

        }, {
          key: "_endDragSequence",
          value: function _endDragSequence(event) {
            var _this6 = this;

            // Note that here we use `isDragging` from the service, rather than from `this`.
            // The difference is that the one from the service reflects whether a dragging sequence
            // has been initiated, whereas the one on `this` includes whether the user has passed
            // the minimum dragging threshold.
            if (!this._dragDropRegistry.isDragging(this)) {
              return;
            }

            this._removeSubscriptions();

            this._dragDropRegistry.stopDragging(this);

            this._toggleNativeDragInteractions();

            if (this._handles) {
              this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;
            }

            if (!this._hasStartedDragging) {
              return;
            }

            this.released.next({
              source: this
            });

            if (this._dropContainer) {
              // Stop scrolling immediately, instead of waiting for the animation to finish.
              this._dropContainer._stopScrolling();

              this._animatePreviewToPlaceholder().then(function () {
                _this6._cleanupDragArtifacts(event);

                _this6._cleanupCachedDimensions();

                _this6._dragDropRegistry.stopDragging(_this6);
              });
            } else {
              // Convert the active transform into a passive one. This means that next time
              // the user starts dragging the item, its position will be calculated relatively
              // to the new passive transform.
              this._passiveTransform.x = this._activeTransform.x;
              this._passiveTransform.y = this._activeTransform.y;

              this._ngZone.run(function () {
                _this6.ended.next({
                  source: _this6,
                  distance: _this6._getDragDistance(_this6._getPointerPositionOnPage(event))
                });
              });

              this._cleanupCachedDimensions();

              this._dragDropRegistry.stopDragging(this);
            }
          }
          /** Starts the dragging sequence. */

        }, {
          key: "_startDragSequence",
          value: function _startDragSequence(event) {
            if (isTouchEvent(event)) {
              this._lastTouchEventTime = Date.now();
            }

            this._toggleNativeDragInteractions();

            var dropContainer = this._dropContainer;

            if (dropContainer) {
              var element = this._rootElement;
              var parent = element.parentNode;

              var preview = this._preview = this._createPreviewElement();

              var placeholder = this._placeholder = this._createPlaceholderElement();

              var anchor = this._anchor = this._anchor || this._document.createComment(''); // Insert an anchor node so that we can restore the element's position in the DOM.


              parent.insertBefore(anchor, element); // We move the element out at the end of the body and we make it hidden, because keeping it in
              // place will throw off the consumer's `:last-child` selectors. We can't remove the element
              // from the DOM completely, because iOS will stop firing all subsequent events in the chain.

              element.style.display = 'none';

              this._document.body.appendChild(parent.replaceChild(placeholder, element));

              getPreviewInsertionPoint(this._document).appendChild(preview);
              this.started.next({
                source: this
              }); // Emit before notifying the container.

              dropContainer.start();
              this._initialContainer = dropContainer;
              this._initialIndex = dropContainer.getItemIndex(this);
            } else {
              this.started.next({
                source: this
              });
              this._initialContainer = this._initialIndex = undefined;
            } // Important to run after we've called `start` on the parent container
            // so that it has had time to resolve its scrollable parents.


            this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);
          }
          /**
           * Sets up the different variables and subscriptions
           * that will be necessary for the dragging sequence.
           * @param referenceElement Element that started the drag sequence.
           * @param event Browser event object that started the sequence.
           */

        }, {
          key: "_initializeDragSequence",
          value: function _initializeDragSequence(referenceElement, event) {
            var _this7 = this;

            // Always stop propagation for the event that initializes
            // the dragging sequence, in order to prevent it from potentially
            // starting another sequence for a draggable parent somewhere up the DOM tree.
            event.stopPropagation();
            var isDragging = this.isDragging();
            var isTouchSequence = isTouchEvent(event);
            var isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;
            var rootElement = this._rootElement;
            var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now(); // If the event started from an element with the native HTML drag&drop, it'll interfere
            // with our own dragging (e.g. `img` tags do it by default). Prevent the default action
            // to stop it from happening. Note that preventing on `dragstart` also seems to work, but
            // it's flaky and it fails if the user drags it away quickly. Also note that we only want
            // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`
            // events from firing on touch devices.

            if (event.target && event.target.draggable && event.type === 'mousedown') {
              event.preventDefault();
            } // Abort if the user is already dragging or is using a mouse button other than the primary one.


            if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {
              return;
            } // If we've got handles, we need to disable the tap highlight on the entire root element,
            // otherwise iOS will still add it, even though all the drag interactions on the handle
            // are disabled.


            if (this._handles.length) {
              this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';
              rootElement.style.webkitTapHighlightColor = 'transparent';
            }

            this._hasStartedDragging = this._hasMoved = false; // Avoid multiple subscriptions and memory leaks when multi touch
            // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)

            this._removeSubscriptions();

            this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);
            this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);
            this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(function (scrollEvent) {
              _this7._updateOnScroll(scrollEvent);
            });

            if (this._boundaryElement) {
              this._boundaryRect = getMutableClientRect(this._boundaryElement);
            } // If we have a custom preview we can't know ahead of time how large it'll be so we position
            // it next to the cursor. The exception is when the consumer has opted into making the preview
            // the same size as the root element, in which case we do know the size.


            var previewTemplate = this._previewTemplate;
            this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {
              x: 0,
              y: 0
            } : this._getPointerPositionInElement(referenceElement, event);

            var pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);

            this._pointerDirectionDelta = {
              x: 0,
              y: 0
            };
            this._pointerPositionAtLastDirectionChange = {
              x: pointerPosition.x,
              y: pointerPosition.y
            };
            this._dragStartTime = Date.now();

            this._dragDropRegistry.startDragging(this, event);
          }
          /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */

        }, {
          key: "_cleanupDragArtifacts",
          value: function _cleanupDragArtifacts(event) {
            var _this8 = this;

            // Restore the element's visibility and insert it at its old position in the DOM.
            // It's important that we maintain the position, because moving the element around in the DOM
            // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,
            // while moving the existing elements in all other cases.
            this._rootElement.style.display = '';

            this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);

            this._destroyPreview();

            this._destroyPlaceholder();

            this._boundaryRect = this._previewRect = undefined; // Re-enter the NgZone since we bound `document` events on the outside.

            this._ngZone.run(function () {
              var container = _this8._dropContainer;
              var currentIndex = container.getItemIndex(_this8);

              var pointerPosition = _this8._getPointerPositionOnPage(event);

              var distance = _this8._getDragDistance(_this8._getPointerPositionOnPage(event));

              var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);

              _this8.ended.next({
                source: _this8,
                distance: distance
              });

              _this8.dropped.next({
                item: _this8,
                currentIndex: currentIndex,
                previousIndex: _this8._initialIndex,
                container: container,
                previousContainer: _this8._initialContainer,
                isPointerOverContainer: isPointerOverContainer,
                distance: distance
              });

              container.drop(_this8, currentIndex, _this8._initialContainer, isPointerOverContainer, distance, _this8._initialIndex);
              _this8._dropContainer = _this8._initialContainer;
            });
          }
          /**
           * Updates the item's position in its drop container, or moves it
           * into a new one, depending on its current drag position.
           */

        }, {
          key: "_updateActiveDropContainer",
          value: function _updateActiveDropContainer(_ref, _ref2) {
            var _this9 = this;

            var x = _ref.x,
                y = _ref.y;
            var rawX = _ref2.x,
                rawY = _ref2.y;

            // Drop container that draggable has been moved into.
            var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y); // If we couldn't find a new container to move the item into, and the item has left its
            // initial container, check whether the it's over the initial container. This handles the
            // case where two containers are connected one way and the user tries to undo dragging an
            // item into a new container.


            if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {
              newContainer = this._initialContainer;
            }

            if (newContainer && newContainer !== this._dropContainer) {
              this._ngZone.run(function () {
                // Notify the old container that the item has left.
                _this9.exited.next({
                  item: _this9,
                  container: _this9._dropContainer
                });

                _this9._dropContainer.exit(_this9); // Notify the new container that the item has entered.


                _this9._dropContainer = newContainer;

                _this9._dropContainer.enter(_this9, x, y, newContainer === _this9._initialContainer && // If we're re-entering the initial container and sorting is disabled,
                // put item the into its starting index to begin with.
                newContainer.sortingDisabled ? _this9._initialIndex : undefined);

                _this9.entered.next({
                  item: _this9,
                  container: newContainer,
                  currentIndex: newContainer.getItemIndex(_this9)
                });
              });
            }

            this._dropContainer._startScrollingIfNecessary(rawX, rawY);

            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);

            this._preview.style.transform = getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);
          }
          /**
           * Creates the element that will be rendered next to the user's pointer
           * and will be used as a preview of the element that is being dragged.
           */

        }, {
          key: "_createPreviewElement",
          value: function _createPreviewElement() {
            var previewConfig = this._previewTemplate;
            var previewClass = this.previewClass;
            var previewTemplate = previewConfig ? previewConfig.template : null;
            var preview;

            if (previewTemplate && previewConfig) {
              // Measure the element before we've inserted the preview
              // since the insertion could throw off the measurement.
              var rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;
              var viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);
              viewRef.detectChanges();
              preview = getRootNode(viewRef, this._document);
              this._previewRef = viewRef;

              if (previewConfig.matchSize) {
                matchElementSize(preview, rootRect);
              } else {
                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);
              }
            } else {
              var element = this._rootElement;
              preview = deepCloneNode(element);
              matchElementSize(preview, element.getBoundingClientRect());
            }

            extendStyles(preview.style, {
              // It's important that we disable the pointer events on the preview, because
              // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.
              pointerEvents: 'none',
              // We have to reset the margin, because it can throw off positioning relative to the viewport.
              margin: '0',
              position: 'fixed',
              top: '0',
              left: '0',
              zIndex: "".concat(this._config.zIndex || 1000)
            });
            toggleNativeDragInteractions(preview, false);
            preview.classList.add('cdk-drag-preview');
            preview.setAttribute('dir', this._direction);

            if (previewClass) {
              if (Array.isArray(previewClass)) {
                previewClass.forEach(function (className) {
                  return preview.classList.add(className);
                });
              } else {
                preview.classList.add(previewClass);
              }
            }

            return preview;
          }
          /**
           * Animates the preview element from its current position to the location of the drop placeholder.
           * @returns Promise that resolves when the animation completes.
           */

        }, {
          key: "_animatePreviewToPlaceholder",
          value: function _animatePreviewToPlaceholder() {
            var _this10 = this;

            // If the user hasn't moved yet, the transitionend event won't fire.
            if (!this._hasMoved) {
              return Promise.resolve();
            }

            var placeholderRect = this._placeholder.getBoundingClientRect(); // Apply the class that adds a transition to the preview.


            this._preview.classList.add('cdk-drag-animating'); // Move the preview to the placeholder position.


            this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top); // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since
            // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to
            // apply its style, we take advantage of the available info to figure out whether we need to
            // bind the event in the first place.

            var duration = getTransformTransitionDurationInMs(this._preview);

            if (duration === 0) {
              return Promise.resolve();
            }

            return this._ngZone.runOutsideAngular(function () {
              return new Promise(function (resolve) {
                var handler = function handler(event) {
                  if (!event || event.target === _this10._preview && event.propertyName === 'transform') {
                    _this10._preview.removeEventListener('transitionend', handler);

                    resolve();
                    clearTimeout(timeout);
                  }
                }; // If a transition is short enough, the browser might not fire the `transitionend` event.
                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll
                // fire if the transition hasn't completed when it was supposed to.


                var timeout = setTimeout(handler, duration * 1.5);

                _this10._preview.addEventListener('transitionend', handler);
              });
            });
          }
          /** Creates an element that will be shown instead of the current element while dragging. */

        }, {
          key: "_createPlaceholderElement",
          value: function _createPlaceholderElement() {
            var placeholderConfig = this._placeholderTemplate;
            var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;
            var placeholder;

            if (placeholderTemplate) {
              this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);

              this._placeholderRef.detectChanges();

              placeholder = getRootNode(this._placeholderRef, this._document);
            } else {
              placeholder = deepCloneNode(this._rootElement);
            }

            placeholder.classList.add('cdk-drag-placeholder');
            return placeholder;
          }
          /**
           * Figures out the coordinates at which an element was picked up.
           * @param referenceElement Element that initiated the dragging.
           * @param event Event that initiated the dragging.
           */

        }, {
          key: "_getPointerPositionInElement",
          value: function _getPointerPositionInElement(referenceElement, event) {
            var elementRect = this._rootElement.getBoundingClientRect();

            var handleElement = referenceElement === this._rootElement ? null : referenceElement;
            var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;
            var point = isTouchEvent(event) ? event.targetTouches[0] : event;

            var scrollPosition = this._getViewportScrollPosition();

            var x = point.pageX - referenceRect.left - scrollPosition.left;
            var y = point.pageY - referenceRect.top - scrollPosition.top;
            return {
              x: referenceRect.left - elementRect.left + x,
              y: referenceRect.top - elementRect.top + y
            };
          }
          /** Determines the point of the page that was touched by the user. */

        }, {
          key: "_getPointerPositionOnPage",
          value: function _getPointerPositionOnPage(event) {
            var scrollPosition = this._getViewportScrollPosition();

            var point = isTouchEvent(event) ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.
            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`
            // to have a value, but Firefox in device emulation mode has a bug where both can be empty
            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid
            // throwing an error. The value returned here will be incorrect, but since this only
            // breaks inside a developer tool and the value is only used for secondary information,
            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.
            event.touches[0] || event.changedTouches[0] || {
              pageX: 0,
              pageY: 0
            } : event;
            var x = point.pageX - scrollPosition.left;
            var y = point.pageY - scrollPosition.top; // if dragging SVG element, try to convert from the screen coordinate system to the SVG
            // coordinate system

            if (this._ownerSVGElement) {
              var svgMatrix = this._ownerSVGElement.getScreenCTM();

              if (svgMatrix) {
                var svgPoint = this._ownerSVGElement.createSVGPoint();

                svgPoint.x = x;
                svgPoint.y = y;
                return svgPoint.matrixTransform(svgMatrix.inverse());
              }
            }

            return {
              x: x,
              y: y
            };
          }
          /** Gets the pointer position on the page, accounting for any position constraints. */

        }, {
          key: "_getConstrainedPointerPosition",
          value: function _getConstrainedPointerPosition(point) {
            var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;

            var _ref3 = this.constrainPosition ? this.constrainPosition(point, this) : point,
                x = _ref3.x,
                y = _ref3.y;

            if (this.lockAxis === 'x' || dropContainerLock === 'x') {
              y = this._pickupPositionOnPage.y;
            } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {
              x = this._pickupPositionOnPage.x;
            }

            if (this._boundaryRect) {
              var _this$_pickupPosition = this._pickupPositionInElement,
                  pickupX = _this$_pickupPosition.x,
                  pickupY = _this$_pickupPosition.y;
              var boundaryRect = this._boundaryRect;
              var previewRect = this._previewRect;
              var minY = boundaryRect.top + pickupY;
              var maxY = boundaryRect.bottom - (previewRect.height - pickupY);
              var minX = boundaryRect.left + pickupX;
              var maxX = boundaryRect.right - (previewRect.width - pickupX);
              x = clamp(x, minX, maxX);
              y = clamp(y, minY, maxY);
            }

            return {
              x: x,
              y: y
            };
          }
          /** Updates the current drag delta, based on the user's current pointer position on the page. */

        }, {
          key: "_updatePointerDirectionDelta",
          value: function _updatePointerDirectionDelta(pointerPositionOnPage) {
            var x = pointerPositionOnPage.x,
                y = pointerPositionOnPage.y;
            var delta = this._pointerDirectionDelta;
            var positionSinceLastChange = this._pointerPositionAtLastDirectionChange; // Amount of pixels the user has dragged since the last time the direction changed.

            var changeX = Math.abs(x - positionSinceLastChange.x);
            var changeY = Math.abs(y - positionSinceLastChange.y); // Because we handle pointer events on a per-pixel basis, we don't want the delta
            // to change for every pixel, otherwise anything that depends on it can look erratic.
            // To make the delta more consistent, we track how much the user has moved since the last
            // delta change and we only update it after it has reached a certain threshold.

            if (changeX > this._config.pointerDirectionChangeThreshold) {
              delta.x = x > positionSinceLastChange.x ? 1 : -1;
              positionSinceLastChange.x = x;
            }

            if (changeY > this._config.pointerDirectionChangeThreshold) {
              delta.y = y > positionSinceLastChange.y ? 1 : -1;
              positionSinceLastChange.y = y;
            }

            return delta;
          }
          /** Toggles the native drag interactions, based on how many handles are registered. */

        }, {
          key: "_toggleNativeDragInteractions",
          value: function _toggleNativeDragInteractions() {
            if (!this._rootElement || !this._handles) {
              return;
            }

            var shouldEnable = this._handles.length > 0 || !this.isDragging();

            if (shouldEnable !== this._nativeInteractionsEnabled) {
              this._nativeInteractionsEnabled = shouldEnable;
              toggleNativeDragInteractions(this._rootElement, shouldEnable);
            }
          }
          /** Removes the manually-added event listeners from the root element. */

        }, {
          key: "_removeRootElementListeners",
          value: function _removeRootElementListeners(element) {
            element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);
            element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);
          }
          /**
           * Applies a `transform` to the root element, taking into account any existing transforms on it.
           * @param x New transform value along the X axis.
           * @param y New transform value along the Y axis.
           */

        }, {
          key: "_applyRootElementTransform",
          value: function _applyRootElementTransform(x, y) {
            var transform = getTransform(x, y); // Cache the previous transform amount only after the first drag sequence, because
            // we don't want our own transforms to stack on top of each other.

            if (this._initialTransform == null) {
              this._initialTransform = this._rootElement.style.transform || '';
            } // Preserve the previous `transform` value, if there was one. Note that we apply our own
            // transform before the user's, because things like rotation can affect which direction
            // the element will be translated towards.


            this._rootElement.style.transform = this._initialTransform ? transform + ' ' + this._initialTransform : transform;
          }
          /**
           * Gets the distance that the user has dragged during the current drag sequence.
           * @param currentPosition Current position of the user's pointer.
           */

        }, {
          key: "_getDragDistance",
          value: function _getDragDistance(currentPosition) {
            var pickupPosition = this._pickupPositionOnPage;

            if (pickupPosition) {
              return {
                x: currentPosition.x - pickupPosition.x,
                y: currentPosition.y - pickupPosition.y
              };
            }

            return {
              x: 0,
              y: 0
            };
          }
          /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */

        }, {
          key: "_cleanupCachedDimensions",
          value: function _cleanupCachedDimensions() {
            this._boundaryRect = this._previewRect = undefined;

            this._parentPositions.clear();
          }
          /**
           * Checks whether the element is still inside its boundary after the viewport has been resized.
           * If not, the position is adjusted so that the element fits again.
           */

        }, {
          key: "_containInsideBoundaryOnResize",
          value: function _containInsideBoundaryOnResize() {
            var _this$_passiveTransfo = this._passiveTransform,
                x = _this$_passiveTransfo.x,
                y = _this$_passiveTransfo.y;

            if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {
              return;
            }

            var boundaryRect = this._boundaryElement.getBoundingClientRect();

            var elementRect = this._rootElement.getBoundingClientRect(); // It's possible that the element got hidden away after dragging (e.g. by switching to a
            // different tab). Don't do anything in this case so we don't clear the user's position.


            if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {
              return;
            }

            var leftOverflow = boundaryRect.left - elementRect.left;
            var rightOverflow = elementRect.right - boundaryRect.right;
            var topOverflow = boundaryRect.top - elementRect.top;
            var bottomOverflow = elementRect.bottom - boundaryRect.bottom; // If the element has become wider than the boundary, we can't
            // do much to make it fit so we just anchor it to the left.

            if (boundaryRect.width > elementRect.width) {
              if (leftOverflow > 0) {
                x += leftOverflow;
              }

              if (rightOverflow > 0) {
                x -= rightOverflow;
              }
            } else {
              x = 0;
            } // If the element has become taller than the boundary, we can't
            // do much to make it fit so we just anchor it to the top.


            if (boundaryRect.height > elementRect.height) {
              if (topOverflow > 0) {
                y += topOverflow;
              }

              if (bottomOverflow > 0) {
                y -= bottomOverflow;
              }
            } else {
              y = 0;
            }

            if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {
              this.setFreeDragPosition({
                y: y,
                x: x
              });
            }
          }
          /** Gets the drag start delay, based on the event type. */

        }, {
          key: "_getDragStartDelay",
          value: function _getDragStartDelay(event) {
            var value = this.dragStartDelay;

            if (typeof value === 'number') {
              return value;
            } else if (isTouchEvent(event)) {
              return value.touch;
            }

            return value ? value.mouse : 0;
          }
          /** Updates the internal state of the draggable element when scrolling has occurred. */

        }, {
          key: "_updateOnScroll",
          value: function _updateOnScroll(event) {
            var scrollDifference = this._parentPositions.handleScroll(event);

            if (scrollDifference) {
              var target = event.target; // ClientRect dimensions are based on the scroll position of the page and its parent node so
              // we have to update the cached boundary ClientRect if the user has scrolled. Check for
              // the `document` specifically since IE doesn't support `contains` on it.

              if (this._boundaryRect && (target === this._document || target !== this._boundaryElement && target.contains(this._boundaryElement))) {
                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);
              }

              this._pickupPositionOnPage.x += scrollDifference.left;
              this._pickupPositionOnPage.y += scrollDifference.top; // If we're in free drag mode, we have to update the active transform, because
              // it isn't relative to the viewport like the preview inside a drop list.

              if (!this._dropContainer) {
                this._activeTransform.x -= scrollDifference.left;
                this._activeTransform.y -= scrollDifference.top;

                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);
              }
            }
          }
          /** Gets the scroll position of the viewport. */

        }, {
          key: "_getViewportScrollPosition",
          value: function _getViewportScrollPosition() {
            var cachedPosition = this._parentPositions.positions.get(this._document);

            return cachedPosition ? cachedPosition.scrollPosition : this._viewportRuler.getViewportScrollPosition();
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);
          },
          set: function set(value) {
            var newValue = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);

            if (newValue !== this._disabled) {
              this._disabled = newValue;

              this._toggleNativeDragInteractions();
            }
          }
        }]);

        return DragRef;
      }();
      /**
       * Gets a 3d `transform` that can be applied to an element.
       * @param x Desired position of the element along the X axis.
       * @param y Desired position of the element along the Y axis.
       */


      function getTransform(x, y) {
        // Round the transforms since some browsers will
        // blur the elements for sub-pixel transforms.
        return "translate3d(".concat(Math.round(x), "px, ").concat(Math.round(y), "px, 0)");
      }
      /** Creates a deep clone of an element. */


      function deepCloneNode(node) {
        var clone = node.cloneNode(true);
        var descendantsWithId = clone.querySelectorAll('[id]');
        var descendantCanvases = node.querySelectorAll('canvas'); // Remove the `id` to avoid having multiple elements with the same id on the page.

        clone.removeAttribute('id');

        for (var i = 0; i < descendantsWithId.length; i++) {
          descendantsWithId[i].removeAttribute('id');
        } // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.
        // We match up the cloned canvas to their sources using their index in the DOM.


        if (descendantCanvases.length) {
          var cloneCanvases = clone.querySelectorAll('canvas');

          for (var _i2 = 0; _i2 < descendantCanvases.length; _i2++) {
            var correspondingCloneContext = cloneCanvases[_i2].getContext('2d');

            if (correspondingCloneContext) {
              // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).
              // We can't do much about it so just ignore the error.
              try {
                correspondingCloneContext.drawImage(descendantCanvases[_i2], 0, 0);
              } catch (_a) {}
            }
          }
        }

        return clone;
      }
      /** Clamps a value between a minimum and a maximum. */


      function clamp(value, min, max) {
        return Math.max(min, Math.min(max, value));
      }
      /**
       * Helper to remove a node from the DOM and to do all the necessary null checks.
       * @param node Node to be removed.
       */


      function removeNode(node) {
        if (node && node.parentNode) {
          node.parentNode.removeChild(node);
        }
      }
      /** Determines whether an event is a touch event. */


      function isTouchEvent(event) {
        // This function is called for every pixel that the user has dragged so we need it to be
        // as fast as possible. Since we only bind mouse events and touch events, we can assume
        // that if the event's name starts with `t`, it's a touch event.
        return event.type[0] === 't';
      }
      /** Gets the element into which the drag preview should be inserted. */


      function getPreviewInsertionPoint(documentRef) {
        // We can't use the body if the user is in fullscreen mode,
        // because the preview will render under the fullscreen element.
        // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.
        return documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;
      }
      /**
       * Gets the root HTML element of an embedded view.
       * If the root is not an HTML element it gets wrapped in one.
       */


      function getRootNode(viewRef, _document) {
        var rootNodes = viewRef.rootNodes;

        if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {
          return rootNodes[0];
        }

        var wrapper = _document.createElement('div');

        rootNodes.forEach(function (node) {
          return wrapper.appendChild(node);
        });
        return wrapper;
      }
      /**
       * Matches the target element's size to the source's size.
       * @param target Element that needs to be resized.
       * @param sourceRect Dimensions of the source element.
       */


      function matchElementSize(target, sourceRect) {
        target.style.width = "".concat(sourceRect.width, "px");
        target.style.height = "".concat(sourceRect.height, "px");
        target.style.transform = getTransform(sourceRect.left, sourceRect.top);
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Moves an item one index in an array to another.
       * @param array Array in which to move the item.
       * @param fromIndex Starting index of the item.
       * @param toIndex Index to which the item should be moved.
       */


      function moveItemInArray(array, fromIndex, toIndex) {
        var from = clamp$1(fromIndex, array.length - 1);
        var to = clamp$1(toIndex, array.length - 1);

        if (from === to) {
          return;
        }

        var target = array[from];
        var delta = to < from ? -1 : 1;

        for (var i = from; i !== to; i += delta) {
          array[i] = array[i + delta];
        }

        array[to] = target;
      }
      /**
       * Moves an item from one array to another.
       * @param currentArray Array from which to transfer the item.
       * @param targetArray Array into which to put the item.
       * @param currentIndex Index of the item in its current array.
       * @param targetIndex Index at which to insert the item.
       */


      function transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {
        var from = clamp$1(currentIndex, currentArray.length - 1);
        var to = clamp$1(targetIndex, targetArray.length);

        if (currentArray.length) {
          targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);
        }
      }
      /**
       * Copies an item from one array to another, leaving it in its
       * original position in current array.
       * @param currentArray Array from which to copy the item.
       * @param targetArray Array into which is copy the item.
       * @param currentIndex Index of the item in its current array.
       * @param targetIndex Index at which to insert the item.
       *
       */


      function copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {
        var to = clamp$1(targetIndex, targetArray.length);

        if (currentArray.length) {
          targetArray.splice(to, 0, currentArray[currentIndex]);
        }
      }
      /** Clamps a number between zero and a maximum. */


      function clamp$1(value, max) {
        return Math.max(0, Math.min(max, value));
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Proximity, as a ratio to width/height, at which a
       * dragged item will affect the drop container.
       */


      var DROP_PROXIMITY_THRESHOLD = 0.05;
      /**
       * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the
       * viewport. The value comes from trying it out manually until it feels right.
       */

      var SCROLL_PROXIMITY_THRESHOLD = 0.05;
      /**
       * Number of pixels to scroll for each frame when auto-scrolling an element.
       * The value comes from trying it out manually until it feels right.
       */

      var AUTO_SCROLL_STEP = 2;
      /**
       * Reference to a drop list. Used to manipulate or dispose of the container.
       */

      var DropListRef = /*#__PURE__*/function () {
        function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {
          var _this11 = this;

          _classCallCheck(this, DropListRef);

          this._dragDropRegistry = _dragDropRegistry;
          this._ngZone = _ngZone;
          this._viewportRuler = _viewportRuler;
          /** Whether starting a dragging sequence from this container is disabled. */

          this.disabled = false;
          /** Whether sorting items within the list is disabled. */

          this.sortingDisabled = false;
          /**
           * Whether auto-scrolling the view when the user
           * moves their pointer close to the edges is disabled.
           */

          this.autoScrollDisabled = false;
          /**
           * Function that is used to determine whether an item
           * is allowed to be moved into a drop container.
           */

          this.enterPredicate = function () {
            return true;
          };
          /** Emits right before dragging has started. */


          this.beforeStarted = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Emits when the user has moved a new drag item into this container.
           */

          this.entered = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Emits when the user removes an item from the container
           * by dragging it into another container.
           */

          this.exited = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the user drops an item inside the container. */

          this.dropped = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits as the user is swapping items while actively dragging. */

          this.sorted = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Whether an item in the list is being dragged. */

          this._isDragging = false;
          /** Cache of the dimensions of all the items inside the container. */

          this._itemPositions = [];
          /**
           * Keeps track of the item that was last swapped with the dragged item, as well as what direction
           * the pointer was moving in when the swap occured and whether the user's pointer continued to
           * overlap with the swapped item after the swapping occurred.
           */

          this._previousSwap = {
            drag: null,
            delta: 0,
            overlaps: false
          };
          /** Drop lists that are connected to the current one. */

          this._siblings = [];
          /** Direction in which the list is oriented. */

          this._orientation = 'vertical';
          /** Connected siblings that currently have a dragged item. */

          this._activeSiblings = new Set();
          /** Layout direction of the drop list. */

          this._direction = 'ltr';
          /** Subscription to the window being scrolled. */

          this._viewportScrollSubscription = rxjs__WEBPACK_IMPORTED_MODULE_5__["Subscription"].EMPTY;
          /** Vertical direction in which the list is currently scrolling. */

          this._verticalScrollDirection = 0
          /* NONE */
          ;
          /** Horizontal direction in which the list is currently scrolling. */

          this._horizontalScrollDirection = 0
          /* NONE */
          ;
          /** Used to signal to the current auto-scroll sequence when to stop. */

          this._stopScrollTimers = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */

          this._cachedShadowRoot = null;
          /** Starts the interval that'll auto-scroll the element. */

          this._startScrollInterval = function () {
            _this11._stopScrolling();

            Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["interval"])(0, rxjs__WEBPACK_IMPORTED_MODULE_5__["animationFrameScheduler"]).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(_this11._stopScrollTimers)).subscribe(function () {
              var node = _this11._scrollNode;

              if (_this11._verticalScrollDirection === 1
              /* UP */
              ) {
                  incrementVerticalScroll(node, -AUTO_SCROLL_STEP);
                } else if (_this11._verticalScrollDirection === 2
              /* DOWN */
              ) {
                  incrementVerticalScroll(node, AUTO_SCROLL_STEP);
                }

              if (_this11._horizontalScrollDirection === 1
              /* LEFT */
              ) {
                  incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);
                } else if (_this11._horizontalScrollDirection === 2
              /* RIGHT */
              ) {
                  incrementHorizontalScroll(node, AUTO_SCROLL_STEP);
                }
            });
          };

          this.element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(element);
          this._document = _document;
          this.withScrollableParents([this.element]);

          _dragDropRegistry.registerDropContainer(this);

          this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);
        }
        /** Removes the drop list functionality from the DOM element. */


        _createClass(DropListRef, [{
          key: "dispose",
          value: function dispose() {
            this._stopScrolling();

            this._stopScrollTimers.complete();

            this._viewportScrollSubscription.unsubscribe();

            this.beforeStarted.complete();
            this.entered.complete();
            this.exited.complete();
            this.dropped.complete();
            this.sorted.complete();

            this._activeSiblings.clear();

            this._scrollNode = null;

            this._parentPositions.clear();

            this._dragDropRegistry.removeDropContainer(this);
          }
          /** Whether an item from this list is currently being dragged. */

        }, {
          key: "isDragging",
          value: function isDragging() {
            return this._isDragging;
          }
          /** Starts dragging an item. */

        }, {
          key: "start",
          value: function start() {
            var _this12 = this;

            var styles = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(this.element).style;
            this.beforeStarted.next();
            this._isDragging = true; // We need to disable scroll snapping while the user is dragging, because it breaks automatic
            // scrolling. The browser seems to round the value based on the snapping points which means
            // that we can't increment/decrement the scroll position.

            this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';
            styles.scrollSnapType = styles.msScrollSnapType = 'none';

            this._cacheItems();

            this._siblings.forEach(function (sibling) {
              return sibling._startReceiving(_this12);
            });

            this._viewportScrollSubscription.unsubscribe();

            this._listenToScrollEvents();
          }
          /**
           * Emits an event to indicate that the user moved an item into the container.
           * @param item Item that was moved into the container.
           * @param pointerX Position of the item along the X axis.
           * @param pointerY Position of the item along the Y axis.
           * @param index Index at which the item entered. If omitted, the container will try to figure it
           *   out automatically.
           */

        }, {
          key: "enter",
          value: function enter(item, pointerX, pointerY, index) {
            this.start(); // If sorting is disabled, we want the item to return to its starting
            // position if the user is returning it to its initial container.

            var newIndex;

            if (index == null) {
              newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;

              if (newIndex === -1) {
                // We use the coordinates of where the item entered the drop
                // zone to figure out at which index it should be inserted.
                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);
              }
            } else {
              newIndex = index;
            }

            var activeDraggables = this._activeDraggables;
            var currentIndex = activeDraggables.indexOf(item);
            var placeholder = item.getPlaceholderElement();
            var newPositionReference = activeDraggables[newIndex]; // If the item at the new position is the same as the item that is being dragged,
            // it means that we're trying to restore the item to its initial position. In this
            // case we should use the next item from the list as the reference.

            if (newPositionReference === item) {
              newPositionReference = activeDraggables[newIndex + 1];
            } // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it
            // into another container and back again), we have to ensure that it isn't duplicated.


            if (currentIndex > -1) {
              activeDraggables.splice(currentIndex, 1);
            } // Don't use items that are being dragged as a reference, because
            // their element has been moved down to the bottom of the body.


            if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {
              var element = newPositionReference.getRootElement();
              element.parentElement.insertBefore(placeholder, element);
              activeDraggables.splice(newIndex, 0, item);
            } else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {
              var reference = activeDraggables[0].getRootElement();
              reference.parentNode.insertBefore(placeholder, reference);
              activeDraggables.unshift(item);
            } else {
              Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(this.element).appendChild(placeholder);
              activeDraggables.push(item);
            } // The transform needs to be cleared so it doesn't throw off the measurements.


            placeholder.style.transform = ''; // Note that the positions were already cached when we called `start` above,
            // but we need to refresh them since the amount of items has changed and also parent rects.

            this._cacheItemPositions();

            this._cacheParentPositions();

            this.entered.next({
              item: item,
              container: this,
              currentIndex: this.getItemIndex(item)
            });
          }
          /**
           * Removes an item from the container after it was dragged into another container by the user.
           * @param item Item that was dragged out.
           */

        }, {
          key: "exit",
          value: function exit(item) {
            this._reset();

            this.exited.next({
              item: item,
              container: this
            });
          }
          /**
           * Drops an item into this container.
           * @param item Item being dropped into the container.
           * @param currentIndex Index at which the item should be inserted.
           * @param previousContainer Container from which the item got dragged in.
           * @param isPointerOverContainer Whether the user's pointer was over the
           *    container when the item was dropped.
           * @param distance Distance the user has dragged since the start of the dragging sequence.
           * @param previousIndex Index of the item when dragging started.
           *
           * @breaking-change 11.0.0 `previousIndex` parameter to become required.
           */

        }, {
          key: "drop",
          value: function drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {
            this._reset(); // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.


            if (previousIndex == null) {
              previousIndex = previousContainer.getItemIndex(item);
            }

            this.dropped.next({
              item: item,
              currentIndex: currentIndex,
              previousIndex: previousIndex,
              container: this,
              previousContainer: previousContainer,
              isPointerOverContainer: isPointerOverContainer,
              distance: distance
            });
          }
          /**
           * Sets the draggable items that are a part of this list.
           * @param items Items that are a part of this list.
           */

        }, {
          key: "withItems",
          value: function withItems(items) {
            var _this13 = this;

            var previousItems = this._draggables;
            this._draggables = items;
            items.forEach(function (item) {
              return item._withDropContainer(_this13);
            });

            if (this.isDragging()) {
              var draggedItems = previousItems.filter(function (item) {
                return item.isDragging();
              }); // If all of the items being dragged were removed
              // from the list, abort the current drag sequence.

              if (draggedItems.every(function (item) {
                return items.indexOf(item) === -1;
              })) {
                this._reset();
              } else {
                this._cacheItems();
              }
            }

            return this;
          }
          /** Sets the layout direction of the drop list. */

        }, {
          key: "withDirection",
          value: function withDirection(direction) {
            this._direction = direction;
            return this;
          }
          /**
           * Sets the containers that are connected to this one. When two or more containers are
           * connected, the user will be allowed to transfer items between them.
           * @param connectedTo Other containers that the current containers should be connected to.
           */

        }, {
          key: "connectedTo",
          value: function connectedTo(_connectedTo) {
            this._siblings = _connectedTo.slice();
            return this;
          }
          /**
           * Sets the orientation of the container.
           * @param orientation New orientation for the container.
           */

        }, {
          key: "withOrientation",
          value: function withOrientation(orientation) {
            this._orientation = orientation;
            return this;
          }
          /**
           * Sets which parent elements are can be scrolled while the user is dragging.
           * @param elements Elements that can be scrolled.
           */

        }, {
          key: "withScrollableParents",
          value: function withScrollableParents(elements) {
            var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(this.element); // We always allow the current element to be scrollable
            // so we need to ensure that it's in the array.

            this._scrollableElements = elements.indexOf(element) === -1 ? [element].concat(_toConsumableArray(elements)) : elements.slice();
            return this;
          }
          /** Gets the scrollable parents that are registered with this drop container. */

        }, {
          key: "getScrollableParents",
          value: function getScrollableParents() {
            return this._scrollableElements;
          }
          /**
           * Figures out the index of an item in the container.
           * @param item Item whose index should be determined.
           */

        }, {
          key: "getItemIndex",
          value: function getItemIndex(item) {
            if (!this._isDragging) {
              return this._draggables.indexOf(item);
            } // Items are sorted always by top/left in the cache, however they flow differently in RTL.
            // The rest of the logic still stands no matter what orientation we're in, however
            // we need to invert the array when determining the index.


            var items = this._orientation === 'horizontal' && this._direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;
            return findIndex(items, function (currentItem) {
              return currentItem.drag === item;
            });
          }
          /**
           * Whether the list is able to receive the item that
           * is currently being dragged inside a connected drop list.
           */

        }, {
          key: "isReceiving",
          value: function isReceiving() {
            return this._activeSiblings.size > 0;
          }
          /**
           * Sorts an item inside the container based on its position.
           * @param item Item to be sorted.
           * @param pointerX Position of the item along the X axis.
           * @param pointerY Position of the item along the Y axis.
           * @param pointerDelta Direction in which the pointer is moving along each axis.
           */

        }, {
          key: "_sortItem",
          value: function _sortItem(item, pointerX, pointerY, pointerDelta) {
            // Don't sort the item if sorting is disabled or it's out of range.
            if (this.sortingDisabled || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {
              return;
            }

            var siblings = this._itemPositions;

            var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);

            if (newIndex === -1 && siblings.length > 0) {
              return;
            }

            var isHorizontal = this._orientation === 'horizontal';
            var currentIndex = findIndex(siblings, function (currentItem) {
              return currentItem.drag === item;
            });
            var siblingAtNewPosition = siblings[newIndex];
            var currentPosition = siblings[currentIndex].clientRect;
            var newPosition = siblingAtNewPosition.clientRect;
            var delta = currentIndex > newIndex ? 1 : -1; // How many pixels the item's placeholder should be offset.

            var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta); // How many pixels all the other items should be offset.


            var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta); // Save the previous order of the items before moving the item to its new index.
            // We use this to check whether an item has been moved as a result of the sorting.


            var oldOrder = siblings.slice(); // Shuffle the array in place.

            moveItemInArray(siblings, currentIndex, newIndex);
            this.sorted.next({
              previousIndex: currentIndex,
              currentIndex: newIndex,
              container: this,
              item: item
            });
            siblings.forEach(function (sibling, index) {
              // Don't do anything if the position hasn't changed.
              if (oldOrder[index] === sibling) {
                return;
              }

              var isDraggedItem = sibling.drag === item;
              var offset = isDraggedItem ? itemOffset : siblingOffset;
              var elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement(); // Update the offset to reflect the new position.

              sibling.offset += offset; // Since we're moving the items with a `transform`, we need to adjust their cached
              // client rects to reflect their new position, as well as swap their positions in the cache.
              // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the
              // elements may be mid-animation which will give us a wrong result.

              if (isHorizontal) {
                // Round the transforms since some browsers will
                // blur the elements, for sub-pixel transforms.
                elementToOffset.style.transform = "translate3d(".concat(Math.round(sibling.offset), "px, 0, 0)");
                adjustClientRect(sibling.clientRect, 0, offset);
              } else {
                elementToOffset.style.transform = "translate3d(0, ".concat(Math.round(sibling.offset), "px, 0)");
                adjustClientRect(sibling.clientRect, offset, 0);
              }
            }); // Note that it's important that we do this after the client rects have been adjusted.

            this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);
            this._previousSwap.drag = siblingAtNewPosition.drag;
            this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;
          }
          /**
           * Checks whether the user's pointer is close to the edges of either the
           * viewport or the drop list and starts the auto-scroll sequence.
           * @param pointerX User's pointer position along the x axis.
           * @param pointerY User's pointer position along the y axis.
           */

        }, {
          key: "_startScrollingIfNecessary",
          value: function _startScrollingIfNecessary(pointerX, pointerY) {
            var _this14 = this;

            if (this.autoScrollDisabled) {
              return;
            }

            var scrollNode;
            var verticalScrollDirection = 0
            /* NONE */
            ;
            var horizontalScrollDirection = 0
            /* NONE */
            ; // Check whether we should start scrolling any of the parent containers.

            this._parentPositions.positions.forEach(function (position, element) {
              // We have special handling for the `document` below. Also this would be
              // nicer with a  for...of loop, but it requires changing a compiler flag.
              if (element === _this14._document || !position.clientRect || scrollNode) {
                return;
              }

              if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {
                var _getElementScrollDire = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);

                var _getElementScrollDire2 = _slicedToArray(_getElementScrollDire, 2);

                verticalScrollDirection = _getElementScrollDire2[0];
                horizontalScrollDirection = _getElementScrollDire2[1];

                if (verticalScrollDirection || horizontalScrollDirection) {
                  scrollNode = element;
                }
              }
            }); // Otherwise check if we can start scrolling the viewport.


            if (!verticalScrollDirection && !horizontalScrollDirection) {
              var _this$_viewportRuler$ = this._viewportRuler.getViewportSize(),
                  width = _this$_viewportRuler$.width,
                  height = _this$_viewportRuler$.height;

              var clientRect = {
                width: width,
                height: height,
                top: 0,
                right: width,
                bottom: height,
                left: 0
              };
              verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);
              horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);
              scrollNode = window;
            }

            if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {
              this._verticalScrollDirection = verticalScrollDirection;
              this._horizontalScrollDirection = horizontalScrollDirection;
              this._scrollNode = scrollNode;

              if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {
                this._ngZone.runOutsideAngular(this._startScrollInterval);
              } else {
                this._stopScrolling();
              }
            }
          }
          /** Stops any currently-running auto-scroll sequences. */

        }, {
          key: "_stopScrolling",
          value: function _stopScrolling() {
            this._stopScrollTimers.next();
          }
          /** Caches the positions of the configured scrollable parents. */

        }, {
          key: "_cacheParentPositions",
          value: function _cacheParentPositions() {
            var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(this.element);

            this._parentPositions.cache(this._scrollableElements); // The list element is always in the `scrollableElements`
            // so we can take advantage of the cached `ClientRect`.


            this._clientRect = this._parentPositions.positions.get(element).clientRect;
          }
          /** Refreshes the position cache of the items and sibling containers. */

        }, {
          key: "_cacheItemPositions",
          value: function _cacheItemPositions() {
            var isHorizontal = this._orientation === 'horizontal';
            this._itemPositions = this._activeDraggables.map(function (drag) {
              var elementToMeasure = drag.getVisibleElement();
              return {
                drag: drag,
                offset: 0,
                clientRect: getMutableClientRect(elementToMeasure)
              };
            }).sort(function (a, b) {
              return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;
            });
          }
          /** Resets the container to its initial state. */

        }, {
          key: "_reset",
          value: function _reset() {
            var _this15 = this;

            this._isDragging = false;
            var styles = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(this.element).style;
            styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap; // TODO(crisbeto): may have to wait for the animations to finish.

            this._activeDraggables.forEach(function (item) {
              var rootElement = item.getRootElement();

              if (rootElement) {
                rootElement.style.transform = '';
              }
            });

            this._siblings.forEach(function (sibling) {
              return sibling._stopReceiving(_this15);
            });

            this._activeDraggables = [];
            this._itemPositions = [];
            this._previousSwap.drag = null;
            this._previousSwap.delta = 0;
            this._previousSwap.overlaps = false;

            this._stopScrolling();

            this._viewportScrollSubscription.unsubscribe();

            this._parentPositions.clear();
          }
          /**
           * Gets the offset in pixels by which the items that aren't being dragged should be moved.
           * @param currentIndex Index of the item currently being dragged.
           * @param siblings All of the items in the list.
           * @param delta Direction in which the user is moving.
           */

        }, {
          key: "_getSiblingOffsetPx",
          value: function _getSiblingOffsetPx(currentIndex, siblings, delta) {
            var isHorizontal = this._orientation === 'horizontal';
            var currentPosition = siblings[currentIndex].clientRect;
            var immediateSibling = siblings[currentIndex + delta * -1];
            var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;

            if (immediateSibling) {
              var start = isHorizontal ? 'left' : 'top';
              var end = isHorizontal ? 'right' : 'bottom'; // Get the spacing between the start of the current item and the end of the one immediately
              // after it in the direction in which the user is dragging, or vice versa. We add it to the
              // offset in order to push the element to where it will be when it's inline and is influenced
              // by the `margin` of its siblings.

              if (delta === -1) {
                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];
              } else {
                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];
              }
            }

            return siblingOffset;
          }
          /**
           * Gets the offset in pixels by which the item that is being dragged should be moved.
           * @param currentPosition Current position of the item.
           * @param newPosition Position of the item where the current item should be moved.
           * @param delta Direction in which the user is moving.
           */

        }, {
          key: "_getItemOffsetPx",
          value: function _getItemOffsetPx(currentPosition, newPosition, delta) {
            var isHorizontal = this._orientation === 'horizontal';
            var itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top; // Account for differences in the item width/height.

            if (delta === -1) {
              itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;
            }

            return itemOffset;
          }
          /**
           * Checks if pointer is entering in the first position
           * @param pointerX Position of the user's pointer along the X axis.
           * @param pointerY Position of the user's pointer along the Y axis.
           */

        }, {
          key: "_shouldEnterAsFirstChild",
          value: function _shouldEnterAsFirstChild(pointerX, pointerY) {
            if (!this._activeDraggables.length) {
              return false;
            }

            var itemPositions = this._itemPositions;
            var isHorizontal = this._orientation === 'horizontal'; // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index
            // check if container is using some sort of "reverse" ordering (eg: flex-direction: row-reverse)

            var reversed = itemPositions[0].drag !== this._activeDraggables[0];

            if (reversed) {
              var lastItemRect = itemPositions[itemPositions.length - 1].clientRect;
              return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;
            } else {
              var firstItemRect = itemPositions[0].clientRect;
              return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;
            }
          }
          /**
           * Gets the index of an item in the drop container, based on the position of the user's pointer.
           * @param item Item that is being sorted.
           * @param pointerX Position of the user's pointer along the X axis.
           * @param pointerY Position of the user's pointer along the Y axis.
           * @param delta Direction in which the user is moving their pointer.
           */

        }, {
          key: "_getItemIndexFromPointerPosition",
          value: function _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {
            var _this16 = this;

            var isHorizontal = this._orientation === 'horizontal';
            return findIndex(this._itemPositions, function (_ref4, _, array) {
              var drag = _ref4.drag,
                  clientRect = _ref4.clientRect;

              if (drag === item) {
                // If there's only one item left in the container, it must be
                // the dragged item itself so we use it as a reference.
                return array.length < 2;
              }

              if (delta) {
                var direction = isHorizontal ? delta.x : delta.y; // If the user is still hovering over the same item as last time, their cursor hasn't left
                // the item after we made the swap, and they didn't change the direction in which they're
                // dragging, we don't consider it a direction swap.

                if (drag === _this16._previousSwap.drag && _this16._previousSwap.overlaps && direction === _this16._previousSwap.delta) {
                  return false;
                }
              }

              return isHorizontal ? // Round these down since most browsers report client rects with
              // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.
              pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);
            });
          }
          /** Caches the current items in the list and their positions. */

        }, {
          key: "_cacheItems",
          value: function _cacheItems() {
            this._activeDraggables = this._draggables.slice();

            this._cacheItemPositions();

            this._cacheParentPositions();
          }
          /**
           * Checks whether the user's pointer is positioned over the container.
           * @param x Pointer position along the X axis.
           * @param y Pointer position along the Y axis.
           */

        }, {
          key: "_isOverContainer",
          value: function _isOverContainer(x, y) {
            return isInsideClientRect(this._clientRect, x, y);
          }
          /**
           * Figures out whether an item should be moved into a sibling
           * drop container, based on its current position.
           * @param item Drag item that is being moved.
           * @param x Position of the item along the X axis.
           * @param y Position of the item along the Y axis.
           */

        }, {
          key: "_getSiblingContainerFromPosition",
          value: function _getSiblingContainerFromPosition(item, x, y) {
            return this._siblings.find(function (sibling) {
              return sibling._canReceive(item, x, y);
            });
          }
          /**
           * Checks whether the drop list can receive the passed-in item.
           * @param item Item that is being dragged into the list.
           * @param x Position of the item along the X axis.
           * @param y Position of the item along the Y axis.
           */

        }, {
          key: "_canReceive",
          value: function _canReceive(item, x, y) {
            if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {
              return false;
            }

            var elementFromPoint = this._getShadowRoot().elementFromPoint(x, y); // If there's no element at the pointer position, then
            // the client rect is probably scrolled out of the view.


            if (!elementFromPoint) {
              return false;
            }

            var nativeElement = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(this.element); // The `ClientRect`, that we're using to find the container over which the user is
            // hovering, doesn't give us any information on whether the element has been scrolled
            // out of the view or whether it's overlapping with other containers. This means that
            // we could end up transferring the item into a container that's invisible or is positioned
            // below another one. We use the result from `elementFromPoint` to get the top-most element
            // at the pointer position and to find whether it's one of the intersecting drop containers.

            return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);
          }
          /**
           * Called by one of the connected drop lists when a dragging sequence has started.
           * @param sibling Sibling in which dragging has started.
           */

        }, {
          key: "_startReceiving",
          value: function _startReceiving(sibling) {
            var activeSiblings = this._activeSiblings;

            if (!activeSiblings.has(sibling)) {
              activeSiblings.add(sibling);

              this._cacheParentPositions();

              this._listenToScrollEvents();
            }
          }
          /**
           * Called by a connected drop list when dragging has stopped.
           * @param sibling Sibling whose dragging has stopped.
           */

        }, {
          key: "_stopReceiving",
          value: function _stopReceiving(sibling) {
            this._activeSiblings["delete"](sibling);

            this._viewportScrollSubscription.unsubscribe();
          }
          /**
           * Starts listening to scroll events on the viewport.
           * Used for updating the internal state of the list.
           */

        }, {
          key: "_listenToScrollEvents",
          value: function _listenToScrollEvents() {
            var _this17 = this;

            this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(function (event) {
              if (_this17.isDragging()) {
                var scrollDifference = _this17._parentPositions.handleScroll(event);

                if (scrollDifference) {
                  // Since we know the amount that the user has scrolled we can shift all of the
                  // client rectangles ourselves. This is cheaper than re-measuring everything and
                  // we can avoid inconsistent behavior where we might be measuring the element before
                  // its position has changed.
                  _this17._itemPositions.forEach(function (_ref5) {
                    var clientRect = _ref5.clientRect;
                    adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);
                  }); // We need two loops for this, because we want all of the cached
                  // positions to be up-to-date before we re-sort the item.


                  _this17._itemPositions.forEach(function (_ref6) {
                    var drag = _ref6.drag;

                    if (_this17._dragDropRegistry.isDragging(drag)) {
                      // We need to re-sort the item manually, because the pointer move
                      // events won't be dispatched while the user is scrolling.
                      drag._sortFromLastPointerPosition();
                    }
                  });
                }
              } else if (_this17.isReceiving()) {
                _this17._cacheParentPositions();
              }
            });
          }
          /**
           * Lazily resolves and returns the shadow root of the element. We do this in a function, rather
           * than saving it in property directly on init, because we want to resolve it as late as possible
           * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the
           * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.
           */

        }, {
          key: "_getShadowRoot",
          value: function _getShadowRoot() {
            if (!this._cachedShadowRoot) {
              var shadowRoot = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__["_getShadowRoot"])(Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(this.element));
              this._cachedShadowRoot = shadowRoot || this._document;
            }

            return this._cachedShadowRoot;
          }
        }]);

        return DropListRef;
      }();
      /**
       * Finds the index of an item that matches a predicate function. Used as an equivalent
       * of `Array.prototype.findIndex` which isn't part of the standard Google typings.
       * @param array Array in which to look for matches.
       * @param predicate Function used to determine whether an item is a match.
       */


      function findIndex(array, predicate) {
        for (var i = 0; i < array.length; i++) {
          if (predicate(array[i], i, array)) {
            return i;
          }
        }

        return -1;
      }
      /**
       * Increments the vertical scroll position of a node.
       * @param node Node whose scroll position should change.
       * @param amount Amount of pixels that the `node` should be scrolled.
       */


      function incrementVerticalScroll(node, amount) {
        if (node === window) {
          node.scrollBy(0, amount);
        } else {
          // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.
          node.scrollTop += amount;
        }
      }
      /**
       * Increments the horizontal scroll position of a node.
       * @param node Node whose scroll position should change.
       * @param amount Amount of pixels that the `node` should be scrolled.
       */


      function incrementHorizontalScroll(node, amount) {
        if (node === window) {
          node.scrollBy(amount, 0);
        } else {
          // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.
          node.scrollLeft += amount;
        }
      }
      /**
       * Gets whether the vertical auto-scroll direction of a node.
       * @param clientRect Dimensions of the node.
       * @param pointerY Position of the user's pointer along the y axis.
       */


      function getVerticalScrollDirection(clientRect, pointerY) {
        var top = clientRect.top,
            bottom = clientRect.bottom,
            height = clientRect.height;
        var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;

        if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {
          return 1
          /* UP */
          ;
        } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {
          return 2
          /* DOWN */
          ;
        }

        return 0
        /* NONE */
        ;
      }
      /**
       * Gets whether the horizontal auto-scroll direction of a node.
       * @param clientRect Dimensions of the node.
       * @param pointerX Position of the user's pointer along the x axis.
       */


      function getHorizontalScrollDirection(clientRect, pointerX) {
        var left = clientRect.left,
            right = clientRect.right,
            width = clientRect.width;
        var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;

        if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {
          return 1
          /* LEFT */
          ;
        } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {
          return 2
          /* RIGHT */
          ;
        }

        return 0
        /* NONE */
        ;
      }
      /**
       * Gets the directions in which an element node should be scrolled,
       * assuming that the user's pointer is already within it scrollable region.
       * @param element Element for which we should calculate the scroll direction.
       * @param clientRect Bounding client rectangle of the element.
       * @param pointerX Position of the user's pointer along the x axis.
       * @param pointerY Position of the user's pointer along the y axis.
       */


      function getElementScrollDirections(element, clientRect, pointerX, pointerY) {
        var computedVertical = getVerticalScrollDirection(clientRect, pointerY);
        var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);
        var verticalScrollDirection = 0
        /* NONE */
        ;
        var horizontalScrollDirection = 0
        /* NONE */
        ; // Note that we here we do some extra checks for whether the element is actually scrollable in
        // a certain direction and we only assign the scroll direction if it is. We do this so that we
        // can allow other elements to be scrolled, if the current element can't be scrolled anymore.
        // This allows us to handle cases where the scroll regions of two scrollable elements overlap.

        if (computedVertical) {
          var scrollTop = element.scrollTop;

          if (computedVertical === 1
          /* UP */
          ) {
              if (scrollTop > 0) {
                verticalScrollDirection = 1
                /* UP */
                ;
              }
            } else if (element.scrollHeight - scrollTop > element.clientHeight) {
            verticalScrollDirection = 2
            /* DOWN */
            ;
          }
        }

        if (computedHorizontal) {
          var scrollLeft = element.scrollLeft;

          if (computedHorizontal === 1
          /* LEFT */
          ) {
              if (scrollLeft > 0) {
                horizontalScrollDirection = 1
                /* LEFT */
                ;
              }
            } else if (element.scrollWidth - scrollLeft > element.clientWidth) {
            horizontalScrollDirection = 2
            /* RIGHT */
            ;
          }
        }

        return [verticalScrollDirection, horizontalScrollDirection];
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Event options that can be used to bind an active, capturing event. */


      var activeCapturingEventOptions = Object(_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__["normalizePassiveListenerOptions"])({
        passive: false,
        capture: true
      });
      /**
       * Service that keeps track of all the drag item and drop container
       * instances, and manages global event listeners on the `document`.
       * @docs-private
       */
      // Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order
      // to avoid circular imports. If we were to reference them here, importing the registry into the
      // classes that are registering themselves will introduce a circular import.

      var DragDropRegistry = /*#__PURE__*/function () {
        function DragDropRegistry(_ngZone, _document) {
          var _this18 = this;

          _classCallCheck(this, DragDropRegistry);

          this._ngZone = _ngZone;
          /** Registered drop container instances. */

          this._dropInstances = new Set();
          /** Registered drag item instances. */

          this._dragInstances = new Set();
          /** Drag item instances that are currently being dragged. */

          this._activeDragInstances = new Set();
          /** Keeps track of the event listeners that we've bound to the `document`. */

          this._globalListeners = new Map();
          /**
           * Emits the `touchmove` or `mousemove` events that are dispatched
           * while the user is dragging a drag item instance.
           */

          this.pointerMove = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Emits the `touchend` or `mouseup` events that are dispatched
           * while the user is dragging a drag item instance.
           */

          this.pointerUp = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the viewport has been scrolled while the user is dragging an item. */

          this.scroll = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Event listener that will prevent the default browser action while the user is dragging.
           * @param event Event whose default action should be prevented.
           */

          this._preventDefaultWhileDragging = function (event) {
            if (_this18._activeDragInstances.size) {
              event.preventDefault();
            }
          };

          this._document = _document;
        }
        /** Adds a drop container to the registry. */


        _createClass(DragDropRegistry, [{
          key: "registerDropContainer",
          value: function registerDropContainer(drop) {
            if (!this._dropInstances.has(drop)) {
              this._dropInstances.add(drop);
            }
          }
          /** Adds a drag item instance to the registry. */

        }, {
          key: "registerDragItem",
          value: function registerDragItem(drag) {
            var _this19 = this;

            this._dragInstances.add(drag); // The `touchmove` event gets bound once, ahead of time, because WebKit
            // won't preventDefault on a dynamically-added `touchmove` listener.
            // See https://bugs.webkit.org/show_bug.cgi?id=184250.


            if (this._dragInstances.size === 1) {
              this._ngZone.runOutsideAngular(function () {
                // The event handler has to be explicitly active,
                // because newer browsers make it passive by default.
                _this19._document.addEventListener('touchmove', _this19._preventDefaultWhileDragging, activeCapturingEventOptions);
              });
            }
          }
          /** Removes a drop container from the registry. */

        }, {
          key: "removeDropContainer",
          value: function removeDropContainer(drop) {
            this._dropInstances["delete"](drop);
          }
          /** Removes a drag item instance from the registry. */

        }, {
          key: "removeDragItem",
          value: function removeDragItem(drag) {
            this._dragInstances["delete"](drag);

            this.stopDragging(drag);

            if (this._dragInstances.size === 0) {
              this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);
            }
          }
          /**
           * Starts the dragging sequence for a drag instance.
           * @param drag Drag instance which is being dragged.
           * @param event Event that initiated the dragging.
           */

        }, {
          key: "startDragging",
          value: function startDragging(drag, event) {
            var _this20 = this;

            // Do not process the same drag twice to avoid memory leaks and redundant listeners
            if (this._activeDragInstances.has(drag)) {
              return;
            }

            this._activeDragInstances.add(drag);

            if (this._activeDragInstances.size === 1) {
              var _isTouchEvent = event.type.startsWith('touch');

              var moveEvent = _isTouchEvent ? 'touchmove' : 'mousemove';
              var upEvent = _isTouchEvent ? 'touchend' : 'mouseup'; // We explicitly bind __active__ listeners here, because newer browsers will default to
              // passive ones for `mousemove` and `touchmove`. The events need to be active, because we
              // use `preventDefault` to prevent the page from scrolling while the user is dragging.

              this._globalListeners.set(moveEvent, {
                handler: function handler(e) {
                  return _this20.pointerMove.next(e);
                },
                options: activeCapturingEventOptions
              }).set(upEvent, {
                handler: function handler(e) {
                  return _this20.pointerUp.next(e);
                },
                options: true
              }).set('scroll', {
                handler: function handler(e) {
                  return _this20.scroll.next(e);
                },
                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't
                // the document. See https://github.com/angular/components/issues/17144.
                options: true
              }) // Preventing the default action on `mousemove` isn't enough to disable text selection
              // on Safari so we need to prevent the selection event as well. Alternatively this can
              // be done by setting `user-select: none` on the `body`, however it has causes a style
              // recalculation which can be expensive on pages with a lot of elements.
              .set('selectstart', {
                handler: this._preventDefaultWhileDragging,
                options: activeCapturingEventOptions
              });

              this._ngZone.runOutsideAngular(function () {
                _this20._globalListeners.forEach(function (config, name) {
                  _this20._document.addEventListener(name, config.handler, config.options);
                });
              });
            }
          }
          /** Stops dragging a drag item instance. */

        }, {
          key: "stopDragging",
          value: function stopDragging(drag) {
            this._activeDragInstances["delete"](drag);

            if (this._activeDragInstances.size === 0) {
              this._clearGlobalListeners();
            }
          }
          /** Gets whether a drag item instance is currently being dragged. */

        }, {
          key: "isDragging",
          value: function isDragging(drag) {
            return this._activeDragInstances.has(drag);
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var _this21 = this;

            this._dragInstances.forEach(function (instance) {
              return _this21.removeDragItem(instance);
            });

            this._dropInstances.forEach(function (instance) {
              return _this21.removeDropContainer(instance);
            });

            this._clearGlobalListeners();

            this.pointerMove.complete();
            this.pointerUp.complete();
          }
          /** Clears out the global event listeners from the `document`. */

        }, {
          key: "_clearGlobalListeners",
          value: function _clearGlobalListeners() {
            var _this22 = this;

            this._globalListeners.forEach(function (config, name) {
              _this22._document.removeEventListener(name, config.handler, config.options);
            });

            this._globalListeners.clear();
          }
        }]);

        return DragDropRegistry;
      }();

      DragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {
        return new (t || DragDropRegistry)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]));
      };

      DragDropRegistry.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function DragDropRegistry_Factory() {
          return new DragDropRegistry(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]));
        },
        token: DragDropRegistry,
        providedIn: "root"
      });

      DragDropRegistry.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DragDropRegistry, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
            }]
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Default configuration to be used when creating a `DragRef`. */


      var DEFAULT_CONFIG = {
        dragStartThreshold: 5,
        pointerDirectionChangeThreshold: 5
      };
      /**
       * Service that allows for drag-and-drop functionality to be attached to DOM elements.
       */

      var DragDrop = /*#__PURE__*/function () {
        function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {
          _classCallCheck(this, DragDrop);

          this._document = _document;
          this._ngZone = _ngZone;
          this._viewportRuler = _viewportRuler;
          this._dragDropRegistry = _dragDropRegistry;
        }
        /**
         * Turns an element into a draggable item.
         * @param element Element to which to attach the dragging functionality.
         * @param config Object used to configure the dragging behavior.
         */


        _createClass(DragDrop, [{
          key: "createDrag",
          value: function createDrag(element) {
            var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;
            return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);
          }
          /**
           * Turns an element into a drop list.
           * @param element Element to which to attach the drop list functionality.
           */

        }, {
          key: "createDropList",
          value: function createDropList(element) {
            return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);
          }
        }]);

        return DragDrop;
      }();

      DragDrop.ɵfac = function DragDrop_Factory(t) {
        return new (t || DragDrop)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ViewportRuler"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DragDropRegistry));
      };

      DragDrop.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
        factory: function DragDrop_Factory() {
          return new DragDrop(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ViewportRuler"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DragDropRegistry));
        },
        token: DragDrop,
        providedIn: "root"
      });

      DragDrop.ctorParameters = function () {
        return [{
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
        }, {
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ViewportRuler"]
        }, {
          type: DragDropRegistry
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DragDrop, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
          args: [{
            providedIn: 'root'
          }]
        }], function () {
          return [{
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }, {
            type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ViewportRuler"]
          }, {
            type: DragDropRegistry
          }];
        }, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the
       * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily
       * to avoid circular imports.
       * @docs-private
       */


      var CDK_DRAG_PARENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('CDK_DRAG_PARENT');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Handle that can be used to drag and CdkDrag instance. */

      var CdkDragHandle = /*#__PURE__*/function () {
        function CdkDragHandle(element, parentDrag) {
          _classCallCheck(this, CdkDragHandle);

          this.element = element;
          /** Emits when the state of the handle has changed. */

          this._stateChanges = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          this._disabled = false;
          this._parentDrag = parentDrag;
          toggleNativeDragInteractions(element.nativeElement, false);
        }
        /** Whether starting to drag through this handle is disabled. */


        _createClass(CdkDragHandle, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._stateChanges.complete();
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          },
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);

            this._stateChanges.next(this);
          }
        }]);

        return CdkDragHandle;
      }();

      CdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {
        return new (t || CdkDragHandle)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CDK_DRAG_PARENT, 8));
      };

      CdkDragHandle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CdkDragHandle,
        selectors: [["", "cdkDragHandle", ""]],
        hostAttrs: [1, "cdk-drag-handle"],
        inputs: {
          disabled: ["cdkDragHandleDisabled", "disabled"]
        }
      });

      CdkDragHandle.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [CDK_DRAG_PARENT]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }]
        }];
      };

      CdkDragHandle.propDecorators = {
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragHandleDisabled']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkDragHandle, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[cdkDragHandle]',
            host: {
              'class': 'cdk-drag-handle'
            }
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [CDK_DRAG_PARENT]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }]
          }];
        }, {
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragHandleDisabled']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Element that will be used as a template for the placeholder of a CdkDrag when
       * it is being dragged. The placeholder is displayed in place of the element being dragged.
       */


      var CdkDragPlaceholder = function CdkDragPlaceholder(templateRef) {
        _classCallCheck(this, CdkDragPlaceholder);

        this.templateRef = templateRef;
      };

      CdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {
        return new (t || CdkDragPlaceholder)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
      };

      CdkDragPlaceholder.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CdkDragPlaceholder,
        selectors: [["ng-template", "cdkDragPlaceholder", ""]],
        inputs: {
          data: "data"
        }
      });

      CdkDragPlaceholder.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      };

      CdkDragPlaceholder.propDecorators = {
        data: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkDragPlaceholder, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'ng-template[cdkDragPlaceholder]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
          }];
        }, {
          data: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Element that will be used as a template for the preview
       * of a CdkDrag when it is being dragged.
       */


      var CdkDragPreview = /*#__PURE__*/function () {
        function CdkDragPreview(templateRef) {
          _classCallCheck(this, CdkDragPreview);

          this.templateRef = templateRef;
          this._matchSize = false;
        }
        /** Whether the preview should preserve the same size as the item that is being dragged. */


        _createClass(CdkDragPreview, [{
          key: "matchSize",
          get: function get() {
            return this._matchSize;
          },
          set: function set(value) {
            this._matchSize = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
        }]);

        return CdkDragPreview;
      }();

      CdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {
        return new (t || CdkDragPreview)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]));
      };

      CdkDragPreview.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CdkDragPreview,
        selectors: [["ng-template", "cdkDragPreview", ""]],
        inputs: {
          matchSize: "matchSize",
          data: "data"
        }
      });

      CdkDragPreview.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
        }];
      };

      CdkDragPreview.propDecorators = {
        data: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        matchSize: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkDragPreview, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: 'ng-template[cdkDragPreview]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]
          }];
        }, {
          matchSize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          data: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Injection token that can be used to configure the
       * behavior of the drag&drop-related components.
       */


      var CDK_DRAG_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('CDK_DRAG_CONFIG');
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Injection token that is used to provide a CdkDropList instance to CdkDrag.
       * Used for avoiding circular imports.
       */

      var CDK_DROP_LIST = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('CDK_DROP_LIST');
      /** Element that can be moved inside a CdkDropList container. */

      var CdkDrag = /*#__PURE__*/function () {
        function CdkDrag(
        /** Element that the draggable is attached to. */
        element,
        /** Droppable container that the draggable is a part of. */
        dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {
          var _this23 = this;

          _classCallCheck(this, CdkDrag);

          this.element = element;
          this.dropContainer = dropContainer;
          this._document = _document;
          this._ngZone = _ngZone;
          this._viewContainerRef = _viewContainerRef;
          this._dir = _dir;
          this._changeDetectorRef = _changeDetectorRef;
          this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /** Emits when the user starts dragging the item. */

          this.started = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** Emits when the user has released a drag item, before any animations have started. */

          this.released = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** Emits when the user stops dragging an item in the container. */

          this.ended = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** Emits when the user has moved the item into a new container. */

          this.entered = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** Emits when the user removes the item its container by dragging it into another container. */

          this.exited = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** Emits when the user drops the item inside a container. */

          this.dropped = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * Emits as the user is dragging the item. Use with caution,
           * because this event will fire for every pixel that the user has dragged.
           */

          this.moved = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Observable"](function (observer) {
            var subscription = _this23._dragRef.moved.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(function (movedEvent) {
              return {
                source: _this23,
                pointerPosition: movedEvent.pointerPosition,
                event: movedEvent.event,
                delta: movedEvent.delta,
                distance: movedEvent.distance
              };
            })).subscribe(observer);

            return function () {
              subscription.unsubscribe();
            };
          });
          this._dragRef = dragDrop.createDrag(element, {
            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,
            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,
            zIndex: config === null || config === void 0 ? void 0 : config.zIndex
          });
          this._dragRef.data = this;

          if (config) {
            this._assignDefaults(config);
          } // Note that usually the container is assigned when the drop list is picks up the item, but in
          // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation
          // where there are no items on the first change detection pass, but the items get picked up as
          // soon as the user triggers another pass by dragging. This is a problem, because the item would
          // have to switch from standalone mode to drag mode in the middle of the dragging sequence which
          // is too late since the two modes save different kinds of information. We work around it by
          // assigning the drop container both from here and the list.


          if (dropContainer) {
            this._dragRef._withDropContainer(dropContainer._dropListRef);

            dropContainer.addItem(this);
          }

          this._syncInputs(this._dragRef);

          this._handleEvents(this._dragRef);
        }
        /** Whether starting to drag this element is disabled. */


        _createClass(CdkDrag, [{
          key: "getPlaceholderElement",

          /**
           * Returns the element that is being used as a placeholder
           * while the current element is being dragged.
           */
          value: function getPlaceholderElement() {
            return this._dragRef.getPlaceholderElement();
          }
          /** Returns the root draggable element. */

        }, {
          key: "getRootElement",
          value: function getRootElement() {
            return this._dragRef.getRootElement();
          }
          /** Resets a standalone drag item to its initial position. */

        }, {
          key: "reset",
          value: function reset() {
            this._dragRef.reset();
          }
          /**
           * Gets the pixel coordinates of the draggable outside of a drop container.
           */

        }, {
          key: "getFreeDragPosition",
          value: function getFreeDragPosition() {
            return this._dragRef.getFreeDragPosition();
          }
        }, {
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            var _this24 = this;

            // We need to wait for the zone to stabilize, in order for the reference
            // element to be in the proper place in the DOM. This is mostly relevant
            // for draggable elements inside portals since they get stamped out in
            // their original DOM position and then they get transferred to the portal.
            this._ngZone.onStable.asObservable().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this._destroyed)).subscribe(function () {
              _this24._updateRootElement(); // Listen for any newly-added handles.


              _this24._handles.changes.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])(_this24._handles), // Sync the new handles with the DragRef.
              Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["tap"])(function (handles) {
                var childHandleElements = handles.filter(function (handle) {
                  return handle._parentDrag === _this24;
                }).map(function (handle) {
                  return handle.element;
                });

                _this24._dragRef.withHandles(childHandleElements);
              }), // Listen if the state of any of the handles changes.
              Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["switchMap"])(function (handles) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"]).apply(void 0, _toConsumableArray(handles.map(function (item) {
                  return item._stateChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])(item));
                })));
              }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(_this24._destroyed)).subscribe(function (handleInstance) {
                // Enabled/disable the handle that changed in the DragRef.
                var dragRef = _this24._dragRef;
                var handle = handleInstance.element.nativeElement;
                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);
              });

              if (_this24.freeDragPosition) {
                _this24._dragRef.setFreeDragPosition(_this24.freeDragPosition);
              }
            });
          }
        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            var rootSelectorChange = changes['rootElementSelector'];
            var positionChange = changes['freeDragPosition']; // We don't have to react to the first change since it's being
            // handled in `ngAfterViewInit` where it needs to be deferred.

            if (rootSelectorChange && !rootSelectorChange.firstChange) {
              this._updateRootElement();
            } // Skip the first change since it's being handled in `ngAfterViewInit`.


            if (positionChange && !positionChange.firstChange && this.freeDragPosition) {
              this._dragRef.setFreeDragPosition(this.freeDragPosition);
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.dropContainer) {
              this.dropContainer.removeItem(this);
            }

            this._destroyed.next();

            this._destroyed.complete();

            this._dragRef.dispose();
          }
          /** Syncs the root element with the `DragRef`. */

        }, {
          key: "_updateRootElement",
          value: function _updateRootElement() {
            var element = this.element.nativeElement;
            var rootElement = this.rootElementSelector ? getClosestMatchingAncestor(element, this.rootElementSelector) : element;

            if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {
              throw Error("cdkDrag must be attached to an element node. " + "Currently attached to \"".concat(rootElement.nodeName, "\"."));
            }

            this._dragRef.withRootElement(rootElement || element);
          }
          /** Gets the boundary element, based on the `boundaryElement` value. */

        }, {
          key: "_getBoundaryElement",
          value: function _getBoundaryElement() {
            var boundary = this.boundaryElement;

            if (!boundary) {
              return null;
            }

            if (typeof boundary === 'string') {
              return getClosestMatchingAncestor(this.element.nativeElement, boundary);
            }

            var element = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceElement"])(boundary);

            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() && !element.contains(this.element.nativeElement)) {
              throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');
            }

            return element;
          }
          /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */

        }, {
          key: "_syncInputs",
          value: function _syncInputs(ref) {
            var _this25 = this;

            ref.beforeStarted.subscribe(function () {
              if (!ref.isDragging()) {
                var dir = _this25._dir;
                var dragStartDelay = _this25.dragStartDelay;
                var placeholder = _this25._placeholderTemplate ? {
                  template: _this25._placeholderTemplate.templateRef,
                  context: _this25._placeholderTemplate.data,
                  viewContainer: _this25._viewContainerRef
                } : null;
                var preview = _this25._previewTemplate ? {
                  template: _this25._previewTemplate.templateRef,
                  context: _this25._previewTemplate.data,
                  matchSize: _this25._previewTemplate.matchSize,
                  viewContainer: _this25._viewContainerRef
                } : null;
                ref.disabled = _this25.disabled;
                ref.lockAxis = _this25.lockAxis;
                ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceNumberProperty"])(dragStartDelay);
                ref.constrainPosition = _this25.constrainPosition;
                ref.previewClass = _this25.previewClass;
                ref.withBoundaryElement(_this25._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview);

                if (dir) {
                  ref.withDirection(dir.value);
                }
              }
            });
          }
          /** Handles the events from the underlying `DragRef`. */

        }, {
          key: "_handleEvents",
          value: function _handleEvents(ref) {
            var _this26 = this;

            ref.started.subscribe(function () {
              _this26.started.emit({
                source: _this26
              }); // Since all of these events run outside of change detection,
              // we need to ensure that everything is marked correctly.


              _this26._changeDetectorRef.markForCheck();
            });
            ref.released.subscribe(function () {
              _this26.released.emit({
                source: _this26
              });
            });
            ref.ended.subscribe(function (event) {
              _this26.ended.emit({
                source: _this26,
                distance: event.distance
              }); // Since all of these events run outside of change detection,
              // we need to ensure that everything is marked correctly.


              _this26._changeDetectorRef.markForCheck();
            });
            ref.entered.subscribe(function (event) {
              _this26.entered.emit({
                container: event.container.data,
                item: _this26,
                currentIndex: event.currentIndex
              });
            });
            ref.exited.subscribe(function (event) {
              _this26.exited.emit({
                container: event.container.data,
                item: _this26
              });
            });
            ref.dropped.subscribe(function (event) {
              _this26.dropped.emit({
                previousIndex: event.previousIndex,
                currentIndex: event.currentIndex,
                previousContainer: event.previousContainer.data,
                container: event.container.data,
                isPointerOverContainer: event.isPointerOverContainer,
                item: _this26,
                distance: event.distance
              });
            });
          }
          /** Assigns the default input values based on a provided config object. */

        }, {
          key: "_assignDefaults",
          value: function _assignDefaults(config) {
            var lockAxis = config.lockAxis,
                dragStartDelay = config.dragStartDelay,
                constrainPosition = config.constrainPosition,
                previewClass = config.previewClass,
                boundaryElement = config.boundaryElement,
                draggingDisabled = config.draggingDisabled,
                rootElementSelector = config.rootElementSelector;
            this.disabled = draggingDisabled == null ? false : draggingDisabled;
            this.dragStartDelay = dragStartDelay || 0;

            if (lockAxis) {
              this.lockAxis = lockAxis;
            }

            if (constrainPosition) {
              this.constrainPosition = constrainPosition;
            }

            if (previewClass) {
              this.previewClass = previewClass;
            }

            if (boundaryElement) {
              this.boundaryElement = boundaryElement;
            }

            if (rootElementSelector) {
              this.rootElementSelector = rootElementSelector;
            }
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled || this.dropContainer && this.dropContainer.disabled;
          },
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
            this._dragRef.disabled = this._disabled;
          }
        }]);

        return CdkDrag;
      }();

      CdkDrag.ɵfac = function CdkDrag_Factory(t) {
        return new (t || CdkDrag)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CDK_DROP_LIST, 12), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CDK_DRAG_CONFIG, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DragDrop), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]));
      };

      CdkDrag.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CdkDrag,
        selectors: [["", "cdkDrag", ""]],
        contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, CdkDragPreview, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, CdkDragPlaceholder, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, CdkDragHandle, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._previewTemplate = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._placeholderTemplate = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx._handles = _t);
          }
        },
        hostAttrs: [1, "cdk-drag"],
        hostVars: 4,
        hostBindings: function CdkDrag_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("cdk-drag-disabled", ctx.disabled)("cdk-drag-dragging", ctx._dragRef.isDragging());
          }
        },
        inputs: {
          disabled: ["cdkDragDisabled", "disabled"],
          dragStartDelay: ["cdkDragStartDelay", "dragStartDelay"],
          lockAxis: ["cdkDragLockAxis", "lockAxis"],
          constrainPosition: ["cdkDragConstrainPosition", "constrainPosition"],
          previewClass: ["cdkDragPreviewClass", "previewClass"],
          boundaryElement: ["cdkDragBoundary", "boundaryElement"],
          rootElementSelector: ["cdkDragRootElement", "rootElementSelector"],
          data: ["cdkDragData", "data"],
          freeDragPosition: ["cdkDragFreeDragPosition", "freeDragPosition"]
        },
        outputs: {
          started: "cdkDragStarted",
          released: "cdkDragReleased",
          ended: "cdkDragEnded",
          entered: "cdkDragEntered",
          exited: "cdkDragExited",
          dropped: "cdkDragDropped",
          moved: "cdkDragMoved"
        },
        exportAs: ["cdkDrag"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: CDK_DRAG_PARENT,
          useExisting: CdkDrag
        }]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
      });

      CdkDrag.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [CDK_DROP_LIST]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
          }]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [CDK_DRAG_CONFIG]
          }]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }]
        }, {
          type: DragDrop
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      };

      CdkDrag.propDecorators = {
        _handles: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
          args: [CdkDragHandle, {
            descendants: true
          }]
        }],
        _previewTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [CdkDragPreview]
        }],
        _placeholderTemplate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
          args: [CdkDragPlaceholder]
        }],
        data: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragData']
        }],
        lockAxis: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragLockAxis']
        }],
        rootElementSelector: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragRootElement']
        }],
        boundaryElement: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragBoundary']
        }],
        dragStartDelay: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragStartDelay']
        }],
        freeDragPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragFreeDragPosition']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragDisabled']
        }],
        constrainPosition: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragConstrainPosition']
        }],
        previewClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDragPreviewClass']
        }],
        started: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDragStarted']
        }],
        released: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDragReleased']
        }],
        ended: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDragEnded']
        }],
        entered: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDragEntered']
        }],
        exited: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDragExited']
        }],
        dropped: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDragDropped']
        }],
        moved: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDragMoved']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkDrag, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[cdkDrag]',
            exportAs: 'cdkDrag',
            host: {
              'class': 'cdk-drag',
              '[class.cdk-drag-disabled]': 'disabled',
              '[class.cdk-drag-dragging]': '_dragRef.isDragging()'
            },
            providers: [{
              provide: CDK_DRAG_PARENT,
              useExisting: CdkDrag
            }]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [CDK_DROP_LIST]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DOCUMENT"]]
            }]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [CDK_DRAG_CONFIG]
            }]
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }]
          }, {
            type: DragDrop
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
          }];
        }, {
          started: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDragStarted']
          }],
          released: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDragReleased']
          }],
          ended: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDragEnded']
          }],
          entered: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDragEntered']
          }],
          exited: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDragExited']
          }],
          dropped: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDragDropped']
          }],
          moved: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDragMoved']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragDisabled']
          }],
          dragStartDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragStartDelay']
          }],
          lockAxis: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragLockAxis']
          }],
          constrainPosition: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragConstrainPosition']
          }],
          previewClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragPreviewClass']
          }],
          boundaryElement: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragBoundary']
          }],
          rootElementSelector: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragRootElement']
          }],
          _handles: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
            args: [CdkDragHandle, {
              descendants: true
            }]
          }],
          _previewTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
            args: [CdkDragPreview]
          }],
          _placeholderTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChild"],
            args: [CdkDragPlaceholder]
          }],
          data: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragData']
          }],
          freeDragPosition: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDragFreeDragPosition']
          }]
        });
      })();
      /** Gets the closest ancestor of an element that matches a selector. */


      function getClosestMatchingAncestor(element, selector) {
        var currentElement = element.parentElement;

        while (currentElement) {
          // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.
          if (currentElement.matches ? currentElement.matches(selector) : currentElement.msMatchesSelector(selector)) {
            return currentElement;
          }

          currentElement = currentElement.parentElement;
        }

        return null;
      }
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`
       * elements that are placed inside a `cdkDropListGroup` will be connected to each other
       * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input
       * from `cdkDropList`.
       */


      var CdkDropListGroup = /*#__PURE__*/function () {
        function CdkDropListGroup() {
          _classCallCheck(this, CdkDropListGroup);

          /** Drop lists registered inside the group. */
          this._items = new Set();
          this._disabled = false;
        }
        /** Whether starting a dragging sequence from inside this group is disabled. */


        _createClass(CdkDropListGroup, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this._items.clear();
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          },
          set: function set(value) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
        }]);

        return CdkDropListGroup;
      }();

      CdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {
        return new (t || CdkDropListGroup)();
      };

      CdkDropListGroup.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CdkDropListGroup,
        selectors: [["", "cdkDropListGroup", ""]],
        inputs: {
          disabled: ["cdkDropListGroupDisabled", "disabled"]
        },
        exportAs: ["cdkDropListGroup"]
      });
      CdkDropListGroup.propDecorators = {
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListGroupDisabled']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkDropListGroup, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[cdkDropListGroup]',
            exportAs: 'cdkDropListGroup'
          }]
        }], function () {
          return [];
        }, {
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListGroupDisabled']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /** Counter used to generate unique ids for drop zones. */


      var _uniqueIdCounter = 0;
      var ɵ0 = undefined;
      /** Container that wraps a set of draggable items. */

      var CdkDropList = /*#__PURE__*/function () {
        function CdkDropList(
        /** Element that the drop list is attached to. */
        element, dragDrop, _changeDetectorRef, _dir, _group,
        /**
         * @deprecated _scrollDispatcher parameter to become required.
         * @breaking-change 11.0.0
         */
        _scrollDispatcher, config) {
          var _this27 = this;

          _classCallCheck(this, CdkDropList);

          this.element = element;
          this._changeDetectorRef = _changeDetectorRef;
          this._dir = _dir;
          this._group = _group;
          this._scrollDispatcher = _scrollDispatcher;
          /** Emits when the list has been destroyed. */

          this._destroyed = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
          /**
           * Other draggable containers that this container is connected to and into which the
           * container's items can be transferred. Can either be references to other drop containers,
           * or their unique IDs.
           */

          this.connectedTo = [];
          /**
           * Unique ID for the drop zone. Can be used as a reference
           * in the `connectedTo` of another `CdkDropList`.
           */

          this.id = "cdk-drop-list-".concat(_uniqueIdCounter++);
          /**
           * Function that is used to determine whether an item
           * is allowed to be moved into a drop container.
           */

          this.enterPredicate = function () {
            return true;
          };
          /** Emits when the user drops an item inside the container. */


          this.dropped = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * Emits when the user has moved a new drag item into this container.
           */

          this.entered = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * Emits when the user removes an item from the container
           * by dragging it into another container.
           */

          this.exited = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /** Emits as the user is swapping items while actively dragging. */

          this.sorted = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          /**
           * Keeps track of the items that are registered with this container. Historically we used to
           * do this with a `ContentChildren` query, however queries don't handle transplanted views very
           * well which means that we can't handle cases like dragging the headers of a `mat-table`
           * correctly. What we do instead is to have the items register themselves with the container
           * and then we sort them based on their position in the DOM.
           */

          this._unsortedItems = new Set();
          this._dropListRef = dragDrop.createDropList(element);
          this._dropListRef.data = this;

          if (config) {
            this._assignDefaults(config);
          }

          this._dropListRef.enterPredicate = function (drag, drop) {
            return _this27.enterPredicate(drag.data, drop.data);
          };

          this._setupInputSyncSubscription(this._dropListRef);

          this._handleEvents(this._dropListRef);

          CdkDropList._dropLists.push(this);

          if (_group) {
            _group._items.add(this);
          }
        }
        /** Whether starting a dragging sequence from this container is disabled. */


        _createClass(CdkDropList, [{
          key: "addItem",

          /** Registers an items with the drop list. */
          value: function addItem(item) {
            this._unsortedItems.add(item);

            if (this._dropListRef.isDragging()) {
              this._syncItemsWithRef();
            }
          }
          /** Removes an item from the drop list. */

        }, {
          key: "removeItem",
          value: function removeItem(item) {
            this._unsortedItems["delete"](item);

            if (this._dropListRef.isDragging()) {
              this._syncItemsWithRef();
            }
          }
          /** Gets the registered items in the list, sorted by their position in the DOM. */

        }, {
          key: "getSortedItems",
          value: function getSortedItems() {
            return Array.from(this._unsortedItems).sort(function (a, b) {
              var documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement()); // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.
              // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
              // tslint:disable-next-line:no-bitwise


              return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;
            });
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            var index = CdkDropList._dropLists.indexOf(this);

            if (index > -1) {
              CdkDropList._dropLists.splice(index, 1);
            }

            if (this._group) {
              this._group._items["delete"](this);
            }

            this._unsortedItems.clear();

            this._dropListRef.dispose();

            this._destroyed.next();

            this._destroyed.complete();
          }
          /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */

        }, {
          key: "_setupInputSyncSubscription",
          value: function _setupInputSyncSubscription(ref) {
            var _this28 = this;

            if (this._dir) {
              this._dir.change.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["startWith"])(this._dir.value), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["takeUntil"])(this._destroyed)).subscribe(function (value) {
                return ref.withDirection(value);
              });
            }

            ref.beforeStarted.subscribe(function () {
              var siblings = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceArray"])(_this28.connectedTo).map(function (drop) {
                return typeof drop === 'string' ? CdkDropList._dropLists.find(function (list) {
                  return list.id === drop;
                }) : drop;
              });

              if (_this28._group) {
                _this28._group._items.forEach(function (drop) {
                  if (siblings.indexOf(drop) === -1) {
                    siblings.push(drop);
                  }
                });
              } // Note that we resolve the scrollable parents here so that we delay the resolution
              // as long as possible, ensuring that the element is in its final place in the DOM.
              // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.


              if (!_this28._scrollableParentsResolved && _this28._scrollDispatcher) {
                var scrollableParents = _this28._scrollDispatcher.getAncestorScrollContainers(_this28.element).map(function (scrollable) {
                  return scrollable.getElementRef().nativeElement;
                });

                _this28._dropListRef.withScrollableParents(scrollableParents); // Only do this once since it involves traversing the DOM and the parents
                // shouldn't be able to change without the drop list being destroyed.


                _this28._scrollableParentsResolved = true;
              }

              ref.disabled = _this28.disabled;
              ref.lockAxis = _this28.lockAxis;
              ref.sortingDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(_this28.sortingDisabled);
              ref.autoScrollDisabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(_this28.autoScrollDisabled);
              ref.connectedTo(siblings.filter(function (drop) {
                return drop && drop !== _this28;
              }).map(function (list) {
                return list._dropListRef;
              })).withOrientation(_this28.orientation);
            });
          }
          /** Handles events from the underlying DropListRef. */

        }, {
          key: "_handleEvents",
          value: function _handleEvents(ref) {
            var _this29 = this;

            ref.beforeStarted.subscribe(function () {
              _this29._syncItemsWithRef();

              _this29._changeDetectorRef.markForCheck();
            });
            ref.entered.subscribe(function (event) {
              _this29.entered.emit({
                container: _this29,
                item: event.item.data,
                currentIndex: event.currentIndex
              });
            });
            ref.exited.subscribe(function (event) {
              _this29.exited.emit({
                container: _this29,
                item: event.item.data
              });

              _this29._changeDetectorRef.markForCheck();
            });
            ref.sorted.subscribe(function (event) {
              _this29.sorted.emit({
                previousIndex: event.previousIndex,
                currentIndex: event.currentIndex,
                container: _this29,
                item: event.item.data
              });
            });
            ref.dropped.subscribe(function (event) {
              _this29.dropped.emit({
                previousIndex: event.previousIndex,
                currentIndex: event.currentIndex,
                previousContainer: event.previousContainer.data,
                container: event.container.data,
                item: event.item.data,
                isPointerOverContainer: event.isPointerOverContainer,
                distance: event.distance
              }); // Mark for check since all of these events run outside of change
              // detection and we're not guaranteed for something else to have triggered it.


              _this29._changeDetectorRef.markForCheck();
            });
          }
          /** Assigns the default input values based on a provided config object. */

        }, {
          key: "_assignDefaults",
          value: function _assignDefaults(config) {
            var lockAxis = config.lockAxis,
                draggingDisabled = config.draggingDisabled,
                sortingDisabled = config.sortingDisabled,
                listAutoScrollDisabled = config.listAutoScrollDisabled,
                listOrientation = config.listOrientation;
            this.disabled = draggingDisabled == null ? false : draggingDisabled;
            this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;
            this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;
            this.orientation = listOrientation || 'vertical';

            if (lockAxis) {
              this.lockAxis = lockAxis;
            }
          }
          /** Syncs up the registered drag items with underlying drop list ref. */

        }, {
          key: "_syncItemsWithRef",
          value: function _syncItemsWithRef() {
            this._dropListRef.withItems(this.getSortedItems().map(function (item) {
              return item._dragRef;
            }));
          }
        }, {
          key: "disabled",
          get: function get() {
            return this._disabled || !!this._group && this._group.disabled;
          },
          set: function set(value) {
            // Usually we sync the directive and ref state right before dragging starts, in order to have
            // a single point of failure and to avoid having to use setters for everything. `disabled` is
            // a special case, because it can prevent the `beforeStarted` event from firing, which can lock
            // the user in a disabled state, so we also need to sync it as it's being set.
            this._dropListRef.disabled = this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(value);
          }
        }]);

        return CdkDropList;
      }();

      CdkDropList.ɵfac = function CdkDropList_Factory(t) {
        return new (t || CdkDropList)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](DragDrop), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CdkDropListGroup, 12), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ScrollDispatcher"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](CDK_DRAG_CONFIG, 8));
      };

      CdkDropList.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: CdkDropList,
        selectors: [["", "cdkDropList", ""], ["cdk-drop-list"]],
        hostAttrs: [1, "cdk-drop-list"],
        hostVars: 7,
        hostBindings: function CdkDropList_HostBindings(rf, ctx) {
          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("id", ctx.id);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("cdk-drop-list-disabled", ctx.disabled)("cdk-drop-list-dragging", ctx._dropListRef.isDragging())("cdk-drop-list-receiving", ctx._dropListRef.isReceiving());
          }
        },
        inputs: {
          connectedTo: ["cdkDropListConnectedTo", "connectedTo"],
          id: "id",
          enterPredicate: ["cdkDropListEnterPredicate", "enterPredicate"],
          disabled: ["cdkDropListDisabled", "disabled"],
          sortingDisabled: ["cdkDropListSortingDisabled", "sortingDisabled"],
          autoScrollDisabled: ["cdkDropListAutoScrollDisabled", "autoScrollDisabled"],
          orientation: ["cdkDropListOrientation", "orientation"],
          lockAxis: ["cdkDropListLockAxis", "lockAxis"],
          data: ["cdkDropListData", "data"]
        },
        outputs: {
          dropped: "cdkDropListDropped",
          entered: "cdkDropListEntered",
          exited: "cdkDropListExited",
          sorted: "cdkDropListSorted"
        },
        exportAs: ["cdkDropList"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([// Prevent child drop lists from picking up the same group as their parent.
        {
          provide: CdkDropListGroup,
          useValue: ɵ0
        }, {
          provide: CDK_DROP_LIST,
          useExisting: CdkDropList
        }])]
      });
      /** Keeps track of the drop lists that are currently on the page. */

      CdkDropList._dropLists = [];

      CdkDropList.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: DragDrop
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"],
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }]
        }, {
          type: CdkDropListGroup,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
          }]
        }, {
          type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ScrollDispatcher"]
        }, {
          type: undefined,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [CDK_DRAG_CONFIG]
          }]
        }];
      };

      CdkDropList.propDecorators = {
        connectedTo: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListConnectedTo']
        }],
        data: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListData']
        }],
        orientation: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListOrientation']
        }],
        id: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        lockAxis: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListLockAxis']
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListDisabled']
        }],
        sortingDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListSortingDisabled']
        }],
        enterPredicate: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListEnterPredicate']
        }],
        autoScrollDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
          args: ['cdkDropListAutoScrollDisabled']
        }],
        dropped: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDropListDropped']
        }],
        entered: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDropListEntered']
        }],
        exited: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDropListExited']
        }],
        sorted: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
          args: ['cdkDropListSorted']
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CdkDropList, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[cdkDropList], cdk-drop-list',
            exportAs: 'cdkDropList',
            providers: [// Prevent child drop lists from picking up the same group as their parent.
            {
              provide: CdkDropListGroup,
              useValue: ɵ0
            }, {
              provide: CDK_DROP_LIST,
              useExisting: CdkDropList
            }],
            host: {
              'class': 'cdk-drop-list',
              '[id]': 'id',
              '[class.cdk-drop-list-disabled]': 'disabled',
              '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',
              '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'
            }
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: DragDrop
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
          }, {
            type: _angular_cdk_bidi__WEBPACK_IMPORTED_MODULE_7__["Directionality"],
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }]
          }, {
            type: CdkDropListGroup,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["SkipSelf"]
            }]
          }, {
            type: _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ScrollDispatcher"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [CDK_DRAG_CONFIG]
            }]
          }];
        }, {
          connectedTo: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListConnectedTo']
          }],
          id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          enterPredicate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListEnterPredicate']
          }],
          dropped: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDropListDropped']
          }],
          entered: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDropListEntered']
          }],
          exited: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDropListExited']
          }],
          sorted: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"],
            args: ['cdkDropListSorted']
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListDisabled']
          }],
          sortingDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListSortingDisabled']
          }],
          autoScrollDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListAutoScrollDisabled']
          }],
          orientation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListOrientation']
          }],
          lockAxis: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListLockAxis']
          }],
          data: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['cdkDropListData']
          }]
        });
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */


      var DragDropModule = function DragDropModule() {
        _classCallCheck(this, DragDropModule);
      };

      DragDropModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: DragDropModule
      });
      DragDropModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function DragDropModule_Factory(t) {
          return new (t || DragDropModule)();
        },
        providers: [DragDrop],
        imports: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["CdkScrollableModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](DragDropModule, {
          declarations: function declarations() {
            return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];
          },
          exports: function exports() {
            return [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["CdkScrollableModule"], CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];
          }
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DragDropModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],
            exports: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["CdkScrollableModule"], CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],
            providers: [DragDrop]
          }]
        }], null, null);
      })();
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=drag-drop.js.map

      /***/

    },

    /***/
    "./node_modules/@fullcalendar/angular/__ivy_ngcc__/fesm2015/fullcalendar-angular.js":
    /*!******************************************************************************************!*\
      !*** ./node_modules/@fullcalendar/angular/__ivy_ngcc__/fesm2015/fullcalendar-angular.js ***!
      \******************************************************************************************/

    /*! exports provided: FullCalendarComponent, FullCalendarModule */

    /***/
    function node_modulesFullcalendarAngular__ivy_ngcc__Fesm2015FullcalendarAngularJs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FullCalendarComponent", function () {
        return FullCalendarComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FullCalendarModule", function () {
        return FullCalendarModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "./node_modules/tslib/tslib.es6.js");
      /* harmony import */


      var fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! fast-deep-equal */
      "./node_modules/fast-deep-equal/index.js");
      /* harmony import */


      var fast_deep_equal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @fullcalendar/core */
      "./node_modules/@fullcalendar/core/main.esm.js");

      var hasOwnProperty = Object.prototype.hasOwnProperty;
      /*
      Really simple clone utility. Only copies plain arrays, objects, and Dates. Transfers everything else as-is.
      Wanted to use a third-party lib, but none did exactly this.
      */

      function deepCopy(input) {
        if (Array.isArray(input)) {
          return input.map(deepCopy);
        } else if (input instanceof Date) {
          return new Date(input.valueOf());
        } else if (typeof input === 'object' && input) {
          // non-null object
          return mapHash(input, deepCopy);
        } else {
          // everything else (null, function, etc)
          return input;
        }
      }

      function mapHash(input, func) {
        var output = {};

        for (var key in input) {
          if (hasOwnProperty.call(input, key)) {
            output[key] = func(input[key], key);
          }
        }

        return output;
      }
      /*
      the docs point to this file as an index of options.
      when this files is moved, update the docs.
      */


      var INPUT_NAMES = ['header', 'footer', 'customButtons', 'buttonIcons', 'themeSystem', 'bootstrapFontAwesome', 'firstDay', 'dir', 'weekends', 'hiddenDays', 'fixedWeekCount', 'weekNumbers', 'weekNumbersWithinDays', 'weekNumberCalculation', 'businessHours', 'showNonCurrentDates', 'height', 'contentHeight', 'aspectRatio', 'handleWindowResize', 'windowResizeDelay', 'eventLimit', 'eventLimitClick', 'timeZone', 'now', 'defaultView', 'allDaySlot', 'allDayText', 'slotDuration', 'slotLabelFormat', 'slotLabelInterval', 'snapDuration', 'scrollTime', 'minTime', 'maxTime', 'slotEventOverlap', 'listDayFormat', 'listDayAltFormat', 'noEventsMessage', 'defaultDate', 'nowIndicator', 'visibleRange', 'validRange', 'dateIncrement', 'dateAlignment', 'duration', 'dayCount', 'locales', 'locale', 'eventTimeFormat', 'columnHeader', 'columnHeaderFormat', 'columnHeaderText', 'columnHeaderHtml', 'titleFormat', 'weekLabel', 'displayEventTime', 'displayEventEnd', 'eventLimitText', 'dayPopoverFormat', 'navLinks', 'selectable', 'selectMirror', 'selectMinDistance', 'unselectAuto', 'unselectCancel', 'defaultAllDayEventDuration', 'defaultTimedEventDuration', 'cmdFormatter', 'defaultRangeSeparator', 'selectConstraint', 'selectOverlap', 'selectAllow', 'editable', 'eventStartEditable', 'eventDurationEditable', 'eventConstraint', 'eventOverlap', 'eventAllow', 'eventClassName', 'eventClassNames', 'eventBackgroundColor', 'eventBorderColor', 'eventTextColor', 'eventColor', 'events', 'eventSources', 'allDayDefault', 'startParam', 'endParam', 'lazyFetching', 'nextDayThreshold', 'eventOrder', 'rerenderDelay', 'dragRevertDuration', 'dragScroll', 'longPressDelay', 'eventLongPressDelay', 'droppable', 'dropAccept', 'eventDataTransform', 'allDayMaintainDuration', 'eventResizableFromStart', 'timeGridEventMinHeight', 'allDayHtml', 'eventDragMinDistance', 'eventSourceFailure', 'eventSourceSuccess', 'forceEventDuration', 'progressiveEventRendering', 'selectLongPressDelay', 'selectMinDistance', 'timeZoneParam', 'titleRangeSeparator', // compound OptionsInput...
      'buttonText', 'views', 'plugins', // scheduler...
      'schedulerLicenseKey', 'resources', 'resourceLabelText', 'resourceOrder', 'filterResourcesWithEvents', 'resourceText', 'resourceGroupField', 'resourceGroupText', 'resourceAreaWidth', 'resourceColumns', 'resourcesInitiallyExpanded', 'slotWidth', 'datesAboveResources', 'googleCalendarApiKey', 'refetchResourcesOnNavigate', 'eventResourceEditable'];
      var INPUT_IS_DEEP = {
        header: true,
        footer: true,
        events: true,
        eventSources: true,
        resources: true
      };
      var OUTPUT_NAMES = ['windowResize', 'dateClick', 'eventClick', 'navLinkDayClick', 'navLinkWeekClick', 'eventMouseEnter', 'eventMouseLeave', 'select', 'unselect', 'loading', 'eventPositioned', 'eventDragStart', 'eventDragStop', 'eventDrop', 'eventResizeStart', 'eventResizeStop', 'eventResize', 'drop', 'eventReceive', 'eventLeave', '_destroyed', // TODO: make these inputs...
      'viewSkeletonRender', 'viewSkeletonDestroy', 'datesRender', 'datesDestroy', 'dayRender', 'eventRender', 'eventDestroy', 'resourceRender'];

      var FullCalendarComponent = /*#__PURE__*/function () {
        function FullCalendarComponent(element) {
          _classCallCheck(this, FullCalendarComponent);

          this.element = element;
          this.dirtyProps = {};
          this.deepCopies = {}; // holds frozen states

          this.windowResize = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.dateClick = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventClick = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventMouseEnter = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventMouseLeave = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.select = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.unselect = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.loading = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventPositioned = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventDragStart = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventDragStop = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventDrop = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventResizeStart = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventResizeStop = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventResize = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.drop = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventReceive = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventLeave = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this._destroyed = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.navLinkDayClick = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.navLinkWeekClick = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"](); // TODO: make these inputs...

          this.viewSkeletonRender = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.viewSkeletonDestroy = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.datesRender = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.datesDestroy = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.dayRender = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventRender = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.eventDestroy = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
          this.resourceRender = new _angular_core__WEBPACK_IMPORTED_MODULE_2__["EventEmitter"]();
        }

        _createClass(FullCalendarComponent, [{
          key: "ngAfterViewInit",
          value: function ngAfterViewInit() {
            this.calendar = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_3__["Calendar"](this.element.nativeElement, this.buildOptions());
            this.calendar.render();
          }
        }, {
          key: "buildOptions",
          value: function buildOptions() {
            var _this30 = this;

            var options = {};
            OUTPUT_NAMES.forEach(function (outputName) {
              options[outputName] = function () {
                var _this30$outputName;

                (_this30$outputName = _this30[outputName]).emit.apply(_this30$outputName, arguments);
              };
            }); // do after outputs, so that inputs with same name override

            INPUT_NAMES.forEach(function (inputName) {
              var inputVal = _this30[inputName];

              if (inputVal !== undefined) {
                // unfortunately FC chokes when some props are set to undefined
                if (_this30.deepChangeDetection && INPUT_IS_DEEP[inputName]) {
                  inputVal = deepCopy(inputVal);
                  _this30.deepCopies[inputName] = inputVal; // side effect!
                }

                options[inputName] = inputVal;
              }
            });
            return options;
          }
          /*
          called before ngOnChanges, allows us to manually detect input changes.
          called much more often than ngOnChanges.
          */

        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {
            if (this.calendar && this.deepChangeDetection) {
              // not the initial render AND we do deep-mutation checks
              var deepCopies = this.deepCopies;

              for (var inputName in INPUT_IS_DEEP) {
                if (INPUT_IS_DEEP.hasOwnProperty(inputName)) {
                  var inputVal = this[inputName];

                  if (inputVal !== undefined) {
                    // unfortunately FC chokes when some props are set to undefined
                    if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_1___default()(inputVal, deepCopies[inputName])) {
                      var copy = deepCopy(inputVal);
                      deepCopies[inputName] = copy;
                      this.dirtyProps[inputName] = copy;
                    }
                  }
                }
              }
            }
          }
          /*
          called with confirmed changes to input references
          */

        }, {
          key: "ngOnChanges",
          value: function ngOnChanges(changes) {
            if (this.calendar) {
              // not the initial render
              for (var inputName in changes) {
                if (changes.hasOwnProperty(inputName)) {
                  if (this.deepCopies[inputName] === undefined) {
                    // not already handled in ngDoCheck
                    this.dirtyProps[inputName] = changes[inputName].currentValue;
                  }
                }
              }
            }
          }
        }, {
          key: "ngAfterContentChecked",
          value: function ngAfterContentChecked() {
            var dirtyProps = this.dirtyProps; // hold on to reference before clearing

            if (Object.keys(dirtyProps).length > 0) {
              this.dirtyProps = {}; // clear first, in case the rerender causes new dirtiness

              this.calendar.mutateOptions(dirtyProps, [], false, fast_deep_equal__WEBPACK_IMPORTED_MODULE_1___default.a);
            }
          }
        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            if (this.calendar) {
              this.calendar.destroy();
            }

            this.calendar = null;
          }
        }, {
          key: "getApi",
          value: function getApi() {
            return this.calendar;
          }
        }]);

        return FullCalendarComponent;
      }();

      FullCalendarComponent.ɵfac = function FullCalendarComponent_Factory(t) {
        return new (t || FullCalendarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]));
      };

      FullCalendarComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
        type: FullCalendarComponent,
        selectors: [["full-calendar"]],
        inputs: {
          deepChangeDetection: "deepChangeDetection",
          header: "header",
          footer: "footer",
          customButtons: "customButtons",
          buttonIcons: "buttonIcons",
          themeSystem: "themeSystem",
          bootstrapFontAwesome: "bootstrapFontAwesome",
          firstDay: "firstDay",
          dir: "dir",
          weekends: "weekends",
          hiddenDays: "hiddenDays",
          fixedWeekCount: "fixedWeekCount",
          weekNumbers: "weekNumbers",
          weekNumbersWithinDays: "weekNumbersWithinDays",
          weekNumberCalculation: "weekNumberCalculation",
          businessHours: "businessHours",
          showNonCurrentDates: "showNonCurrentDates",
          height: "height",
          contentHeight: "contentHeight",
          aspectRatio: "aspectRatio",
          handleWindowResize: "handleWindowResize",
          windowResizeDelay: "windowResizeDelay",
          eventLimit: "eventLimit",
          eventLimitClick: "eventLimitClick",
          timeZone: "timeZone",
          now: "now",
          defaultView: "defaultView",
          allDaySlot: "allDaySlot",
          allDayText: "allDayText",
          slotDuration: "slotDuration",
          slotLabelFormat: "slotLabelFormat",
          slotLabelInterval: "slotLabelInterval",
          snapDuration: "snapDuration",
          scrollTime: "scrollTime",
          minTime: "minTime",
          maxTime: "maxTime",
          slotEventOverlap: "slotEventOverlap",
          listDayFormat: "listDayFormat",
          listDayAltFormat: "listDayAltFormat",
          noEventsMessage: "noEventsMessage",
          defaultDate: "defaultDate",
          nowIndicator: "nowIndicator",
          visibleRange: "visibleRange",
          validRange: "validRange",
          dateIncrement: "dateIncrement",
          dateAlignment: "dateAlignment",
          duration: "duration",
          dayCount: "dayCount",
          locales: "locales",
          locale: "locale",
          eventTimeFormat: "eventTimeFormat",
          columnHeader: "columnHeader",
          columnHeaderFormat: "columnHeaderFormat",
          columnHeaderText: "columnHeaderText",
          columnHeaderHtml: "columnHeaderHtml",
          titleFormat: "titleFormat",
          weekLabel: "weekLabel",
          displayEventTime: "displayEventTime",
          displayEventEnd: "displayEventEnd",
          eventLimitText: "eventLimitText",
          dayPopoverFormat: "dayPopoverFormat",
          navLinks: "navLinks",
          selectable: "selectable",
          selectMirror: "selectMirror",
          unselectAuto: "unselectAuto",
          unselectCancel: "unselectCancel",
          defaultAllDayEventDuration: "defaultAllDayEventDuration",
          defaultTimedEventDuration: "defaultTimedEventDuration",
          cmdFormatter: "cmdFormatter",
          defaultRangeSeparator: "defaultRangeSeparator",
          selectConstraint: "selectConstraint",
          selectOverlap: "selectOverlap",
          selectAllow: "selectAllow",
          selectMinDistance: "selectMinDistance",
          editable: "editable",
          eventStartEditable: "eventStartEditable",
          eventDurationEditable: "eventDurationEditable",
          eventConstraint: "eventConstraint",
          eventOverlap: "eventOverlap",
          eventAllow: "eventAllow",
          eventClassName: "eventClassName",
          eventClassNames: "eventClassNames",
          eventBackgroundColor: "eventBackgroundColor",
          eventBorderColor: "eventBorderColor",
          eventTextColor: "eventTextColor",
          eventColor: "eventColor",
          events: "events",
          eventSources: "eventSources",
          allDayDefault: "allDayDefault",
          startParam: "startParam",
          endParam: "endParam",
          lazyFetching: "lazyFetching",
          nextDayThreshold: "nextDayThreshold",
          eventOrder: "eventOrder",
          rerenderDelay: "rerenderDelay",
          dragRevertDuration: "dragRevertDuration",
          dragScroll: "dragScroll",
          longPressDelay: "longPressDelay",
          eventLongPressDelay: "eventLongPressDelay",
          droppable: "droppable",
          dropAccept: "dropAccept",
          eventDataTransform: "eventDataTransform",
          allDayMaintainDuration: "allDayMaintainDuration",
          eventResizableFromStart: "eventResizableFromStart",
          timeGridEventMinHeight: "timeGridEventMinHeight",
          allDayHtml: "allDayHtml",
          eventDragMinDistance: "eventDragMinDistance",
          eventSourceFailure: "eventSourceFailure",
          eventSourceSuccess: "eventSourceSuccess",
          forceEventDuration: "forceEventDuration",
          progressiveEventRendering: "progressiveEventRendering",
          selectLongPressDelay: "selectLongPressDelay",
          timeZoneParam: "timeZoneParam",
          titleRangeSeparator: "titleRangeSeparator",
          buttonText: "buttonText",
          views: "views",
          plugins: "plugins",
          schedulerLicenseKey: "schedulerLicenseKey",
          resources: "resources",
          resourceLabelText: "resourceLabelText",
          resourceOrder: "resourceOrder",
          filterResourcesWithEvents: "filterResourcesWithEvents",
          resourceText: "resourceText",
          resourceGroupField: "resourceGroupField",
          resourceGroupText: "resourceGroupText",
          resourceAreaWidth: "resourceAreaWidth",
          resourceColumns: "resourceColumns",
          resourcesInitiallyExpanded: "resourcesInitiallyExpanded",
          slotWidth: "slotWidth",
          datesAboveResources: "datesAboveResources",
          googleCalendarApiKey: "googleCalendarApiKey",
          refetchResourcesOnNavigate: "refetchResourcesOnNavigate",
          eventResourceEditable: "eventResourceEditable"
        },
        outputs: {
          windowResize: "windowResize",
          dateClick: "dateClick",
          eventClick: "eventClick",
          eventMouseEnter: "eventMouseEnter",
          eventMouseLeave: "eventMouseLeave",
          select: "select",
          unselect: "unselect",
          loading: "loading",
          eventPositioned: "eventPositioned",
          eventDragStart: "eventDragStart",
          eventDragStop: "eventDragStop",
          eventDrop: "eventDrop",
          eventResizeStart: "eventResizeStart",
          eventResizeStop: "eventResizeStop",
          eventResize: "eventResize",
          drop: "drop",
          eventReceive: "eventReceive",
          eventLeave: "eventLeave",
          _destroyed: "_destroyed",
          navLinkDayClick: "navLinkDayClick",
          navLinkWeekClick: "navLinkWeekClick",
          viewSkeletonRender: "viewSkeletonRender",
          viewSkeletonDestroy: "viewSkeletonDestroy",
          datesRender: "datesRender",
          datesDestroy: "datesDestroy",
          dayRender: "dayRender",
          eventRender: "eventRender",
          eventDestroy: "eventDestroy",
          resourceRender: "resourceRender"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵNgOnChangesFeature"]],
        decls: 0,
        vars: 0,
        template: function FullCalendarComponent_Template(rf, ctx) {},
        encapsulation: 2
      });

      FullCalendarComponent.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
        }];
      };

      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "deepChangeDetection", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "header", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "footer", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "customButtons", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "buttonIcons", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "themeSystem", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "bootstrapFontAwesome", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "firstDay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "dir", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "weekends", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Array)], FullCalendarComponent.prototype, "hiddenDays", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "fixedWeekCount", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "weekNumbers", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "weekNumbersWithinDays", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "weekNumberCalculation", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "businessHours", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "showNonCurrentDates", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "height", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "contentHeight", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "aspectRatio", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "handleWindowResize", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "windowResizeDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventLimit", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventLimitClick", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "timeZone", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "now", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "defaultView", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "allDaySlot", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "allDayText", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "slotDuration", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "slotLabelFormat", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "slotLabelInterval", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "snapDuration", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "scrollTime", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "minTime", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "maxTime", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "slotEventOverlap", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "listDayFormat", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "listDayAltFormat", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "noEventsMessage", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "defaultDate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "nowIndicator", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "visibleRange", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "validRange", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "dateIncrement", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "dateAlignment", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "duration", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "dayCount", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Array)], FullCalendarComponent.prototype, "locales", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "locale", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventTimeFormat", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "columnHeader", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "columnHeaderFormat", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "columnHeaderText", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "columnHeaderHtml", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "titleFormat", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "weekLabel", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "displayEventTime", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "displayEventEnd", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventLimitText", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "dayPopoverFormat", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "navLinks", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "selectable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "selectMirror", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "unselectAuto", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "unselectCancel", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "defaultAllDayEventDuration", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "defaultTimedEventDuration", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "cmdFormatter", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "defaultRangeSeparator", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "selectConstraint", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "selectOverlap", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "selectAllow", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "selectMinDistance", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "editable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "eventStartEditable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "eventDurationEditable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventConstraint", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventOverlap", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventAllow", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventClassName", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventClassNames", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "eventBackgroundColor", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "eventBorderColor", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "eventTextColor", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "eventColor", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "events", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Array)], FullCalendarComponent.prototype, "eventSources", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "allDayDefault", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "startParam", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "endParam", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "lazyFetching", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "nextDayThreshold", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventOrder", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "rerenderDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "dragRevertDuration", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "dragScroll", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "longPressDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "eventLongPressDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "droppable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "dropAccept", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventDataTransform", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "allDayMaintainDuration", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "eventResizableFromStart", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "timeGridEventMinHeight", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "allDayHtml", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "eventDragMinDistance", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventSourceFailure", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventSourceSuccess", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "forceEventDuration", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "progressiveEventRendering", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Number)], FullCalendarComponent.prototype, "selectLongPressDelay", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "timeZoneParam", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "titleRangeSeparator", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "buttonText", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "views", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Array)], FullCalendarComponent.prototype, "plugins", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "schedulerLicenseKey", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resources", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "resourceLabelText", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resourceOrder", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "filterResourcesWithEvents", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resourceText", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resourceGroupField", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resourceGroupText", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resourceAreaWidth", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resourceColumns", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resourcesInitiallyExpanded", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "slotWidth", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "datesAboveResources", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", String)], FullCalendarComponent.prototype, "googleCalendarApiKey", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "refetchResourcesOnNavigate", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Boolean)], FullCalendarComponent.prototype, "eventResourceEditable", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "windowResize", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "dateClick", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventClick", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventMouseEnter", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventMouseLeave", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "select", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "unselect", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "loading", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventPositioned", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventDragStart", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventDragStop", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventDrop", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventResizeStart", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventResizeStop", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventResize", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "drop", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventReceive", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventLeave", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "_destroyed", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "navLinkDayClick", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "navLinkWeekClick", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "viewSkeletonRender", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "viewSkeletonDestroy", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "datesRender", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "datesDestroy", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "dayRender", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventRender", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "eventDestroy", void 0);
      Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"])(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:type", Object)], FullCalendarComponent.prototype, "resourceRender", void 0);
      FullCalendarComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]])], FullCalendarComponent);

      var FullCalendarModule = function FullCalendarModule() {
        _classCallCheck(this, FullCalendarModule);
      };

      FullCalendarModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
        type: FullCalendarModule
      });
      FullCalendarModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
        factory: function FullCalendarModule_Factory(t) {
          return new (t || FullCalendarModule)();
        },
        imports: [[]]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](FullCalendarComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"],
          args: [{
            selector: 'full-calendar',
            template: ''
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["ElementRef"]
          }];
        }, {
          windowResize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          dateClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventMouseEnter: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventMouseLeave: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          select: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          unselect: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          loading: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventPositioned: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventDragStart: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventDragStop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventDrop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventResizeStart: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventResizeStop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventResize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          drop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventReceive: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventLeave: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          _destroyed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          navLinkDayClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          navLinkWeekClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          viewSkeletonRender: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          viewSkeletonDestroy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          datesRender: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          datesDestroy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          dayRender: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventRender: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          eventDestroy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          resourceRender: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Output"]
          }],
          deepChangeDetection: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          header: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          footer: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          customButtons: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          buttonIcons: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          themeSystem: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          bootstrapFontAwesome: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          firstDay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          dir: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          weekends: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          hiddenDays: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          fixedWeekCount: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          weekNumbers: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          weekNumbersWithinDays: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          weekNumberCalculation: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          businessHours: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          showNonCurrentDates: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          height: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          contentHeight: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          aspectRatio: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          handleWindowResize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          windowResizeDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventLimit: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventLimitClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          timeZone: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          now: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          defaultView: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          allDaySlot: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          allDayText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          slotDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          slotLabelFormat: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          slotLabelInterval: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          snapDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          scrollTime: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          minTime: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          maxTime: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          slotEventOverlap: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          listDayFormat: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          listDayAltFormat: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          noEventsMessage: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          defaultDate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          nowIndicator: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          visibleRange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          validRange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          dateIncrement: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          dateAlignment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          duration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          dayCount: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          locales: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          locale: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventTimeFormat: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          columnHeader: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          columnHeaderFormat: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          columnHeaderText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          columnHeaderHtml: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          titleFormat: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          weekLabel: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          displayEventTime: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          displayEventEnd: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventLimitText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          dayPopoverFormat: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          navLinks: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          selectable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          selectMirror: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          unselectAuto: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          unselectCancel: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          defaultAllDayEventDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          defaultTimedEventDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          cmdFormatter: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          defaultRangeSeparator: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          selectConstraint: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          selectOverlap: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          selectAllow: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          selectMinDistance: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          editable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventStartEditable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventDurationEditable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventConstraint: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventOverlap: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventAllow: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventClassName: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventClassNames: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventBackgroundColor: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventBorderColor: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventTextColor: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventColor: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          events: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventSources: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          allDayDefault: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          startParam: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          endParam: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          lazyFetching: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          nextDayThreshold: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventOrder: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          rerenderDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          dragRevertDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          dragScroll: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          longPressDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventLongPressDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          droppable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          dropAccept: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventDataTransform: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          allDayMaintainDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventResizableFromStart: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          timeGridEventMinHeight: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          allDayHtml: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventDragMinDistance: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventSourceFailure: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventSourceSuccess: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          forceEventDuration: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          progressiveEventRendering: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          selectLongPressDelay: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          timeZoneParam: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          titleRangeSeparator: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          buttonText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          views: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          plugins: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          schedulerLicenseKey: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resources: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resourceLabelText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resourceOrder: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          filterResourcesWithEvents: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resourceText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resourceGroupField: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resourceGroupText: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resourceAreaWidth: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resourceColumns: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          resourcesInitiallyExpanded: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          slotWidth: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          datesAboveResources: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          googleCalendarApiKey: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          refetchResourcesOnNavigate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }],
          eventResourceEditable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["Input"]
          }]
        });
      })();

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](FullCalendarModule, {
          declarations: [FullCalendarComponent],
          exports: [FullCalendarComponent]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵsetClassMetadata"](FullCalendarModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"],
          args: [{
            declarations: [FullCalendarComponent],
            imports: [],
            exports: [FullCalendarComponent]
          }]
        }], null, null);
      })();
      /*
       * Public API Surface of fullcalendar
       */

      /**
       * Generated bundle index. Do not edit.
       */
      //# sourceMappingURL=fullcalendar-angular.js.map

      /***/

    },

    /***/
    "./node_modules/@fullcalendar/core/main.esm.js":
    /*!*****************************************************!*\
      !*** ./node_modules/@fullcalendar/core/main.esm.js ***!
      \*****************************************************/

    /*! exports provided: Calendar, Component, ComponentContext, DateComponent, DateEnv, DateProfileGenerator, DayHeader, DaySeries, DayTable, ElementDragging, ElementScrollController, EmitterMixin, EventApi, FgEventRenderer, FillRenderer, Interaction, Mixin, NamedTimeZoneImpl, PositionCache, ScrollComponent, ScrollController, Slicer, Splitter, Theme, View, WindowScrollController, addDays, addDurations, addMs, addWeeks, allowContextMenu, allowSelection, appendToElement, applyAll, applyMutationToEventStore, applyStyle, applyStyleProp, asRoughMinutes, asRoughMs, asRoughSeconds, buildGotoAnchorHtml, buildSegCompareObj, capitaliseFirstLetter, combineEventUis, compareByFieldSpec, compareByFieldSpecs, compareNumbers, compensateScroll, computeClippingRect, computeEdges, computeEventDraggable, computeEventEndResizable, computeEventStartResizable, computeFallbackHeaderFormat, computeHeightAndMargins, computeInnerRect, computeRect, computeVisibleDayRange, config, constrainPoint, createDuration, createElement, createEmptyEventStore, createEventInstance, createFormatter, createPlugin, cssToStr, debounce, diffDates, diffDayAndTime, diffDays, diffPoints, diffWeeks, diffWholeDays, diffWholeWeeks, disableCursor, distributeHeight, elementClosest, elementMatches, enableCursor, eventTupleToStore, filterEventStoreDefs, filterHash, findChildren, findElements, flexibleCompare, forceClassName, formatDate, formatIsoTimeString, formatRange, getAllDayHtml, getClippingParents, getDayClasses, getElSeg, getRectCenter, getRelevantEvents, globalDefaults, greatestDurationDenominator, hasBgRendering, htmlEscape, htmlToElement, insertAfterElement, interactionSettingsStore, interactionSettingsToStore, intersectRanges, intersectRects, isArraysEqual, isDateSpansEqual, isInt, isInteractionValid, isMultiDayRange, isPropsEqual, isPropsValid, isSingleDay, isValidDate, listenBySelector, mapHash, matchCellWidths, memoize, memoizeOutput, memoizeRendering, mergeEventStores, multiplyDuration, padStart, parseBusinessHours, parseDragMeta, parseEventDef, parseFieldSpecs, parseMarker, pointInsideRect, prependToElement, preventContextMenu, preventDefault, preventSelection, processScopedUiProps, rangeContainsMarker, rangeContainsRange, rangesEqual, rangesIntersect, refineProps, removeElement, removeExact, renderDateCell, requestJson, sliceEventStore, startOfDay, subtractInnerElHeight, translateRect, uncompensateScroll, undistributeHeight, unpromisify, version, whenTransitionDone, wholeDivideDurations */

    /***/
    function node_modulesFullcalendarCoreMainEsmJs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Calendar", function () {
        return Calendar;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Component", function () {
        return Component;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ComponentContext", function () {
        return ComponentContext;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DateComponent", function () {
        return DateComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DateEnv", function () {
        return DateEnv;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DateProfileGenerator", function () {
        return DateProfileGenerator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DayHeader", function () {
        return DayHeader;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DaySeries", function () {
        return DaySeries;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DayTable", function () {
        return DayTable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ElementDragging", function () {
        return ElementDragging;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ElementScrollController", function () {
        return ElementScrollController;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmitterMixin", function () {
        return EmitterMixin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EventApi", function () {
        return EventApi;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FgEventRenderer", function () {
        return FgEventRenderer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FillRenderer", function () {
        return FillRenderer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Interaction", function () {
        return Interaction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Mixin", function () {
        return Mixin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "NamedTimeZoneImpl", function () {
        return NamedTimeZoneImpl;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PositionCache", function () {
        return PositionCache;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ScrollComponent", function () {
        return ScrollComponent;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ScrollController", function () {
        return ScrollController;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Slicer", function () {
        return Slicer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Splitter", function () {
        return Splitter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Theme", function () {
        return Theme;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "View", function () {
        return View;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "WindowScrollController", function () {
        return WindowScrollController;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "addDays", function () {
        return addDays;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "addDurations", function () {
        return addDurations;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "addMs", function () {
        return addMs;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "addWeeks", function () {
        return addWeeks;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "allowContextMenu", function () {
        return allowContextMenu;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "allowSelection", function () {
        return allowSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "appendToElement", function () {
        return appendToElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "applyAll", function () {
        return applyAll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "applyMutationToEventStore", function () {
        return applyMutationToEventStore;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "applyStyle", function () {
        return applyStyle;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "applyStyleProp", function () {
        return applyStyleProp;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "asRoughMinutes", function () {
        return asRoughMinutes;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "asRoughMs", function () {
        return asRoughMs;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "asRoughSeconds", function () {
        return asRoughSeconds;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "buildGotoAnchorHtml", function () {
        return buildGotoAnchorHtml;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "buildSegCompareObj", function () {
        return buildSegCompareObj;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "capitaliseFirstLetter", function () {
        return capitaliseFirstLetter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "combineEventUis", function () {
        return combineEventUis;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compareByFieldSpec", function () {
        return compareByFieldSpec;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compareByFieldSpecs", function () {
        return compareByFieldSpecs;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compareNumbers", function () {
        return compareNumbers;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "compensateScroll", function () {
        return compensateScroll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeClippingRect", function () {
        return computeClippingRect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeEdges", function () {
        return computeEdges;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeEventDraggable", function () {
        return computeEventDraggable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeEventEndResizable", function () {
        return computeEventEndResizable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeEventStartResizable", function () {
        return computeEventStartResizable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeFallbackHeaderFormat", function () {
        return computeFallbackHeaderFormat;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeHeightAndMargins", function () {
        return computeHeightAndMargins;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeInnerRect", function () {
        return computeInnerRect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeRect", function () {
        return computeRect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "computeVisibleDayRange", function () {
        return computeVisibleDayRange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "config", function () {
        return config;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "constrainPoint", function () {
        return constrainPoint;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createDuration", function () {
        return createDuration;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createElement", function () {
        return createElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createEmptyEventStore", function () {
        return createEmptyEventStore;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createEventInstance", function () {
        return createEventInstance;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createFormatter", function () {
        return createFormatter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "createPlugin", function () {
        return createPlugin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "cssToStr", function () {
        return cssToStr;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "debounce", function () {
        return debounce;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "diffDates", function () {
        return diffDates;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "diffDayAndTime", function () {
        return diffDayAndTime;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "diffDays", function () {
        return diffDays;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "diffPoints", function () {
        return diffPoints;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "diffWeeks", function () {
        return diffWeeks;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "diffWholeDays", function () {
        return diffWholeDays;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "diffWholeWeeks", function () {
        return diffWholeWeeks;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "disableCursor", function () {
        return disableCursor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "distributeHeight", function () {
        return distributeHeight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "elementClosest", function () {
        return elementClosest;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "elementMatches", function () {
        return elementMatches;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "enableCursor", function () {
        return enableCursor;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "eventTupleToStore", function () {
        return eventTupleToStore;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "filterEventStoreDefs", function () {
        return filterEventStoreDefs;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "filterHash", function () {
        return filterHash;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "findChildren", function () {
        return findChildren;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "findElements", function () {
        return findElements;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "flexibleCompare", function () {
        return flexibleCompare;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "forceClassName", function () {
        return forceClassName;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formatDate", function () {
        return formatDate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formatIsoTimeString", function () {
        return formatIsoTimeString;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "formatRange", function () {
        return formatRange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getAllDayHtml", function () {
        return getAllDayHtml;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getClippingParents", function () {
        return getClippingParents;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getDayClasses", function () {
        return getDayClasses;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getElSeg", function () {
        return getElSeg;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getRectCenter", function () {
        return getRectCenter;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getRelevantEvents", function () {
        return getRelevantEvents;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "globalDefaults", function () {
        return globalDefaults;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "greatestDurationDenominator", function () {
        return greatestDurationDenominator;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "hasBgRendering", function () {
        return hasBgRendering;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "htmlEscape", function () {
        return htmlEscape;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "htmlToElement", function () {
        return htmlToElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "insertAfterElement", function () {
        return insertAfterElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "interactionSettingsStore", function () {
        return interactionSettingsStore;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "interactionSettingsToStore", function () {
        return interactionSettingsToStore;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "intersectRanges", function () {
        return intersectRanges;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "intersectRects", function () {
        return intersectRects;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isArraysEqual", function () {
        return isArraysEqual;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isDateSpansEqual", function () {
        return isDateSpansEqual;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isInt", function () {
        return isInt;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isInteractionValid", function () {
        return isInteractionValid;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isMultiDayRange", function () {
        return isMultiDayRange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isPropsEqual", function () {
        return isPropsEqual;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isPropsValid", function () {
        return isPropsValid;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isSingleDay", function () {
        return isSingleDay;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "isValidDate", function () {
        return isValidDate;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "listenBySelector", function () {
        return listenBySelector;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mapHash", function () {
        return mapHash;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "matchCellWidths", function () {
        return matchCellWidths;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "memoize", function () {
        return memoize;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "memoizeOutput", function () {
        return memoizeOutput;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "memoizeRendering", function () {
        return memoizeRendering;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "mergeEventStores", function () {
        return mergeEventStores;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "multiplyDuration", function () {
        return multiplyDuration;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "padStart", function () {
        return padStart;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parseBusinessHours", function () {
        return parseBusinessHours;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parseDragMeta", function () {
        return parseDragMeta;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parseEventDef", function () {
        return parseEventDef;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parseFieldSpecs", function () {
        return parseFieldSpecs;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "parseMarker", function () {
        return parse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "pointInsideRect", function () {
        return pointInsideRect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "prependToElement", function () {
        return prependToElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "preventContextMenu", function () {
        return preventContextMenu;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "preventDefault", function () {
        return preventDefault;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "preventSelection", function () {
        return preventSelection;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "processScopedUiProps", function () {
        return processScopedUiProps;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rangeContainsMarker", function () {
        return rangeContainsMarker;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rangeContainsRange", function () {
        return rangeContainsRange;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rangesEqual", function () {
        return rangesEqual;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "rangesIntersect", function () {
        return rangesIntersect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "refineProps", function () {
        return refineProps;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "removeElement", function () {
        return removeElement;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "removeExact", function () {
        return removeExact;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "renderDateCell", function () {
        return renderDateCell;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "requestJson", function () {
        return requestJson;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "sliceEventStore", function () {
        return sliceEventStore;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "startOfDay", function () {
        return startOfDay;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "subtractInnerElHeight", function () {
        return subtractInnerElHeight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "translateRect", function () {
        return translateRect;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "uncompensateScroll", function () {
        return uncompensateScroll;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "undistributeHeight", function () {
        return undistributeHeight;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "unpromisify", function () {
        return unpromisify;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "version", function () {
        return version;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "whenTransitionDone", function () {
        return whenTransitionDone;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "wholeDivideDurations", function () {
        return wholeDivideDurations;
      });
      /*!
      FullCalendar Core Package v4.4.2
      Docs & License: https://fullcalendar.io/
      (c) 2019 Adam Shaw
      */
      // Creating
      // ----------------------------------------------------------------------------------------------------------------


      var elementPropHash = {
        className: true,
        colSpan: true,
        rowSpan: true
      };
      var containerTagHash = {
        '<tr': 'tbody',
        '<td': 'tr'
      };

      function createElement(tagName, attrs, content) {
        var el = document.createElement(tagName);

        if (attrs) {
          for (var attrName in attrs) {
            if (attrName === 'style') {
              applyStyle(el, attrs[attrName]);
            } else if (elementPropHash[attrName]) {
              el[attrName] = attrs[attrName];
            } else {
              el.setAttribute(attrName, attrs[attrName]);
            }
          }
        }

        if (typeof content === 'string') {
          el.innerHTML = content; // shortcut. no need to process HTML in any way
        } else if (content != null) {
          appendToElement(el, content);
        }

        return el;
      }

      function htmlToElement(html) {
        html = html.trim();
        var container = document.createElement(computeContainerTag(html));
        container.innerHTML = html;
        return container.firstChild;
      }

      function htmlToElements(html) {
        return Array.prototype.slice.call(htmlToNodeList(html));
      }

      function htmlToNodeList(html) {
        html = html.trim();
        var container = document.createElement(computeContainerTag(html));
        container.innerHTML = html;
        return container.childNodes;
      } // assumes html already trimmed and tag names are lowercase


      function computeContainerTag(html) {
        return containerTagHash[html.substr(0, 3) // faster than using regex
        ] || 'div';
      }

      function appendToElement(el, content) {
        var childNodes = normalizeContent(content);

        for (var i = 0; i < childNodes.length; i++) {
          el.appendChild(childNodes[i]);
        }
      }

      function prependToElement(parent, content) {
        var newEls = normalizeContent(content);
        var afterEl = parent.firstChild || null; // if no firstChild, will append to end, but that's okay, b/c there were no children

        for (var i = 0; i < newEls.length; i++) {
          parent.insertBefore(newEls[i], afterEl);
        }
      }

      function insertAfterElement(refEl, content) {
        var newEls = normalizeContent(content);
        var afterEl = refEl.nextSibling || null;

        for (var i = 0; i < newEls.length; i++) {
          refEl.parentNode.insertBefore(newEls[i], afterEl);
        }
      }

      function normalizeContent(content) {
        var els;

        if (typeof content === 'string') {
          els = htmlToElements(content);
        } else if (content instanceof Node) {
          els = [content];
        } else {
          // Node[] or NodeList
          els = Array.prototype.slice.call(content);
        }

        return els;
      }

      function removeElement(el) {
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        }
      } // Querying
      // ----------------------------------------------------------------------------------------------------------------
      // from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest


      var matchesMethod = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.msMatchesSelector;

      var closestMethod = Element.prototype.closest || function (selector) {
        // polyfill
        var el = this;

        if (!document.documentElement.contains(el)) {
          return null;
        }

        do {
          if (elementMatches(el, selector)) {
            return el;
          }

          el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1);

        return null;
      };

      function elementClosest(el, selector) {
        return closestMethod.call(el, selector);
      }

      function elementMatches(el, selector) {
        return matchesMethod.call(el, selector);
      } // accepts multiple subject els
      // returns a real array. good for methods like forEach


      function findElements(container, selector) {
        var containers = container instanceof HTMLElement ? [container] : container;
        var allMatches = [];

        for (var i = 0; i < containers.length; i++) {
          var matches = containers[i].querySelectorAll(selector);

          for (var j = 0; j < matches.length; j++) {
            allMatches.push(matches[j]);
          }
        }

        return allMatches;
      } // accepts multiple subject els
      // only queries direct child elements


      function findChildren(parent, selector) {
        var parents = parent instanceof HTMLElement ? [parent] : parent;
        var allMatches = [];

        for (var i = 0; i < parents.length; i++) {
          var childNodes = parents[i].children; // only ever elements

          for (var j = 0; j < childNodes.length; j++) {
            var childNode = childNodes[j];

            if (!selector || elementMatches(childNode, selector)) {
              allMatches.push(childNode);
            }
          }
        }

        return allMatches;
      } // Attributes
      // ----------------------------------------------------------------------------------------------------------------


      function forceClassName(el, className, bool) {
        if (bool) {
          el.classList.add(className);
        } else {
          el.classList.remove(className);
        }
      } // Style
      // ----------------------------------------------------------------------------------------------------------------


      var PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;

      function applyStyle(el, props) {
        for (var propName in props) {
          applyStyleProp(el, propName, props[propName]);
        }
      }

      function applyStyleProp(el, name, val) {
        if (val == null) {
          el.style[name] = '';
        } else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {
          el.style[name] = val + 'px';
        } else {
          el.style[name] = val;
        }
      }

      function pointInsideRect(point, rect) {
        return point.left >= rect.left && point.left < rect.right && point.top >= rect.top && point.top < rect.bottom;
      } // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false


      function intersectRects(rect1, rect2) {
        var res = {
          left: Math.max(rect1.left, rect2.left),
          right: Math.min(rect1.right, rect2.right),
          top: Math.max(rect1.top, rect2.top),
          bottom: Math.min(rect1.bottom, rect2.bottom)
        };

        if (res.left < res.right && res.top < res.bottom) {
          return res;
        }

        return false;
      }

      function translateRect(rect, deltaX, deltaY) {
        return {
          left: rect.left + deltaX,
          right: rect.right + deltaX,
          top: rect.top + deltaY,
          bottom: rect.bottom + deltaY
        };
      } // Returns a new point that will have been moved to reside within the given rectangle


      function constrainPoint(point, rect) {
        return {
          left: Math.min(Math.max(point.left, rect.left), rect.right),
          top: Math.min(Math.max(point.top, rect.top), rect.bottom)
        };
      } // Returns a point that is the center of the given rectangle


      function getRectCenter(rect) {
        return {
          left: (rect.left + rect.right) / 2,
          top: (rect.top + rect.bottom) / 2
        };
      } // Subtracts point2's coordinates from point1's coordinates, returning a delta


      function diffPoints(point1, point2) {
        return {
          left: point1.left - point2.left,
          top: point1.top - point2.top
        };
      } // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side


      var isRtlScrollbarOnLeft = null;

      function getIsRtlScrollbarOnLeft() {
        if (isRtlScrollbarOnLeft === null) {
          isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();
        }

        return isRtlScrollbarOnLeft;
      }

      function computeIsRtlScrollbarOnLeft() {
        var outerEl = createElement('div', {
          style: {
            position: 'absolute',
            top: -1000,
            left: 0,
            border: 0,
            padding: 0,
            overflow: 'scroll',
            direction: 'rtl'
          }
        }, '<div></div>');
        document.body.appendChild(outerEl);
        var innerEl = outerEl.firstChild;
        var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;
        removeElement(outerEl);
        return res;
      } // The scrollbar width computations in computeEdges are sometimes flawed when it comes to
      // retina displays, rounding, and IE11. Massage them into a usable value.


      function sanitizeScrollbarWidth(width) {
        width = Math.max(0, width); // no negatives

        width = Math.round(width);
        return width;
      }

      function computeEdges(el, getPadding) {
        if (getPadding === void 0) {
          getPadding = false;
        }

        var computedStyle = window.getComputedStyle(el);
        var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;
        var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;
        var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;
        var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0; // must use offset(Width|Height) because compatible with client(Width|Height)

        var scrollbarLeftRight = sanitizeScrollbarWidth(el.offsetWidth - el.clientWidth - borderLeft - borderRight);
        var scrollbarBottom = sanitizeScrollbarWidth(el.offsetHeight - el.clientHeight - borderTop - borderBottom);
        var res = {
          borderLeft: borderLeft,
          borderRight: borderRight,
          borderTop: borderTop,
          borderBottom: borderBottom,
          scrollbarBottom: scrollbarBottom,
          scrollbarLeft: 0,
          scrollbarRight: 0
        };

        if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') {
          // is the scrollbar on the left side?
          res.scrollbarLeft = scrollbarLeftRight;
        } else {
          res.scrollbarRight = scrollbarLeftRight;
        }

        if (getPadding) {
          res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;
          res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;
          res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;
          res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;
        }

        return res;
      }

      function computeInnerRect(el, goWithinPadding) {
        if (goWithinPadding === void 0) {
          goWithinPadding = false;
        }

        var outerRect = computeRect(el);
        var edges = computeEdges(el, goWithinPadding);
        var res = {
          left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,
          right: outerRect.right - edges.borderRight - edges.scrollbarRight,
          top: outerRect.top + edges.borderTop,
          bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom
        };

        if (goWithinPadding) {
          res.left += edges.paddingLeft;
          res.right -= edges.paddingRight;
          res.top += edges.paddingTop;
          res.bottom -= edges.paddingBottom;
        }

        return res;
      }

      function computeRect(el) {
        var rect = el.getBoundingClientRect();
        return {
          left: rect.left + window.pageXOffset,
          top: rect.top + window.pageYOffset,
          right: rect.right + window.pageXOffset,
          bottom: rect.bottom + window.pageYOffset
        };
      }

      function computeViewportRect() {
        return {
          left: window.pageXOffset,
          right: window.pageXOffset + document.documentElement.clientWidth,
          top: window.pageYOffset,
          bottom: window.pageYOffset + document.documentElement.clientHeight
        };
      }

      function computeHeightAndMargins(el) {
        return el.getBoundingClientRect().height + computeVMargins(el);
      }

      function computeVMargins(el) {
        var computed = window.getComputedStyle(el);
        return parseInt(computed.marginTop, 10) + parseInt(computed.marginBottom, 10);
      } // does not return window


      function getClippingParents(el) {
        var parents = [];

        while (el instanceof HTMLElement) {
          // will stop when gets to document or null
          var computedStyle = window.getComputedStyle(el);

          if (computedStyle.position === 'fixed') {
            break;
          }

          if (/(auto|scroll)/.test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {
            parents.push(el);
          }

          el = el.parentNode;
        }

        return parents;
      }

      function computeClippingRect(el) {
        return getClippingParents(el).map(function (el) {
          return computeInnerRect(el);
        }).concat(computeViewportRect()).reduce(function (rect0, rect1) {
          return intersectRects(rect0, rect1) || rect1; // should always intersect
        });
      } // Stops a mouse/touch event from doing it's native browser action


      function preventDefault(ev) {
        ev.preventDefault();
      } // Event Delegation
      // ----------------------------------------------------------------------------------------------------------------


      function listenBySelector(container, eventType, selector, handler) {
        function realHandler(ev) {
          var matchedChild = elementClosest(ev.target, selector);

          if (matchedChild) {
            handler.call(matchedChild, ev, matchedChild);
          }
        }

        container.addEventListener(eventType, realHandler);
        return function () {
          container.removeEventListener(eventType, realHandler);
        };
      }

      function listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {
        var currentMatchedChild;
        return listenBySelector(container, 'mouseover', selector, function (ev, matchedChild) {
          if (matchedChild !== currentMatchedChild) {
            currentMatchedChild = matchedChild;
            onMouseEnter(ev, matchedChild);

            var realOnMouseLeave_1 = function realOnMouseLeave_1(ev) {
              currentMatchedChild = null;
              onMouseLeave(ev, matchedChild);
              matchedChild.removeEventListener('mouseleave', realOnMouseLeave_1);
            }; // listen to the next mouseleave, and then unattach


            matchedChild.addEventListener('mouseleave', realOnMouseLeave_1);
          }
        });
      } // Animation
      // ----------------------------------------------------------------------------------------------------------------


      var transitionEventNames = ['webkitTransitionEnd', 'otransitionend', 'oTransitionEnd', 'msTransitionEnd', 'transitionend']; // triggered only when the next single subsequent transition finishes

      function whenTransitionDone(el, callback) {
        var realCallback = function realCallback(ev) {
          callback(ev);
          transitionEventNames.forEach(function (eventName) {
            el.removeEventListener(eventName, realCallback);
          });
        };

        transitionEventNames.forEach(function (eventName) {
          el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes
        });
      }

      var DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']; // Adding

      function addWeeks(m, n) {
        var a = dateToUtcArray(m);
        a[2] += n * 7;
        return arrayToUtcDate(a);
      }

      function addDays(m, n) {
        var a = dateToUtcArray(m);
        a[2] += n;
        return arrayToUtcDate(a);
      }

      function addMs(m, n) {
        var a = dateToUtcArray(m);
        a[6] += n;
        return arrayToUtcDate(a);
      } // Diffing (all return floats)


      function diffWeeks(m0, m1) {
        return diffDays(m0, m1) / 7;
      }

      function diffDays(m0, m1) {
        return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);
      }

      function diffHours(m0, m1) {
        return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);
      }

      function diffMinutes(m0, m1) {
        return (m1.valueOf() - m0.valueOf()) / (1000 * 60);
      }

      function diffSeconds(m0, m1) {
        return (m1.valueOf() - m0.valueOf()) / 1000;
      }

      function diffDayAndTime(m0, m1) {
        var m0day = startOfDay(m0);
        var m1day = startOfDay(m1);
        return {
          years: 0,
          months: 0,
          days: Math.round(diffDays(m0day, m1day)),
          milliseconds: m1.valueOf() - m1day.valueOf() - (m0.valueOf() - m0day.valueOf())
        };
      } // Diffing Whole Units


      function diffWholeWeeks(m0, m1) {
        var d = diffWholeDays(m0, m1);

        if (d !== null && d % 7 === 0) {
          return d / 7;
        }

        return null;
      }

      function diffWholeDays(m0, m1) {
        if (timeAsMs(m0) === timeAsMs(m1)) {
          return Math.round(diffDays(m0, m1));
        }

        return null;
      } // Start-Of


      function startOfDay(m) {
        return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate()]);
      }

      function startOfHour(m) {
        return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours()]);
      }

      function startOfMinute(m) {
        return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes()]);
      }

      function startOfSecond(m) {
        return arrayToUtcDate([m.getUTCFullYear(), m.getUTCMonth(), m.getUTCDate(), m.getUTCHours(), m.getUTCMinutes(), m.getUTCSeconds()]);
      } // Week Computation


      function weekOfYear(marker, dow, doy) {
        var y = marker.getUTCFullYear();
        var w = weekOfGivenYear(marker, y, dow, doy);

        if (w < 1) {
          return weekOfGivenYear(marker, y - 1, dow, doy);
        }

        var nextW = weekOfGivenYear(marker, y + 1, dow, doy);

        if (nextW >= 1) {
          return Math.min(w, nextW);
        }

        return w;
      }

      function weekOfGivenYear(marker, year, dow, doy) {
        var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);
        var dayStart = startOfDay(marker);
        var days = Math.round(diffDays(firstWeekStart, dayStart));
        return Math.floor(days / 7) + 1; // zero-indexed
      } // start-of-first-week - start-of-year


      function firstWeekOffset(year, dow, doy) {
        // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        var fwd = 7 + dow - doy; // first-week day local weekday -- which local weekday is fwd

        var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      } // Array Conversion


      function dateToLocalArray(date) {
        return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];
      }

      function arrayToLocalDate(a) {
        return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], // day of month
        a[3] || 0, a[4] || 0, a[5] || 0);
      }

      function dateToUtcArray(date) {
        return [date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()];
      }

      function arrayToUtcDate(a) {
        // according to web standards (and Safari), a month index is required.
        // massage if only given a year.
        if (a.length === 1) {
          a = a.concat([0]);
        }

        return new Date(Date.UTC.apply(Date, a));
      } // Other Utils


      function isValidDate(m) {
        return !isNaN(m.valueOf());
      }

      function timeAsMs(m) {
        return m.getUTCHours() * 1000 * 60 * 60 + m.getUTCMinutes() * 1000 * 60 + m.getUTCSeconds() * 1000 + m.getUTCMilliseconds();
      }

      var INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];
      var PARSE_RE = /^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/; // Parsing and Creation

      function createDuration(input, unit) {
        var _a;

        if (typeof input === 'string') {
          return parseString(input);
        } else if (typeof input === 'object' && input) {
          // non-null object
          return normalizeObject(input);
        } else if (typeof input === 'number') {
          return normalizeObject((_a = {}, _a[unit || 'milliseconds'] = input, _a));
        } else {
          return null;
        }
      }

      function parseString(s) {
        var m = PARSE_RE.exec(s);

        if (m) {
          var sign = m[1] ? -1 : 1;
          return {
            years: 0,
            months: 0,
            days: sign * (m[2] ? parseInt(m[2], 10) : 0),
            milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + // hours
            (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + // minutes
            (m[5] ? parseInt(m[5], 10) : 0) * 1000 + ( // seconds
            m[6] ? parseInt(m[6], 10) : 0) // ms
            )
          };
        }

        return null;
      }

      function normalizeObject(obj) {
        return {
          years: obj.years || obj.year || 0,
          months: obj.months || obj.month || 0,
          days: (obj.days || obj.day || 0) + getWeeksFromInput(obj) * 7,
          milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + // hours
          (obj.minutes || obj.minute || 0) * 60 * 1000 + // minutes
          (obj.seconds || obj.second || 0) * 1000 + ( // seconds
          obj.milliseconds || obj.millisecond || obj.ms || 0) // ms

        };
      }

      function getWeeksFromInput(obj) {
        return obj.weeks || obj.week || 0;
      } // Equality


      function durationsEqual(d0, d1) {
        return d0.years === d1.years && d0.months === d1.months && d0.days === d1.days && d0.milliseconds === d1.milliseconds;
      }

      function isSingleDay(dur) {
        return dur.years === 0 && dur.months === 0 && dur.days === 1 && dur.milliseconds === 0;
      } // Simple Math


      function addDurations(d0, d1) {
        return {
          years: d0.years + d1.years,
          months: d0.months + d1.months,
          days: d0.days + d1.days,
          milliseconds: d0.milliseconds + d1.milliseconds
        };
      }

      function subtractDurations(d1, d0) {
        return {
          years: d1.years - d0.years,
          months: d1.months - d0.months,
          days: d1.days - d0.days,
          milliseconds: d1.milliseconds - d0.milliseconds
        };
      }

      function multiplyDuration(d, n) {
        return {
          years: d.years * n,
          months: d.months * n,
          days: d.days * n,
          milliseconds: d.milliseconds * n
        };
      } // Conversions
      // "Rough" because they are based on average-case Gregorian months/years


      function asRoughYears(dur) {
        return asRoughDays(dur) / 365;
      }

      function asRoughMonths(dur) {
        return asRoughDays(dur) / 30;
      }

      function asRoughDays(dur) {
        return asRoughMs(dur) / 864e5;
      }

      function asRoughMinutes(dur) {
        return asRoughMs(dur) / (1000 * 60);
      }

      function asRoughSeconds(dur) {
        return asRoughMs(dur) / 1000;
      }

      function asRoughMs(dur) {
        return dur.years * (365 * 864e5) + dur.months * (30 * 864e5) + dur.days * 864e5 + dur.milliseconds;
      } // Advanced Math


      function wholeDivideDurations(numerator, denominator) {
        var res = null;

        for (var i = 0; i < INTERNAL_UNITS.length; i++) {
          var unit = INTERNAL_UNITS[i];

          if (denominator[unit]) {
            var localRes = numerator[unit] / denominator[unit];

            if (!isInt(localRes) || res !== null && res !== localRes) {
              return null;
            }

            res = localRes;
          } else if (numerator[unit]) {
            // needs to divide by something but can't!
            return null;
          }
        }

        return res;
      }

      function greatestDurationDenominator(dur, dontReturnWeeks) {
        var ms = dur.milliseconds;

        if (ms) {
          if (ms % 1000 !== 0) {
            return {
              unit: 'millisecond',
              value: ms
            };
          }

          if (ms % (1000 * 60) !== 0) {
            return {
              unit: 'second',
              value: ms / 1000
            };
          }

          if (ms % (1000 * 60 * 60) !== 0) {
            return {
              unit: 'minute',
              value: ms / (1000 * 60)
            };
          }

          if (ms) {
            return {
              unit: 'hour',
              value: ms / (1000 * 60 * 60)
            };
          }
        }

        if (dur.days) {
          if (!dontReturnWeeks && dur.days % 7 === 0) {
            return {
              unit: 'week',
              value: dur.days / 7
            };
          }

          return {
            unit: 'day',
            value: dur.days
          };
        }

        if (dur.months) {
          return {
            unit: 'month',
            value: dur.months
          };
        }

        if (dur.years) {
          return {
            unit: 'year',
            value: dur.years
          };
        }

        return {
          unit: 'millisecond',
          value: 0
        };
      }
      /* FullCalendar-specific DOM Utilities
      ----------------------------------------------------------------------------------------------------------------------*/
      // Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left
      // and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.


      function compensateScroll(rowEl, scrollbarWidths) {
        if (scrollbarWidths.left) {
          applyStyle(rowEl, {
            borderLeftWidth: 1,
            marginLeft: scrollbarWidths.left - 1
          });
        }

        if (scrollbarWidths.right) {
          applyStyle(rowEl, {
            borderRightWidth: 1,
            marginRight: scrollbarWidths.right - 1
          });
        }
      } // Undoes compensateScroll and restores all borders/margins


      function uncompensateScroll(rowEl) {
        applyStyle(rowEl, {
          marginLeft: '',
          marginRight: '',
          borderLeftWidth: '',
          borderRightWidth: ''
        });
      } // Make the mouse cursor express that an event is not allowed in the current area


      function disableCursor() {
        document.body.classList.add('fc-not-allowed');
      } // Returns the mouse cursor to its original look


      function enableCursor() {
        document.body.classList.remove('fc-not-allowed');
      } // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.
      // By default, all elements that are shorter than the recommended height are expanded uniformly, not considering
      // any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and
      // reduces the available height.


      function distributeHeight(els, availableHeight, shouldRedistribute) {
        // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,
        // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.
        var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element

        var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*

        var flexEls = []; // elements that are allowed to expand. array of DOM nodes

        var flexOffsets = []; // amount of vertical space it takes up

        var flexHeights = []; // actual css height

        var usedHeight = 0;
        undistributeHeight(els); // give all elements their natural height
        // find elements that are below the recommended height (expandable).
        // important to query for heights in a single first pass (to avoid reflow oscillation).

        els.forEach(function (el, i) {
          var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;
          var naturalHeight = el.getBoundingClientRect().height;
          var naturalOffset = naturalHeight + computeVMargins(el);

          if (naturalOffset < minOffset) {
            flexEls.push(el);
            flexOffsets.push(naturalOffset);
            flexHeights.push(naturalHeight);
          } else {
            // this element stretches past recommended height (non-expandable). mark the space as occupied.
            usedHeight += naturalOffset;
          }
        }); // readjust the recommended height to only consider the height available to non-maxed-out rows.

        if (shouldRedistribute) {
          availableHeight -= usedHeight;
          minOffset1 = Math.floor(availableHeight / flexEls.length);
          minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*
        } // assign heights to all expandable elements


        flexEls.forEach(function (el, i) {
          var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;
          var naturalOffset = flexOffsets[i];
          var naturalHeight = flexHeights[i];
          var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding

          if (naturalOffset < minOffset) {
            // we check this again because redistribution might have changed things
            el.style.height = newHeight + 'px';
          }
        });
      } // Undoes distrubuteHeight, restoring all els to their natural height


      function undistributeHeight(els) {
        els.forEach(function (el) {
          el.style.height = '';
        });
      } // Given `els`, a set of <td> cells, find the cell with the largest natural width and set the widths of all the
      // cells to be that width.
      // PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline


      function matchCellWidths(els) {
        var maxInnerWidth = 0;
        els.forEach(function (el) {
          var innerEl = el.firstChild; // hopefully an element

          if (innerEl instanceof HTMLElement) {
            var innerWidth_1 = innerEl.getBoundingClientRect().width;

            if (innerWidth_1 > maxInnerWidth) {
              maxInnerWidth = innerWidth_1;
            }
          }
        });
        maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance

        els.forEach(function (el) {
          el.style.width = maxInnerWidth + 'px';
        });
        return maxInnerWidth;
      } // Given one element that resides inside another,
      // Subtracts the height of the inner element from the outer element.


      function subtractInnerElHeight(outerEl, innerEl) {
        // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked
        var reflowStyleProps = {
          position: 'relative',
          left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll

        };
        applyStyle(outerEl, reflowStyleProps);
        applyStyle(innerEl, reflowStyleProps);
        var diff = // grab the dimensions
        outerEl.getBoundingClientRect().height - innerEl.getBoundingClientRect().height; // undo hack

        var resetStyleProps = {
          position: '',
          left: ''
        };
        applyStyle(outerEl, resetStyleProps);
        applyStyle(innerEl, resetStyleProps);
        return diff;
      }
      /* Selection
      ----------------------------------------------------------------------------------------------------------------------*/


      function preventSelection(el) {
        el.classList.add('fc-unselectable');
        el.addEventListener('selectstart', preventDefault);
      }

      function allowSelection(el) {
        el.classList.remove('fc-unselectable');
        el.removeEventListener('selectstart', preventDefault);
      }
      /* Context Menu
      ----------------------------------------------------------------------------------------------------------------------*/


      function preventContextMenu(el) {
        el.addEventListener('contextmenu', preventDefault);
      }

      function allowContextMenu(el) {
        el.removeEventListener('contextmenu', preventDefault);
      }
      /* Object Ordering by Field
      ----------------------------------------------------------------------------------------------------------------------*/


      function parseFieldSpecs(input) {
        var specs = [];
        var tokens = [];
        var i;
        var token;

        if (typeof input === 'string') {
          tokens = input.split(/\s*,\s*/);
        } else if (typeof input === 'function') {
          tokens = [input];
        } else if (Array.isArray(input)) {
          tokens = input;
        }

        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];

          if (typeof token === 'string') {
            specs.push(token.charAt(0) === '-' ? {
              field: token.substring(1),
              order: -1
            } : {
              field: token,
              order: 1
            });
          } else if (typeof token === 'function') {
            specs.push({
              func: token
            });
          }
        }

        return specs;
      }

      function compareByFieldSpecs(obj0, obj1, fieldSpecs) {
        var i;
        var cmp;

        for (i = 0; i < fieldSpecs.length; i++) {
          cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);

          if (cmp) {
            return cmp;
          }
        }

        return 0;
      }

      function compareByFieldSpec(obj0, obj1, fieldSpec) {
        if (fieldSpec.func) {
          return fieldSpec.func(obj0, obj1);
        }

        return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field]) * (fieldSpec.order || 1);
      }

      function flexibleCompare(a, b) {
        if (!a && !b) {
          return 0;
        }

        if (b == null) {
          return -1;
        }

        if (a == null) {
          return 1;
        }

        if (typeof a === 'string' || typeof b === 'string') {
          return String(a).localeCompare(String(b));
        }

        return a - b;
      }
      /* String Utilities
      ----------------------------------------------------------------------------------------------------------------------*/


      function capitaliseFirstLetter(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      }

      function padStart(val, len) {
        var s = String(val);
        return '000'.substr(0, len - s.length) + s;
      }
      /* Number Utilities
      ----------------------------------------------------------------------------------------------------------------------*/


      function compareNumbers(a, b) {
        return a - b;
      }

      function isInt(n) {
        return n % 1 === 0;
      }
      /* Weird Utilities
      ----------------------------------------------------------------------------------------------------------------------*/


      function applyAll(functions, thisObj, args) {
        if (typeof functions === 'function') {
          // supplied a single function
          functions = [functions];
        }

        if (functions) {
          var i = void 0;
          var ret = void 0;

          for (i = 0; i < functions.length; i++) {
            ret = functions[i].apply(thisObj, args) || ret;
          }

          return ret;
        }
      }

      function firstDefined() {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        for (var i = 0; i < args.length; i++) {
          if (args[i] !== undefined) {
            return args[i];
          }
        }
      } // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      // https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714


      function debounce(func, wait) {
        var timeout;
        var args;
        var context;
        var timestamp;
        var result;

        var later = function later() {
          var last = new Date().valueOf() - timestamp;

          if (last < wait) {
            timeout = setTimeout(later, wait - last);
          } else {
            timeout = null;
            result = func.apply(context, args);
            context = args = null;
          }
        };

        return function () {
          context = this;
          args = arguments;
          timestamp = new Date().valueOf();

          if (!timeout) {
            timeout = setTimeout(later, wait);
          }

          return result;
        };
      } // Number and Boolean are only types that defaults or not computed for
      // TODO: write more comments


      function refineProps(rawProps, processors, defaults, leftoverProps) {
        if (defaults === void 0) {
          defaults = {};
        }

        var refined = {};

        for (var key in processors) {
          var processor = processors[key];

          if (rawProps[key] !== undefined) {
            // found
            if (processor === Function) {
              refined[key] = typeof rawProps[key] === 'function' ? rawProps[key] : null;
            } else if (processor) {
              // a refining function?
              refined[key] = processor(rawProps[key]);
            } else {
              refined[key] = rawProps[key];
            }
          } else if (defaults[key] !== undefined) {
            // there's an explicit default
            refined[key] = defaults[key];
          } else {
            // must compute a default
            if (processor === String) {
              refined[key] = ''; // empty string is default for String
            } else if (!processor || processor === Number || processor === Boolean || processor === Function) {
              refined[key] = null; // assign null for other non-custom processor funcs
            } else {
              refined[key] = processor(null); // run the custom processor func
            }
          }
        }

        if (leftoverProps) {
          for (var key in rawProps) {
            if (processors[key] === undefined) {
              leftoverProps[key] = rawProps[key];
            }
          }
        }

        return refined;
      }
      /* Date stuff that doesn't belong in datelib core
      ----------------------------------------------------------------------------------------------------------------------*/
      // given a timed range, computes an all-day range that has the same exact duration,
      // but whose start time is aligned with the start of the day.


      function computeAlignedDayRange(timedRange) {
        var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;
        var start = startOfDay(timedRange.start);
        var end = addDays(start, dayCnt);
        return {
          start: start,
          end: end
        };
      } // given a timed range, computes an all-day range based on how for the end date bleeds into the next day
      // TODO: give nextDayThreshold a default arg


      function computeVisibleDayRange(timedRange, nextDayThreshold) {
        if (nextDayThreshold === void 0) {
          nextDayThreshold = createDuration(0);
        }

        var startDay = null;
        var endDay = null;

        if (timedRange.end) {
          endDay = startOfDay(timedRange.end);
          var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`
          // If the end time is actually inclusively part of the next day and is equal to or
          // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
          // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.

          if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {
            endDay = addDays(endDay, 1);
          }
        }

        if (timedRange.start) {
          startDay = startOfDay(timedRange.start); // the beginning of the day the range starts
          // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.

          if (endDay && endDay <= startDay) {
            endDay = addDays(startDay, 1);
          }
        }

        return {
          start: startDay,
          end: endDay
        };
      } // spans from one day into another?


      function isMultiDayRange(range) {
        var visibleRange = computeVisibleDayRange(range);
        return diffDays(visibleRange.start, visibleRange.end) > 1;
      }

      function diffDates(date0, date1, dateEnv, largeUnit) {
        if (largeUnit === 'year') {
          return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');
        } else if (largeUnit === 'month') {
          return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');
        } else {
          return diffDayAndTime(date0, date1); // returns a duration
        }
      }
      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation.
      
      Permission to use, copy, modify, and/or distribute this software for any
      purpose with or without fee is hereby granted.
      
      THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
      REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
      INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
      LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
      OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.
      ***************************************************************************** */

      /* global Reflect, Promise */


      var _extendStatics = function extendStatics(d, b) {
        _extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return _extendStatics(d, b);
      };

      function __extends(d, b) {
        _extendStatics(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }

      var _assign = function __assign() {
        _assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }

          return t;
        };

        return _assign.apply(this, arguments);
      };

      function parseRecurring(eventInput, allDayDefault, dateEnv, recurringTypes, leftovers) {
        for (var i = 0; i < recurringTypes.length; i++) {
          var localLeftovers = {};
          var parsed = recurringTypes[i].parse(eventInput, localLeftovers, dateEnv);

          if (parsed) {
            var allDay = localLeftovers.allDay;
            delete localLeftovers.allDay; // remove from leftovers

            if (allDay == null) {
              allDay = allDayDefault;

              if (allDay == null) {
                allDay = parsed.allDayGuess;

                if (allDay == null) {
                  allDay = false;
                }
              }
            }

            _assign(leftovers, localLeftovers);

            return {
              allDay: allDay,
              duration: parsed.duration,
              typeData: parsed.typeData,
              typeId: i
            };
          }
        }

        return null;
      }
      /*
      Event MUST have a recurringDef
      */


      function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {
        var typeDef = recurringTypes[eventDef.recurringDef.typeId];
        var markers = typeDef.expand(eventDef.recurringDef.typeData, {
          start: dateEnv.subtract(framingRange.start, duration),
          end: framingRange.end
        }, dateEnv); // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to

        if (eventDef.allDay) {
          markers = markers.map(startOfDay);
        }

        return markers;
      }

      var hasOwnProperty = Object.prototype.hasOwnProperty; // Merges an array of objects into a single object.
      // The second argument allows for an array of property names who's object values will be merged together.

      function mergeProps(propObjs, complexProps) {
        var dest = {};
        var i;
        var name;
        var complexObjs;
        var j;
        var val;
        var props;

        if (complexProps) {
          for (i = 0; i < complexProps.length; i++) {
            name = complexProps[i];
            complexObjs = []; // collect the trailing object values, stopping when a non-object is discovered

            for (j = propObjs.length - 1; j >= 0; j--) {
              val = propObjs[j][name];

              if (typeof val === 'object' && val) {
                // non-null object
                complexObjs.unshift(val);
              } else if (val !== undefined) {
                dest[name] = val; // if there were no objects, this value will be used

                break;
              }
            } // if the trailing values were objects, use the merged value


            if (complexObjs.length) {
              dest[name] = mergeProps(complexObjs);
            }
          }
        } // copy values into the destination, going from last to first


        for (i = propObjs.length - 1; i >= 0; i--) {
          props = propObjs[i];

          for (name in props) {
            if (!(name in dest)) {
              // if already assigned by previous props or complex props, don't reassign
              dest[name] = props[name];
            }
          }
        }

        return dest;
      }

      function filterHash(hash, func) {
        var filtered = {};

        for (var key in hash) {
          if (func(hash[key], key)) {
            filtered[key] = hash[key];
          }
        }

        return filtered;
      }

      function mapHash(hash, func) {
        var newHash = {};

        for (var key in hash) {
          newHash[key] = func(hash[key], key);
        }

        return newHash;
      }

      function arrayToHash(a) {
        var hash = {};

        for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
          var item = a_1[_i];
          hash[item] = true;
        }

        return hash;
      }

      function hashValuesToArray(obj) {
        var a = [];

        for (var key in obj) {
          a.push(obj[key]);
        }

        return a;
      }

      function isPropsEqual(obj0, obj1) {
        for (var key in obj0) {
          if (hasOwnProperty.call(obj0, key)) {
            if (!(key in obj1)) {
              return false;
            }
          }
        }

        for (var key in obj1) {
          if (hasOwnProperty.call(obj1, key)) {
            if (obj0[key] !== obj1[key]) {
              return false;
            }
          }
        }

        return true;
      }

      function parseEvents(rawEvents, sourceId, calendar, allowOpenRange) {
        var eventStore = createEmptyEventStore();

        for (var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++) {
          var rawEvent = rawEvents_1[_i];
          var tuple = parseEvent(rawEvent, sourceId, calendar, allowOpenRange);

          if (tuple) {
            eventTupleToStore(tuple, eventStore);
          }
        }

        return eventStore;
      }

      function eventTupleToStore(tuple, eventStore) {
        if (eventStore === void 0) {
          eventStore = createEmptyEventStore();
        }

        eventStore.defs[tuple.def.defId] = tuple.def;

        if (tuple.instance) {
          eventStore.instances[tuple.instance.instanceId] = tuple.instance;
        }

        return eventStore;
      }

      function expandRecurring(eventStore, framingRange, calendar) {
        var dateEnv = calendar.dateEnv;
        var defs = eventStore.defs,
            instances = eventStore.instances; // remove existing recurring instances

        instances = filterHash(instances, function (instance) {
          return !defs[instance.defId].recurringDef;
        });

        for (var defId in defs) {
          var def = defs[defId];

          if (def.recurringDef) {
            var duration = def.recurringDef.duration;

            if (!duration) {
              duration = def.allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration;
            }

            var starts = expandRecurringRanges(def, duration, framingRange, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes);

            for (var _i = 0, starts_1 = starts; _i < starts_1.length; _i++) {
              var start = starts_1[_i];
              var instance = createEventInstance(defId, {
                start: start,
                end: dateEnv.add(start, duration)
              });
              instances[instance.instanceId] = instance;
            }
          }
        }

        return {
          defs: defs,
          instances: instances
        };
      } // retrieves events that have the same groupId as the instance specified by `instanceId`
      // or they are the same as the instance.
      // why might instanceId not be in the store? an event from another calendar?


      function getRelevantEvents(eventStore, instanceId) {
        var instance = eventStore.instances[instanceId];

        if (instance) {
          var def_1 = eventStore.defs[instance.defId]; // get events/instances with same group

          var newStore = filterEventStoreDefs(eventStore, function (lookDef) {
            return isEventDefsGrouped(def_1, lookDef);
          }); // add the original
          // TODO: wish we could use eventTupleToStore or something like it

          newStore.defs[def_1.defId] = def_1;
          newStore.instances[instance.instanceId] = instance;
          return newStore;
        }

        return createEmptyEventStore();
      }

      function isEventDefsGrouped(def0, def1) {
        return Boolean(def0.groupId && def0.groupId === def1.groupId);
      }

      function transformRawEvents(rawEvents, eventSource, calendar) {
        var calEachTransform = calendar.opt('eventDataTransform');
        var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;

        if (sourceEachTransform) {
          rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);
        }

        if (calEachTransform) {
          rawEvents = transformEachRawEvent(rawEvents, calEachTransform);
        }

        return rawEvents;
      }

      function transformEachRawEvent(rawEvents, func) {
        var refinedEvents;

        if (!func) {
          refinedEvents = rawEvents;
        } else {
          refinedEvents = [];

          for (var _i = 0, rawEvents_2 = rawEvents; _i < rawEvents_2.length; _i++) {
            var rawEvent = rawEvents_2[_i];
            var refinedEvent = func(rawEvent);

            if (refinedEvent) {
              refinedEvents.push(refinedEvent);
            } else if (refinedEvent == null) {
              refinedEvents.push(rawEvent);
            } // if a different falsy value, do nothing

          }
        }

        return refinedEvents;
      }

      function createEmptyEventStore() {
        return {
          defs: {},
          instances: {}
        };
      }

      function mergeEventStores(store0, store1) {
        return {
          defs: _assign({}, store0.defs, store1.defs),
          instances: _assign({}, store0.instances, store1.instances)
        };
      }

      function filterEventStoreDefs(eventStore, filterFunc) {
        var defs = filterHash(eventStore.defs, filterFunc);
        var instances = filterHash(eventStore.instances, function (instance) {
          return defs[instance.defId]; // still exists?
        });
        return {
          defs: defs,
          instances: instances
        };
      }

      function parseRange(input, dateEnv) {
        var start = null;
        var end = null;

        if (input.start) {
          start = dateEnv.createMarker(input.start);
        }

        if (input.end) {
          end = dateEnv.createMarker(input.end);
        }

        if (!start && !end) {
          return null;
        }

        if (start && end && end < start) {
          return null;
        }

        return {
          start: start,
          end: end
        };
      } // SIDE-EFFECT: will mutate ranges.
      // Will return a new array result.


      function invertRanges(ranges, constraintRange) {
        var invertedRanges = [];
        var start = constraintRange.start; // the end of the previous range. the start of the new range

        var i;
        var dateRange; // ranges need to be in order. required for our date-walking algorithm

        ranges.sort(compareRanges);

        for (i = 0; i < ranges.length; i++) {
          dateRange = ranges[i]; // add the span of time before the event (if there is any)

          if (dateRange.start > start) {
            // compare millisecond time (skip any ambig logic)
            invertedRanges.push({
              start: start,
              end: dateRange.start
            });
          }

          if (dateRange.end > start) {
            start = dateRange.end;
          }
        } // add the span of time after the last event (if there is any)


        if (start < constraintRange.end) {
          // compare millisecond time (skip any ambig logic)
          invertedRanges.push({
            start: start,
            end: constraintRange.end
          });
        }

        return invertedRanges;
      }

      function compareRanges(range0, range1) {
        return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first
      }

      function intersectRanges(range0, range1) {
        var start = range0.start;
        var end = range0.end;
        var newRange = null;

        if (range1.start !== null) {
          if (start === null) {
            start = range1.start;
          } else {
            start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));
          }
        }

        if (range1.end != null) {
          if (end === null) {
            end = range1.end;
          } else {
            end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));
          }
        }

        if (start === null || end === null || start < end) {
          newRange = {
            start: start,
            end: end
          };
        }

        return newRange;
      }

      function rangesEqual(range0, range1) {
        return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) && (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());
      }

      function rangesIntersect(range0, range1) {
        return (range0.end === null || range1.start === null || range0.end > range1.start) && (range0.start === null || range1.end === null || range0.start < range1.end);
      }

      function rangeContainsRange(outerRange, innerRange) {
        return (outerRange.start === null || innerRange.start !== null && innerRange.start >= outerRange.start) && (outerRange.end === null || innerRange.end !== null && innerRange.end <= outerRange.end);
      }

      function rangeContainsMarker(range, date) {
        return (range.start === null || date >= range.start) && (range.end === null || date < range.end);
      } // If the given date is not within the given range, move it inside.
      // (If it's past the end, make it one millisecond before the end).


      function constrainMarkerToRange(date, range) {
        if (range.start != null && date < range.start) {
          return range.start;
        }

        if (range.end != null && date >= range.end) {
          return new Date(range.end.valueOf() - 1);
        }

        return date;
      }

      function removeExact(array, exactVal) {
        var removeCnt = 0;
        var i = 0;

        while (i < array.length) {
          if (array[i] === exactVal) {
            array.splice(i, 1);
            removeCnt++;
          } else {
            i++;
          }
        }

        return removeCnt;
      }

      function isArraysEqual(a0, a1) {
        var len = a0.length;
        var i;

        if (len !== a1.length) {
          // not array? or not same length?
          return false;
        }

        for (i = 0; i < len; i++) {
          if (a0[i] !== a1[i]) {
            return false;
          }
        }

        return true;
      }

      function memoize(workerFunc) {
        var args;
        var res;
        return function () {
          if (!args || !isArraysEqual(args, arguments)) {
            args = arguments;
            res = workerFunc.apply(this, arguments);
          }

          return res;
        };
      }
      /*
      always executes the workerFunc, but if the result is equal to the previous result,
      return the previous result instead.
      */


      function memoizeOutput(workerFunc, equalityFunc) {
        var cachedRes = null;
        return function () {
          var newRes = workerFunc.apply(this, arguments);

          if (cachedRes === null || !(cachedRes === newRes || equalityFunc(cachedRes, newRes))) {
            cachedRes = newRes;
          }

          return cachedRes;
        };
      }

      var EXTENDED_SETTINGS_AND_SEVERITIES = {
        week: 3,
        separator: 0,
        omitZeroMinute: 0,
        meridiem: 0,
        omitCommas: 0
      };
      var STANDARD_DATE_PROP_SEVERITIES = {
        timeZoneName: 7,
        era: 6,
        year: 5,
        month: 4,
        day: 2,
        weekday: 2,
        hour: 1,
        minute: 1,
        second: 1
      };
      var MERIDIEM_RE = /\s*([ap])\.?m\.?/i; // eats up leading spaces too

      var COMMA_RE = /,/g; // we need re for globalness

      var MULTI_SPACE_RE = /\s+/g;
      var LTR_RE = /\u200e/g; // control character

      var UTC_RE = /UTC|GMT/;

      var NativeFormatter =
      /** @class */
      function () {
        function NativeFormatter(formatSettings) {
          var standardDateProps = {};
          var extendedSettings = {};
          var severity = 0;

          for (var name_1 in formatSettings) {
            if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {
              extendedSettings[name_1] = formatSettings[name_1];
              severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);
            } else {
              standardDateProps[name_1] = formatSettings[name_1];

              if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {
                severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);
              }
            }
          }

          this.standardDateProps = standardDateProps;
          this.extendedSettings = extendedSettings;
          this.severity = severity;
          this.buildFormattingFunc = memoize(buildFormattingFunc);
        }

        NativeFormatter.prototype.format = function (date, context) {
          return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);
        };

        NativeFormatter.prototype.formatRange = function (start, end, context) {
          var _a = this,
              standardDateProps = _a.standardDateProps,
              extendedSettings = _a.extendedSettings;

          var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);

          if (!diffSeverity) {
            return this.format(start, context);
          }

          var biggestUnitForPartial = diffSeverity;

          if (biggestUnitForPartial > 1 && ( // the two dates are different in a way that's larger scale than time
          standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') && (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') && (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {
            biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time
          }

          var full0 = this.format(start, context);
          var full1 = this.format(end, context);

          if (full0 === full1) {
            return full0;
          }

          var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);
          var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);
          var partial0 = partialFormattingFunc(start);
          var partial1 = partialFormattingFunc(end);
          var insertion = findCommonInsertion(full0, partial0, full1, partial1);
          var separator = extendedSettings.separator || '';

          if (insertion) {
            return insertion.before + partial0 + separator + partial1 + insertion.after;
          }

          return full0 + separator + full1;
        };

        NativeFormatter.prototype.getLargestUnit = function () {
          switch (this.severity) {
            case 7:
            case 6:
            case 5:
              return 'year';

            case 4:
              return 'month';

            case 3:
              return 'week';

            default:
              return 'day';
          }
        };

        return NativeFormatter;
      }();

      function buildFormattingFunc(standardDateProps, extendedSettings, context) {
        var standardDatePropCnt = Object.keys(standardDateProps).length;

        if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {
          return function (date) {
            return formatTimeZoneOffset(date.timeZoneOffset);
          };
        }

        if (standardDatePropCnt === 0 && extendedSettings.week) {
          return function (date) {
            return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekLabel, context.locale, extendedSettings.week);
          };
        }

        return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);
      }

      function buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {
        standardDateProps = _assign({}, standardDateProps); // copy

        extendedSettings = _assign({}, extendedSettings); // copy

        sanitizeSettings(standardDateProps, extendedSettings);
        standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers

        var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);
        var zeroFormat; // needed?

        if (extendedSettings.omitZeroMinute) {
          var zeroProps = _assign({}, standardDateProps);

          delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings

          zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);
        }

        return function (date) {
          var marker = date.marker;
          var format;

          if (zeroFormat && !marker.getUTCMinutes()) {
            format = zeroFormat;
          } else {
            format = normalFormat;
          }

          var s = format.format(marker);
          return postProcess(s, date, standardDateProps, extendedSettings, context);
        };
      }

      function sanitizeSettings(standardDateProps, extendedSettings) {
        // deal with a browser inconsistency where formatting the timezone
        // requires that the hour/minute be present.
        if (standardDateProps.timeZoneName) {
          if (!standardDateProps.hour) {
            standardDateProps.hour = '2-digit';
          }

          if (!standardDateProps.minute) {
            standardDateProps.minute = '2-digit';
          }
        } // only support short timezone names


        if (standardDateProps.timeZoneName === 'long') {
          standardDateProps.timeZoneName = 'short';
        } // if requesting to display seconds, MUST display minutes


        if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {
          delete extendedSettings.omitZeroMinute;
        }
      }

      function postProcess(s, date, standardDateProps, extendedSettings, context) {
        s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes

        if (standardDateProps.timeZoneName === 'short') {
          s = injectTzoStr(s, context.timeZone === 'UTC' || date.timeZoneOffset == null ? 'UTC' : // important to normalize for IE, which does "GMT"
          formatTimeZoneOffset(date.timeZoneOffset));
        }

        if (extendedSettings.omitCommas) {
          s = s.replace(COMMA_RE, '').trim();
        }

        if (extendedSettings.omitZeroMinute) {
          s = s.replace(':00', ''); // zeroFormat doesn't always achieve this
        } // ^ do anything that might create adjacent spaces before this point,
        // because MERIDIEM_RE likes to eat up loading spaces


        if (extendedSettings.meridiem === false) {
          s = s.replace(MERIDIEM_RE, '').trim();
        } else if (extendedSettings.meridiem === 'narrow') {
          // a/p
          s = s.replace(MERIDIEM_RE, function (m0, m1) {
            return m1.toLocaleLowerCase();
          });
        } else if (extendedSettings.meridiem === 'short') {
          // am/pm
          s = s.replace(MERIDIEM_RE, function (m0, m1) {
            return m1.toLocaleLowerCase() + 'm';
          });
        } else if (extendedSettings.meridiem === 'lowercase') {
          // other meridiem transformers already converted to lowercase
          s = s.replace(MERIDIEM_RE, function (m0) {
            return m0.toLocaleLowerCase();
          });
        }

        s = s.replace(MULTI_SPACE_RE, ' ');
        s = s.trim();
        return s;
      }

      function injectTzoStr(s, tzoStr) {
        var replaced = false;
        s = s.replace(UTC_RE, function () {
          replaced = true;
          return tzoStr;
        }); // IE11 doesn't include UTC/GMT in the original string, so append to end

        if (!replaced) {
          s += ' ' + tzoStr;
        }

        return s;
      }

      function formatWeekNumber(num, weekLabel, locale, display) {
        var parts = [];

        if (display === 'narrow') {
          parts.push(weekLabel);
        } else if (display === 'short') {
          parts.push(weekLabel, ' ');
        } // otherwise, considered 'numeric'


        parts.push(locale.simpleNumberFormat.format(num));

        if (locale.options.isRtl) {
          // TODO: use control characters instead?
          parts.reverse();
        }

        return parts.join('');
      } // Range Formatting Utils
      // 0 = exactly the same
      // 1 = different by time
      // and bigger


      function computeMarkerDiffSeverity(d0, d1, ca) {
        if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {
          return 5;
        }

        if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {
          return 4;
        }

        if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {
          return 2;
        }

        if (timeAsMs(d0) !== timeAsMs(d1)) {
          return 1;
        }

        return 0;
      }

      function computePartialFormattingOptions(options, biggestUnit) {
        var partialOptions = {};

        for (var name_2 in options) {
          if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)
          STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {
            partialOptions[name_2] = options[name_2];
          }
        }

        return partialOptions;
      }

      function findCommonInsertion(full0, partial0, full1, partial1) {
        var i0 = 0;

        while (i0 < full0.length) {
          var found0 = full0.indexOf(partial0, i0);

          if (found0 === -1) {
            break;
          }

          var before0 = full0.substr(0, found0);
          i0 = found0 + partial0.length;
          var after0 = full0.substr(i0);
          var i1 = 0;

          while (i1 < full1.length) {
            var found1 = full1.indexOf(partial1, i1);

            if (found1 === -1) {
              break;
            }

            var before1 = full1.substr(0, found1);
            i1 = found1 + partial1.length;
            var after1 = full1.substr(i1);

            if (before0 === before1 && after0 === after1) {
              return {
                before: before0,
                after: after0
              };
            }
          }
        }

        return null;
      }
      /*
      TODO: fix the terminology of "formatter" vs "formatting func"
      */

      /*
      At the time of instantiation, this object does not know which cmd-formatting system it will use.
      It receives this at the time of formatting, as a setting.
      */


      var CmdFormatter =
      /** @class */
      function () {
        function CmdFormatter(cmdStr, separator) {
          this.cmdStr = cmdStr;
          this.separator = separator;
        }

        CmdFormatter.prototype.format = function (date, context) {
          return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, this.separator));
        };

        CmdFormatter.prototype.formatRange = function (start, end, context) {
          return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, this.separator));
        };

        return CmdFormatter;
      }();

      var FuncFormatter =
      /** @class */
      function () {
        function FuncFormatter(func) {
          this.func = func;
        }

        FuncFormatter.prototype.format = function (date, context) {
          return this.func(createVerboseFormattingArg(date, null, context));
        };

        FuncFormatter.prototype.formatRange = function (start, end, context) {
          return this.func(createVerboseFormattingArg(start, end, context));
        };

        return FuncFormatter;
      }(); // Formatter Object Creation


      function createFormatter(input, defaultSeparator) {
        if (typeof input === 'object' && input) {
          // non-null object
          if (typeof defaultSeparator === 'string') {
            input = _assign({
              separator: defaultSeparator
            }, input);
          }

          return new NativeFormatter(input);
        } else if (typeof input === 'string') {
          return new CmdFormatter(input, defaultSeparator);
        } else if (typeof input === 'function') {
          return new FuncFormatter(input);
        }
      } // String Utils
      // timeZoneOffset is in minutes


      function buildIsoString(marker, timeZoneOffset, stripZeroTime) {
        if (stripZeroTime === void 0) {
          stripZeroTime = false;
        }

        var s = marker.toISOString();
        s = s.replace('.000', '');

        if (stripZeroTime) {
          s = s.replace('T00:00:00Z', '');
        }

        if (s.length > 10) {
          // time part wasn't stripped, can add timezone info
          if (timeZoneOffset == null) {
            s = s.replace('Z', '');
          } else if (timeZoneOffset !== 0) {
            s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));
          } // otherwise, its UTC-0 and we want to keep the Z

        }

        return s;
      }

      function formatIsoTimeString(marker) {
        return padStart(marker.getUTCHours(), 2) + ':' + padStart(marker.getUTCMinutes(), 2) + ':' + padStart(marker.getUTCSeconds(), 2);
      }

      function formatTimeZoneOffset(minutes, doIso) {
        if (doIso === void 0) {
          doIso = false;
        }

        var sign = minutes < 0 ? '-' : '+';
        var abs = Math.abs(minutes);
        var hours = Math.floor(abs / 60);
        var mins = Math.round(abs % 60);

        if (doIso) {
          return sign + padStart(hours, 2) + ':' + padStart(mins, 2);
        } else {
          return 'GMT' + sign + hours + (mins ? ':' + padStart(mins, 2) : '');
        }
      } // Arg Utils


      function createVerboseFormattingArg(start, end, context, separator) {
        var startInfo = expandZonedMarker(start, context.calendarSystem);
        var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;
        return {
          date: startInfo,
          start: startInfo,
          end: endInfo,
          timeZone: context.timeZone,
          localeCodes: context.locale.codes,
          separator: separator
        };
      }

      function expandZonedMarker(dateInfo, calendarSystem) {
        var a = calendarSystem.markerToArray(dateInfo.marker);
        return {
          marker: dateInfo.marker,
          timeZoneOffset: dateInfo.timeZoneOffset,
          array: a,
          year: a[0],
          month: a[1],
          day: a[2],
          hour: a[3],
          minute: a[4],
          second: a[5],
          millisecond: a[6]
        };
      }

      var EventSourceApi =
      /** @class */
      function () {
        function EventSourceApi(calendar, internalEventSource) {
          this.calendar = calendar;
          this.internalEventSource = internalEventSource;
        }

        EventSourceApi.prototype.remove = function () {
          this.calendar.dispatch({
            type: 'REMOVE_EVENT_SOURCE',
            sourceId: this.internalEventSource.sourceId
          });
        };

        EventSourceApi.prototype.refetch = function () {
          this.calendar.dispatch({
            type: 'FETCH_EVENT_SOURCES',
            sourceIds: [this.internalEventSource.sourceId]
          });
        };

        Object.defineProperty(EventSourceApi.prototype, "id", {
          get: function get() {
            return this.internalEventSource.publicId;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventSourceApi.prototype, "url", {
          // only relevant to json-feed event sources
          get: function get() {
            return this.internalEventSource.meta.url;
          },
          enumerable: true,
          configurable: true
        });
        return EventSourceApi;
      }();

      var EventApi =
      /** @class */
      function () {
        function EventApi(calendar, def, instance) {
          this._calendar = calendar;
          this._def = def;
          this._instance = instance || null;
        }
        /*
        TODO: make event struct more responsible for this
        */


        EventApi.prototype.setProp = function (name, val) {
          var _a, _b;

          if (name in DATE_PROPS) ;else if (name in NON_DATE_PROPS) {
            if (typeof NON_DATE_PROPS[name] === 'function') {
              val = NON_DATE_PROPS[name](val);
            }

            this.mutate({
              standardProps: (_a = {}, _a[name] = val, _a)
            });
          } else if (name in UNSCOPED_EVENT_UI_PROPS) {
            var ui = void 0;

            if (typeof UNSCOPED_EVENT_UI_PROPS[name] === 'function') {
              val = UNSCOPED_EVENT_UI_PROPS[name](val);
            }

            if (name === 'color') {
              ui = {
                backgroundColor: val,
                borderColor: val
              };
            } else if (name === 'editable') {
              ui = {
                startEditable: val,
                durationEditable: val
              };
            } else {
              ui = (_b = {}, _b[name] = val, _b);
            }

            this.mutate({
              standardProps: {
                ui: ui
              }
            });
          }
        };

        EventApi.prototype.setExtendedProp = function (name, val) {
          var _a;

          this.mutate({
            extendedProps: (_a = {}, _a[name] = val, _a)
          });
        };

        EventApi.prototype.setStart = function (startInput, options) {
          if (options === void 0) {
            options = {};
          }

          var dateEnv = this._calendar.dateEnv;
          var start = dateEnv.createMarker(startInput);

          if (start && this._instance) {
            // TODO: warning if parsed bad
            var instanceRange = this._instance.range;
            var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?

            if (options.maintainDuration) {
              this.mutate({
                datesDelta: startDelta
              });
            } else {
              this.mutate({
                startDelta: startDelta
              });
            }
          }
        };

        EventApi.prototype.setEnd = function (endInput, options) {
          if (options === void 0) {
            options = {};
          }

          var dateEnv = this._calendar.dateEnv;
          var end;

          if (endInput != null) {
            end = dateEnv.createMarker(endInput);

            if (!end) {
              return; // TODO: warning if parsed bad
            }
          }

          if (this._instance) {
            if (end) {
              var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);
              this.mutate({
                endDelta: endDelta
              });
            } else {
              this.mutate({
                standardProps: {
                  hasEnd: false
                }
              });
            }
          }
        };

        EventApi.prototype.setDates = function (startInput, endInput, options) {
          if (options === void 0) {
            options = {};
          }

          var dateEnv = this._calendar.dateEnv;
          var standardProps = {
            allDay: options.allDay
          };
          var start = dateEnv.createMarker(startInput);
          var end;

          if (!start) {
            return; // TODO: warning if parsed bad
          }

          if (endInput != null) {
            end = dateEnv.createMarker(endInput);

            if (!end) {
              // TODO: warning if parsed bad
              return;
            }
          }

          if (this._instance) {
            var instanceRange = this._instance.range; // when computing the diff for an event being converted to all-day,
            // compute diff off of the all-day values the way event-mutation does.

            if (options.allDay === true) {
              instanceRange = computeAlignedDayRange(instanceRange);
            }

            var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);

            if (end) {
              var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);

              if (durationsEqual(startDelta, endDelta)) {
                this.mutate({
                  datesDelta: startDelta,
                  standardProps: standardProps
                });
              } else {
                this.mutate({
                  startDelta: startDelta,
                  endDelta: endDelta,
                  standardProps: standardProps
                });
              }
            } else {
              // means "clear the end"
              standardProps.hasEnd = false;
              this.mutate({
                datesDelta: startDelta,
                standardProps: standardProps
              });
            }
          }
        };

        EventApi.prototype.moveStart = function (deltaInput) {
          var delta = createDuration(deltaInput);

          if (delta) {
            // TODO: warning if parsed bad
            this.mutate({
              startDelta: delta
            });
          }
        };

        EventApi.prototype.moveEnd = function (deltaInput) {
          var delta = createDuration(deltaInput);

          if (delta) {
            // TODO: warning if parsed bad
            this.mutate({
              endDelta: delta
            });
          }
        };

        EventApi.prototype.moveDates = function (deltaInput) {
          var delta = createDuration(deltaInput);

          if (delta) {
            // TODO: warning if parsed bad
            this.mutate({
              datesDelta: delta
            });
          }
        };

        EventApi.prototype.setAllDay = function (allDay, options) {
          if (options === void 0) {
            options = {};
          }

          var standardProps = {
            allDay: allDay
          };
          var maintainDuration = options.maintainDuration;

          if (maintainDuration == null) {
            maintainDuration = this._calendar.opt('allDayMaintainDuration');
          }

          if (this._def.allDay !== allDay) {
            standardProps.hasEnd = maintainDuration;
          }

          this.mutate({
            standardProps: standardProps
          });
        };

        EventApi.prototype.formatRange = function (formatInput) {
          var dateEnv = this._calendar.dateEnv;
          var instance = this._instance;
          var formatter = createFormatter(formatInput, this._calendar.opt('defaultRangeSeparator'));

          if (this._def.hasEnd) {
            return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {
              forcedStartTzo: instance.forcedStartTzo,
              forcedEndTzo: instance.forcedEndTzo
            });
          } else {
            return dateEnv.format(instance.range.start, formatter, {
              forcedTzo: instance.forcedStartTzo
            });
          }
        };

        EventApi.prototype.mutate = function (mutation) {
          var def = this._def;
          var instance = this._instance;

          if (instance) {
            this._calendar.dispatch({
              type: 'MUTATE_EVENTS',
              instanceId: instance.instanceId,
              mutation: mutation,
              fromApi: true
            });

            var eventStore = this._calendar.state.eventStore;
            this._def = eventStore.defs[def.defId];
            this._instance = eventStore.instances[instance.instanceId];
          }
        };

        EventApi.prototype.remove = function () {
          this._calendar.dispatch({
            type: 'REMOVE_EVENT_DEF',
            defId: this._def.defId
          });
        };

        Object.defineProperty(EventApi.prototype, "source", {
          get: function get() {
            var sourceId = this._def.sourceId;

            if (sourceId) {
              return new EventSourceApi(this._calendar, this._calendar.state.eventSources[sourceId]);
            }

            return null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "start", {
          get: function get() {
            return this._instance ? this._calendar.dateEnv.toDate(this._instance.range.start) : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "end", {
          get: function get() {
            return this._instance && this._def.hasEnd ? this._calendar.dateEnv.toDate(this._instance.range.end) : null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "id", {
          // computable props that all access the def
          // TODO: find a TypeScript-compatible way to do this at scale
          get: function get() {
            return this._def.publicId;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "groupId", {
          get: function get() {
            return this._def.groupId;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "allDay", {
          get: function get() {
            return this._def.allDay;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "title", {
          get: function get() {
            return this._def.title;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "url", {
          get: function get() {
            return this._def.url;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "rendering", {
          get: function get() {
            return this._def.rendering;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "startEditable", {
          get: function get() {
            return this._def.ui.startEditable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "durationEditable", {
          get: function get() {
            return this._def.ui.durationEditable;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "constraint", {
          get: function get() {
            return this._def.ui.constraints[0] || null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "overlap", {
          get: function get() {
            return this._def.ui.overlap;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "allow", {
          get: function get() {
            return this._def.ui.allows[0] || null;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "backgroundColor", {
          get: function get() {
            return this._def.ui.backgroundColor;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "borderColor", {
          get: function get() {
            return this._def.ui.borderColor;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "textColor", {
          get: function get() {
            return this._def.ui.textColor;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "classNames", {
          // NOTE: user can't modify these because Object.freeze was called in event-def parsing
          get: function get() {
            return this._def.ui.classNames;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(EventApi.prototype, "extendedProps", {
          get: function get() {
            return this._def.extendedProps;
          },
          enumerable: true,
          configurable: true
        });
        return EventApi;
      }();
      /*
      Specifying nextDayThreshold signals that all-day ranges should be sliced.
      */


      function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {
        var inverseBgByGroupId = {};
        var inverseBgByDefId = {};
        var defByGroupId = {};
        var bgRanges = [];
        var fgRanges = [];
        var eventUis = compileEventUis(eventStore.defs, eventUiBases);

        for (var defId in eventStore.defs) {
          var def = eventStore.defs[defId];

          if (def.rendering === 'inverse-background') {
            if (def.groupId) {
              inverseBgByGroupId[def.groupId] = [];

              if (!defByGroupId[def.groupId]) {
                defByGroupId[def.groupId] = def;
              }
            } else {
              inverseBgByDefId[defId] = [];
            }
          }
        }

        for (var instanceId in eventStore.instances) {
          var instance = eventStore.instances[instanceId];
          var def = eventStore.defs[instance.defId];
          var ui = eventUis[def.defId];
          var origRange = instance.range;
          var normalRange = !def.allDay && nextDayThreshold ? computeVisibleDayRange(origRange, nextDayThreshold) : origRange;
          var slicedRange = intersectRanges(normalRange, framingRange);

          if (slicedRange) {
            if (def.rendering === 'inverse-background') {
              if (def.groupId) {
                inverseBgByGroupId[def.groupId].push(slicedRange);
              } else {
                inverseBgByDefId[instance.defId].push(slicedRange);
              }
            } else {
              (def.rendering === 'background' ? bgRanges : fgRanges).push({
                def: def,
                ui: ui,
                instance: instance,
                range: slicedRange,
                isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),
                isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()
              });
            }
          }
        }

        for (var groupId in inverseBgByGroupId) {
          // BY GROUP
          var ranges = inverseBgByGroupId[groupId];
          var invertedRanges = invertRanges(ranges, framingRange);

          for (var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++) {
            var invertedRange = invertedRanges_1[_i];
            var def = defByGroupId[groupId];
            var ui = eventUis[def.defId];
            bgRanges.push({
              def: def,
              ui: ui,
              instance: null,
              range: invertedRange,
              isStart: false,
              isEnd: false
            });
          }
        }

        for (var defId in inverseBgByDefId) {
          var ranges = inverseBgByDefId[defId];
          var invertedRanges = invertRanges(ranges, framingRange);

          for (var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++) {
            var invertedRange = invertedRanges_2[_a];
            bgRanges.push({
              def: eventStore.defs[defId],
              ui: eventUis[defId],
              instance: null,
              range: invertedRange,
              isStart: false,
              isEnd: false
            });
          }
        }

        return {
          bg: bgRanges,
          fg: fgRanges
        };
      }

      function hasBgRendering(def) {
        return def.rendering === 'background' || def.rendering === 'inverse-background';
      }

      function filterSegsViaEls(context, segs, isMirror) {
        var calendar = context.calendar,
            view = context.view;

        if (calendar.hasPublicHandlers('eventRender')) {
          segs = segs.filter(function (seg) {
            var custom = calendar.publiclyTrigger('eventRender', [{
              event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
              isMirror: isMirror,
              isStart: seg.isStart,
              isEnd: seg.isEnd,
              // TODO: include seg.range once all components consistently generate it
              el: seg.el,
              view: view
            }]);

            if (custom === false) {
              // means don't render at all
              return false;
            } else if (custom && custom !== true) {
              seg.el = custom;
            }

            return true;
          });
        }

        for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
          var seg = segs_1[_i];
          setElSeg(seg.el, seg);
        }

        return segs;
      }

      function setElSeg(el, seg) {
        el.fcSeg = seg;
      }

      function getElSeg(el) {
        return el.fcSeg || null;
      } // event ui computation


      function compileEventUis(eventDefs, eventUiBases) {
        return mapHash(eventDefs, function (eventDef) {
          return compileEventUi(eventDef, eventUiBases);
        });
      }

      function compileEventUi(eventDef, eventUiBases) {
        var uis = [];

        if (eventUiBases['']) {
          uis.push(eventUiBases['']);
        }

        if (eventUiBases[eventDef.defId]) {
          uis.push(eventUiBases[eventDef.defId]);
        }

        uis.push(eventDef.ui);
        return combineEventUis(uis);
      } // triggers


      function triggerRenderedSegs(context, segs, isMirrors) {
        var calendar = context.calendar,
            view = context.view;

        if (calendar.hasPublicHandlers('eventPositioned')) {
          for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
            var seg = segs_2[_i];
            calendar.publiclyTriggerAfterSizing('eventPositioned', [{
              event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
              isMirror: isMirrors,
              isStart: seg.isStart,
              isEnd: seg.isEnd,
              el: seg.el,
              view: view
            }]);
          }
        }

        if (!calendar.state.eventSourceLoadingLevel) {
          // avoid initial empty state while pending
          calendar.afterSizingTriggers._eventsPositioned = [null]; // fire once
        }
      }

      function triggerWillRemoveSegs(context, segs, isMirrors) {
        var calendar = context.calendar,
            view = context.view;

        for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {
          var seg = segs_3[_i];
          calendar.trigger('eventElRemove', seg.el);
        }

        if (calendar.hasPublicHandlers('eventDestroy')) {
          for (var _a = 0, segs_4 = segs; _a < segs_4.length; _a++) {
            var seg = segs_4[_a];
            calendar.publiclyTrigger('eventDestroy', [{
              event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
              isMirror: isMirrors,
              el: seg.el,
              view: view
            }]);
          }
        }
      } // is-interactable


      function computeEventDraggable(context, eventDef, eventUi) {
        var calendar = context.calendar,
            view = context.view;
        var transformers = calendar.pluginSystem.hooks.isDraggableTransformers;
        var val = eventUi.startEditable;

        for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
          var transformer = transformers_1[_i];
          val = transformer(val, eventDef, eventUi, view);
        }

        return val;
      }

      function computeEventStartResizable(context, eventDef, eventUi) {
        return eventUi.durationEditable && context.options.eventResizableFromStart;
      }

      function computeEventEndResizable(context, eventDef, eventUi) {
        return eventUi.durationEditable;
      } // applies the mutation to ALL defs/instances within the event store


      function applyMutationToEventStore(eventStore, eventConfigBase, mutation, calendar) {
        var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);
        var dest = createEmptyEventStore();

        for (var defId in eventStore.defs) {
          var def = eventStore.defs[defId];
          dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, calendar.pluginSystem.hooks.eventDefMutationAppliers, calendar);
        }

        for (var instanceId in eventStore.instances) {
          var instance = eventStore.instances[instanceId];
          var def = dest.defs[instance.defId]; // important to grab the newly modified def

          dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, calendar);
        }

        return dest;
      }

      function applyMutationToEventDef(eventDef, eventConfig, mutation, appliers, calendar) {
        var standardProps = mutation.standardProps || {}; // if hasEnd has not been specified, guess a good value based on deltas.
        // if duration will change, there's no way the default duration will persist,
        // and thus, we need to mark the event as having a real end

        if (standardProps.hasEnd == null && eventConfig.durationEditable && (mutation.startDelta || mutation.endDelta)) {
          standardProps.hasEnd = true; // TODO: is this mutation okay?
        }

        var copy = _assign({}, eventDef, standardProps, {
          ui: _assign({}, eventDef.ui, standardProps.ui)
        });

        if (mutation.extendedProps) {
          copy.extendedProps = _assign({}, copy.extendedProps, mutation.extendedProps);
        }

        for (var _i = 0, appliers_1 = appliers; _i < appliers_1.length; _i++) {
          var applier = appliers_1[_i];
          applier(copy, mutation, calendar);
        }

        if (!copy.hasEnd && calendar.opt('forceEventDuration')) {
          copy.hasEnd = true;
        }

        return copy;
      }

      function applyMutationToEventInstance(eventInstance, eventDef, // must first be modified by applyMutationToEventDef
      eventConfig, mutation, calendar) {
        var dateEnv = calendar.dateEnv;
        var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;
        var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;

        var copy = _assign({}, eventInstance);

        if (forceAllDay) {
          copy.range = computeAlignedDayRange(copy.range);
        }

        if (mutation.datesDelta && eventConfig.startEditable) {
          copy.range = {
            start: dateEnv.add(copy.range.start, mutation.datesDelta),
            end: dateEnv.add(copy.range.end, mutation.datesDelta)
          };
        }

        if (mutation.startDelta && eventConfig.durationEditable) {
          copy.range = {
            start: dateEnv.add(copy.range.start, mutation.startDelta),
            end: copy.range.end
          };
        }

        if (mutation.endDelta && eventConfig.durationEditable) {
          copy.range = {
            start: copy.range.start,
            end: dateEnv.add(copy.range.end, mutation.endDelta)
          };
        }

        if (clearEnd) {
          copy.range = {
            start: copy.range.start,
            end: calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start)
          };
        } // in case event was all-day but the supplied deltas were not
        // better util for this?


        if (eventDef.allDay) {
          copy.range = {
            start: startOfDay(copy.range.start),
            end: startOfDay(copy.range.end)
          };
        } // handle invalid durations


        if (copy.range.end < copy.range.start) {
          copy.range.end = calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start);
        }

        return copy;
      }

      function reduceEventStore(eventStore, action, eventSources, dateProfile, calendar) {
        switch (action.type) {
          case 'RECEIVE_EVENTS':
            // raw
            return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, calendar);

          case 'ADD_EVENTS':
            // already parsed, but not expanded
            return addEvent(eventStore, action.eventStore, // new ones
            dateProfile ? dateProfile.activeRange : null, calendar);

          case 'MERGE_EVENTS':
            // already parsed and expanded
            return mergeEventStores(eventStore, action.eventStore);

          case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

          case 'NEXT':
          case 'SET_DATE':
          case 'SET_VIEW_TYPE':
            if (dateProfile) {
              return expandRecurring(eventStore, dateProfile.activeRange, calendar);
            } else {
              return eventStore;
            }

          case 'CHANGE_TIMEZONE':
            return rezoneDates(eventStore, action.oldDateEnv, calendar.dateEnv);

          case 'MUTATE_EVENTS':
            return applyMutationToRelated(eventStore, action.instanceId, action.mutation, action.fromApi, calendar);

          case 'REMOVE_EVENT_INSTANCES':
            return excludeInstances(eventStore, action.instances);

          case 'REMOVE_EVENT_DEF':
            return filterEventStoreDefs(eventStore, function (eventDef) {
              return eventDef.defId !== action.defId;
            });

          case 'REMOVE_EVENT_SOURCE':
            return excludeEventsBySourceId(eventStore, action.sourceId);

          case 'REMOVE_ALL_EVENT_SOURCES':
            return filterEventStoreDefs(eventStore, function (eventDef) {
              return !eventDef.sourceId; // only keep events with no source id
            });

          case 'REMOVE_ALL_EVENTS':
            return createEmptyEventStore();

          case 'RESET_EVENTS':
            return {
              defs: eventStore.defs,
              instances: eventStore.instances
            };

          default:
            return eventStore;
        }
      }

      function receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, calendar) {
        if (eventSource && // not already removed
        fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources
        ) {
            var subset = parseEvents(transformRawEvents(rawEvents, eventSource, calendar), eventSource.sourceId, calendar);

            if (fetchRange) {
              subset = expandRecurring(subset, fetchRange, calendar);
            }

            return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);
          }

        return eventStore;
      }

      function addEvent(eventStore, subset, expandRange, calendar) {
        if (expandRange) {
          subset = expandRecurring(subset, expandRange, calendar);
        }

        return mergeEventStores(eventStore, subset);
      }

      function rezoneDates(eventStore, oldDateEnv, newDateEnv) {
        var defs = eventStore.defs;
        var instances = mapHash(eventStore.instances, function (instance) {
          var def = defs[instance.defId];

          if (def.allDay || def.recurringDef) {
            return instance; // isn't dependent on timezone
          } else {
            return _assign({}, instance, {
              range: {
                start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),
                end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))
              },
              forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo,
              forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo
            });
          }
        });
        return {
          defs: defs,
          instances: instances
        };
      }

      function applyMutationToRelated(eventStore, instanceId, mutation, fromApi, calendar) {
        var relevant = getRelevantEvents(eventStore, instanceId);
        var eventConfigBase = fromApi ? {
          '': {
            startEditable: true,
            durationEditable: true,
            constraints: [],
            overlap: null,
            allows: [],
            backgroundColor: '',
            borderColor: '',
            textColor: '',
            classNames: []
          }
        } : calendar.eventUiBases;
        relevant = applyMutationToEventStore(relevant, eventConfigBase, mutation, calendar);
        return mergeEventStores(eventStore, relevant);
      }

      function excludeEventsBySourceId(eventStore, sourceId) {
        return filterEventStoreDefs(eventStore, function (eventDef) {
          return eventDef.sourceId !== sourceId;
        });
      } // QUESTION: why not just return instances? do a general object-property-exclusion util


      function excludeInstances(eventStore, removals) {
        return {
          defs: eventStore.defs,
          instances: filterHash(eventStore.instances, function (instance) {
            return !removals[instance.instanceId];
          })
        };
      } // high-level segmenting-aware tester functions
      // ------------------------------------------------------------------------------------------------------------------------


      function isInteractionValid(interaction, calendar) {
        return isNewPropsValid({
          eventDrag: interaction
        }, calendar); // HACK: the eventDrag props is used for ALL interactions
      }

      function isDateSelectionValid(dateSelection, calendar) {
        return isNewPropsValid({
          dateSelection: dateSelection
        }, calendar);
      }

      function isNewPropsValid(newProps, calendar) {
        var view = calendar.view;

        var props = _assign({
          businessHours: view ? view.props.businessHours : createEmptyEventStore(),
          dateSelection: '',
          eventStore: calendar.state.eventStore,
          eventUiBases: calendar.eventUiBases,
          eventSelection: '',
          eventDrag: null,
          eventResize: null
        }, newProps);

        return (calendar.pluginSystem.hooks.isPropsValid || isPropsValid)(props, calendar);
      }

      function isPropsValid(state, calendar, dateSpanMeta, filterConfig) {
        if (dateSpanMeta === void 0) {
          dateSpanMeta = {};
        }

        if (state.eventDrag && !isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
          return false;
        }

        if (state.dateSelection && !isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {
          return false;
        }

        return true;
      } // Moving Event Validation
      // ------------------------------------------------------------------------------------------------------------------------


      function isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
        var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions

        var subjectEventStore = interaction.mutatedEvents;
        var subjectDefs = subjectEventStore.defs;
        var subjectInstances = subjectEventStore.instances;
        var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ? state.eventUiBases : {
          '': calendar.selectionConfig
        } // if not a real event, validate as a selection
        );

        if (filterConfig) {
          subjectConfigs = mapHash(subjectConfigs, filterConfig);
        }

        var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances); // exclude the subject events. TODO: exclude defs too?

        var otherDefs = otherEventStore.defs;
        var otherInstances = otherEventStore.instances;
        var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);

        for (var subjectInstanceId in subjectInstances) {
          var subjectInstance = subjectInstances[subjectInstanceId];
          var subjectRange = subjectInstance.range;
          var subjectConfig = subjectConfigs[subjectInstance.defId];
          var subjectDef = subjectDefs[subjectInstance.defId]; // constraint

          if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, calendar)) {
            return false;
          } // overlap


          var overlapFunc = calendar.opt('eventOverlap');

          if (typeof overlapFunc !== 'function') {
            overlapFunc = null;
          }

          for (var otherInstanceId in otherInstances) {
            var otherInstance = otherInstances[otherInstanceId]; // intersect! evaluate

            if (rangesIntersect(subjectRange, otherInstance.range)) {
              var otherOverlap = otherConfigs[otherInstance.defId].overlap; // consider the other event's overlap. only do this if the subject event is a "real" event

              if (otherOverlap === false && interaction.isEvent) {
                return false;
              }

              if (subjectConfig.overlap === false) {
                return false;
              }

              if (overlapFunc && !overlapFunc(new EventApi(calendar, otherDefs[otherInstance.defId], otherInstance), // still event
              new EventApi(calendar, subjectDef, subjectInstance) // moving event
              )) {
                return false;
              }
            }
          } // allow (a function)


          var calendarEventStore = calendar.state.eventStore; // need global-to-calendar, not local to component (splittable)state

          for (var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++) {
            var subjectAllow = _a[_i];

            var subjectDateSpan = _assign({}, dateSpanMeta, {
              range: subjectInstance.range,
              allDay: subjectDef.allDay
            });

            var origDef = calendarEventStore.defs[subjectDef.defId];
            var origInstance = calendarEventStore.instances[subjectInstanceId];
            var eventApi = void 0;

            if (origDef) {
              // was previously in the calendar
              eventApi = new EventApi(calendar, origDef, origInstance);
            } else {
              // was an external event
              eventApi = new EventApi(calendar, subjectDef); // no instance, because had no dates
            }

            if (!subjectAllow(calendar.buildDateSpanApi(subjectDateSpan), eventApi)) {
              return false;
            }
          }
        }

        return true;
      } // Date Selection Validation
      // ------------------------------------------------------------------------------------------------------------------------


      function isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig) {
        var relevantEventStore = state.eventStore;
        var relevantDefs = relevantEventStore.defs;
        var relevantInstances = relevantEventStore.instances;
        var selection = state.dateSelection;
        var selectionRange = selection.range;
        var selectionConfig = calendar.selectionConfig;

        if (filterConfig) {
          selectionConfig = filterConfig(selectionConfig);
        } // constraint


        if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, calendar)) {
          return false;
        } // overlap


        var overlapFunc = calendar.opt('selectOverlap');

        if (typeof overlapFunc !== 'function') {
          overlapFunc = null;
        }

        for (var relevantInstanceId in relevantInstances) {
          var relevantInstance = relevantInstances[relevantInstanceId]; // intersect! evaluate

          if (rangesIntersect(selectionRange, relevantInstance.range)) {
            if (selectionConfig.overlap === false) {
              return false;
            }

            if (overlapFunc && !overlapFunc(new EventApi(calendar, relevantDefs[relevantInstance.defId], relevantInstance))) {
              return false;
            }
          }
        } // allow (a function)


        for (var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++) {
          var selectionAllow = _a[_i];

          var fullDateSpan = _assign({}, dateSpanMeta, selection);

          if (!selectionAllow(calendar.buildDateSpanApi(fullDateSpan), null)) {
            return false;
          }
        }

        return true;
      } // Constraint Utils
      // ------------------------------------------------------------------------------------------------------------------------


      function allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, calendar) {
        for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {
          var constraint = constraints_1[_i];

          if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, calendar), subjectRange)) {
            return false;
          }
        }

        return true;
      }

      function constraintToRanges(constraint, subjectRange, // for expanding a recurring constraint, or expanding business hours
      otherEventStore, // for if constraint is an even group ID
      businessHoursUnexpanded, // for if constraint is 'businessHours'
      calendar // for expanding businesshours
      ) {
        if (constraint === 'businessHours') {
          return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, calendar));
        } else if (typeof constraint === 'string') {
          // an group ID
          return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {
            return eventDef.groupId === constraint;
          }));
        } else if (typeof constraint === 'object' && constraint) {
          // non-null object
          return eventStoreToRanges(expandRecurring(constraint, subjectRange, calendar));
        }

        return []; // if it's false
      } // TODO: move to event-store file?


      function eventStoreToRanges(eventStore) {
        var instances = eventStore.instances;
        var ranges = [];

        for (var instanceId in instances) {
          ranges.push(instances[instanceId].range);
        }

        return ranges;
      } // TODO: move to geom file?


      function anyRangesContainRange(outerRanges, innerRange) {
        for (var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++) {
          var outerRange = outerRanges_1[_i];

          if (rangeContainsRange(outerRange, innerRange)) {
            return true;
          }
        }

        return false;
      } // Parsing
      // ------------------------------------------------------------------------------------------------------------------------


      function normalizeConstraint(input, calendar) {
        if (Array.isArray(input)) {
          return parseEvents(input, '', calendar, true); // allowOpenRange=true
        } else if (typeof input === 'object' && input) {
          // non-null object
          return parseEvents([input], '', calendar, true); // allowOpenRange=true
        } else if (input != null) {
          return String(input);
        } else {
          return null;
        }
      }

      function htmlEscape(s) {
        return (s + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#039;').replace(/"/g, '&quot;').replace(/\n/g, '<br />');
      } // Given a hash of CSS properties, returns a string of CSS.
      // Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.


      function cssToStr(cssProps) {
        var statements = [];

        for (var name_1 in cssProps) {
          var val = cssProps[name_1];

          if (val != null && val !== '') {
            statements.push(name_1 + ':' + val);
          }
        }

        return statements.join(';');
      } // Given an object hash of HTML attribute names to values,
      // generates a string that can be injected between < > in HTML


      function attrsToStr(attrs) {
        var parts = [];

        for (var name_2 in attrs) {
          var val = attrs[name_2];

          if (val != null) {
            parts.push(name_2 + '="' + htmlEscape(val) + '"');
          }
        }

        return parts.join(' ');
      }

      function parseClassName(raw) {
        if (Array.isArray(raw)) {
          return raw;
        } else if (typeof raw === 'string') {
          return raw.split(/\s+/);
        } else {
          return [];
        }
      }

      var UNSCOPED_EVENT_UI_PROPS = {
        editable: Boolean,
        startEditable: Boolean,
        durationEditable: Boolean,
        constraint: null,
        overlap: null,
        allow: null,
        className: parseClassName,
        classNames: parseClassName,
        color: String,
        backgroundColor: String,
        borderColor: String,
        textColor: String
      };

      function processUnscopedUiProps(rawProps, calendar, leftovers) {
        var props = refineProps(rawProps, UNSCOPED_EVENT_UI_PROPS, {}, leftovers);
        var constraint = normalizeConstraint(props.constraint, calendar);
        return {
          startEditable: props.startEditable != null ? props.startEditable : props.editable,
          durationEditable: props.durationEditable != null ? props.durationEditable : props.editable,
          constraints: constraint != null ? [constraint] : [],
          overlap: props.overlap,
          allows: props.allow != null ? [props.allow] : [],
          backgroundColor: props.backgroundColor || props.color,
          borderColor: props.borderColor || props.color,
          textColor: props.textColor,
          classNames: props.classNames.concat(props.className)
        };
      }

      function processScopedUiProps(prefix, rawScoped, calendar, leftovers) {
        var rawUnscoped = {};
        var wasFound = {};

        for (var key in UNSCOPED_EVENT_UI_PROPS) {
          var scopedKey = prefix + capitaliseFirstLetter(key);
          rawUnscoped[key] = rawScoped[scopedKey];
          wasFound[scopedKey] = true;
        }

        if (prefix === 'event') {
          rawUnscoped.editable = rawScoped.editable; // special case. there is no 'eventEditable', just 'editable'
        }

        if (leftovers) {
          for (var key in rawScoped) {
            if (!wasFound[key]) {
              leftovers[key] = rawScoped[key];
            }
          }
        }

        return processUnscopedUiProps(rawUnscoped, calendar);
      }

      var EMPTY_EVENT_UI = {
        startEditable: null,
        durationEditable: null,
        constraints: [],
        overlap: null,
        allows: [],
        backgroundColor: '',
        borderColor: '',
        textColor: '',
        classNames: []
      }; // prevent against problems with <2 args!

      function combineEventUis(uis) {
        return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);
      }

      function combineTwoEventUis(item0, item1) {
        return {
          startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,
          durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,
          constraints: item0.constraints.concat(item1.constraints),
          overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,
          allows: item0.allows.concat(item1.allows),
          backgroundColor: item1.backgroundColor || item0.backgroundColor,
          borderColor: item1.borderColor || item0.borderColor,
          textColor: item1.textColor || item0.textColor,
          classNames: item0.classNames.concat(item1.classNames)
        };
      }

      var NON_DATE_PROPS = {
        id: String,
        groupId: String,
        title: String,
        url: String,
        rendering: String,
        extendedProps: null
      };
      var DATE_PROPS = {
        start: null,
        date: null,
        end: null,
        allDay: null
      };
      var uid = 0;

      function parseEvent(raw, sourceId, calendar, allowOpenRange) {
        var allDayDefault = computeIsAllDayDefault(sourceId, calendar);
        var leftovers0 = {};
        var recurringRes = parseRecurring(raw, // raw, but with single-event stuff stripped out
        allDayDefault, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes, leftovers0 // will populate with non-recurring props
        );

        if (recurringRes) {
          var def = parseEventDef(leftovers0, sourceId, recurringRes.allDay, Boolean(recurringRes.duration), calendar);
          def.recurringDef = {
            typeId: recurringRes.typeId,
            typeData: recurringRes.typeData,
            duration: recurringRes.duration
          };
          return {
            def: def,
            instance: null
          };
        } else {
          var leftovers1 = {};
          var singleRes = parseSingle(raw, allDayDefault, calendar, leftovers1, allowOpenRange);

          if (singleRes) {
            var def = parseEventDef(leftovers1, sourceId, singleRes.allDay, singleRes.hasEnd, calendar);
            var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);
            return {
              def: def,
              instance: instance
            };
          }
        }

        return null;
      }
      /*
      Will NOT populate extendedProps with the leftover properties.
      Will NOT populate date-related props.
      The EventNonDateInput has been normalized (id => publicId, etc).
      */


      function parseEventDef(raw, sourceId, allDay, hasEnd, calendar) {
        var leftovers = {};
        var def = pluckNonDateProps(raw, calendar, leftovers);
        def.defId = String(uid++);
        def.sourceId = sourceId;
        def.allDay = allDay;
        def.hasEnd = hasEnd;

        for (var _i = 0, _a = calendar.pluginSystem.hooks.eventDefParsers; _i < _a.length; _i++) {
          var eventDefParser = _a[_i];
          var newLeftovers = {};
          eventDefParser(def, leftovers, newLeftovers);
          leftovers = newLeftovers;
        }

        def.extendedProps = _assign(leftovers, def.extendedProps || {}); // help out EventApi from having user modify props

        Object.freeze(def.ui.classNames);
        Object.freeze(def.extendedProps);
        return def;
      }

      function createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {
        return {
          instanceId: String(uid++),
          defId: defId,
          range: range,
          forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,
          forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo
        };
      }

      function parseSingle(raw, allDayDefault, calendar, leftovers, allowOpenRange) {
        var props = pluckDateProps(raw, leftovers);
        var allDay = props.allDay;
        var startMeta;
        var startMarker = null;
        var hasEnd = false;
        var endMeta;
        var endMarker = null;
        startMeta = calendar.dateEnv.createMarkerMeta(props.start);

        if (startMeta) {
          startMarker = startMeta.marker;
        } else if (!allowOpenRange) {
          return null;
        }

        if (props.end != null) {
          endMeta = calendar.dateEnv.createMarkerMeta(props.end);
        }

        if (allDay == null) {
          if (allDayDefault != null) {
            allDay = allDayDefault;
          } else {
            // fall back to the date props LAST
            allDay = (!startMeta || startMeta.isTimeUnspecified) && (!endMeta || endMeta.isTimeUnspecified);
          }
        }

        if (allDay && startMarker) {
          startMarker = startOfDay(startMarker);
        }

        if (endMeta) {
          endMarker = endMeta.marker;

          if (allDay) {
            endMarker = startOfDay(endMarker);
          }

          if (startMarker && endMarker <= startMarker) {
            endMarker = null;
          }
        }

        if (endMarker) {
          hasEnd = true;
        } else if (!allowOpenRange) {
          hasEnd = calendar.opt('forceEventDuration') || false;
          endMarker = calendar.dateEnv.add(startMarker, allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration);
        }

        return {
          allDay: allDay,
          hasEnd: hasEnd,
          range: {
            start: startMarker,
            end: endMarker
          },
          forcedStartTzo: startMeta ? startMeta.forcedTzo : null,
          forcedEndTzo: endMeta ? endMeta.forcedTzo : null
        };
      }

      function pluckDateProps(raw, leftovers) {
        var props = refineProps(raw, DATE_PROPS, {}, leftovers);
        props.start = props.start !== null ? props.start : props.date;
        delete props.date;
        return props;
      }

      function pluckNonDateProps(raw, calendar, leftovers) {
        var preLeftovers = {};
        var props = refineProps(raw, NON_DATE_PROPS, {}, preLeftovers);
        var ui = processUnscopedUiProps(preLeftovers, calendar, leftovers);
        props.publicId = props.id;
        delete props.id;
        props.ui = ui;
        return props;
      }

      function computeIsAllDayDefault(sourceId, calendar) {
        var res = null;

        if (sourceId) {
          var source = calendar.state.eventSources[sourceId];
          res = source.allDayDefault;
        }

        if (res == null) {
          res = calendar.opt('allDayDefault');
        }

        return res;
      }

      var DEF_DEFAULTS = {
        startTime: '09:00',
        endTime: '17:00',
        daysOfWeek: [1, 2, 3, 4, 5],
        rendering: 'inverse-background',
        classNames: 'fc-nonbusiness',
        groupId: '_businessHours' // so multiple defs get grouped

      };
      /*
      TODO: pass around as EventDefHash!!!
      */

      function parseBusinessHours(input, calendar) {
        return parseEvents(refineInputs(input), '', calendar);
      }

      function refineInputs(input) {
        var rawDefs;

        if (input === true) {
          rawDefs = [{}]; // will get DEF_DEFAULTS verbatim
        } else if (Array.isArray(input)) {
          // if specifying an array, every sub-definition NEEDS a day-of-week
          rawDefs = input.filter(function (rawDef) {
            return rawDef.daysOfWeek;
          });
        } else if (typeof input === 'object' && input) {
          // non-null object
          rawDefs = [input];
        } else {
          // is probably false
          rawDefs = [];
        }

        rawDefs = rawDefs.map(function (rawDef) {
          return _assign({}, DEF_DEFAULTS, rawDef);
        });
        return rawDefs;
      }

      function memoizeRendering(renderFunc, unrenderFunc, dependencies) {
        if (dependencies === void 0) {
          dependencies = [];
        }

        var dependents = [];
        var thisContext;
        var prevArgs;

        function unrender() {
          if (prevArgs) {
            for (var _i = 0, dependents_1 = dependents; _i < dependents_1.length; _i++) {
              var dependent = dependents_1[_i];
              dependent.unrender();
            }

            if (unrenderFunc) {
              unrenderFunc.apply(thisContext, prevArgs);
            }

            prevArgs = null;
          }
        }

        function res() {
          if (!prevArgs || !isArraysEqual(prevArgs, arguments)) {
            unrender();
            thisContext = this;
            prevArgs = arguments;
            renderFunc.apply(this, arguments);
          }
        }

        res.dependents = dependents;
        res.unrender = unrender;

        for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {
          var dependency = dependencies_1[_i];
          dependency.dependents.push(res);
        }

        return res;
      }

      var EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere

      var Splitter =
      /** @class */
      function () {
        function Splitter() {
          this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);
          this.splitDateSelection = memoize(this._splitDateSpan);
          this.splitEventStore = memoize(this._splitEventStore);
          this.splitIndividualUi = memoize(this._splitIndividualUi);
          this.splitEventDrag = memoize(this._splitInteraction);
          this.splitEventResize = memoize(this._splitInteraction);
          this.eventUiBuilders = {}; // TODO: typescript protection
        }

        Splitter.prototype.splitProps = function (props) {
          var _this = this;

          var keyInfos = this.getKeyInfo(props);
          var defKeys = this.getKeysForEventDefs(props.eventStore);
          var dateSelections = this.splitDateSelection(props.dateSelection);
          var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*

          var eventStores = this.splitEventStore(props.eventStore, defKeys);
          var eventDrags = this.splitEventDrag(props.eventDrag);
          var eventResizes = this.splitEventResize(props.eventResize);
          var splitProps = {};
          this.eventUiBuilders = mapHash(keyInfos, function (info, key) {
            return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);
          });

          for (var key in keyInfos) {
            var keyInfo = keyInfos[key];
            var eventStore = eventStores[key] || EMPTY_EVENT_STORE;
            var buildEventUi = this.eventUiBuilders[key];
            splitProps[key] = {
              businessHours: keyInfo.businessHours || props.businessHours,
              dateSelection: dateSelections[key] || null,
              eventStore: eventStore,
              eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),
              eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',
              eventDrag: eventDrags[key] || null,
              eventResize: eventResizes[key] || null
            };
          }

          return splitProps;
        };

        Splitter.prototype._splitDateSpan = function (dateSpan) {
          var dateSpans = {};

          if (dateSpan) {
            var keys = this.getKeysForDateSpan(dateSpan);

            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
              var key = keys_1[_i];
              dateSpans[key] = dateSpan;
            }
          }

          return dateSpans;
        };

        Splitter.prototype._getKeysForEventDefs = function (eventStore) {
          var _this = this;

          return mapHash(eventStore.defs, function (eventDef) {
            return _this.getKeysForEventDef(eventDef);
          });
        };

        Splitter.prototype._splitEventStore = function (eventStore, defKeys) {
          var defs = eventStore.defs,
              instances = eventStore.instances;
          var splitStores = {};

          for (var defId in defs) {
            for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
              var key = _a[_i];

              if (!splitStores[key]) {
                splitStores[key] = createEmptyEventStore();
              }

              splitStores[key].defs[defId] = defs[defId];
            }
          }

          for (var instanceId in instances) {
            var instance = instances[instanceId];

            for (var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++) {
              var key = _c[_b];

              if (splitStores[key]) {
                // must have already been created
                splitStores[key].instances[instanceId] = instance;
              }
            }
          }

          return splitStores;
        };

        Splitter.prototype._splitIndividualUi = function (eventUiBases, defKeys) {
          var splitHashes = {};

          for (var defId in eventUiBases) {
            if (defId) {
              // not the '' key
              for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {
                var key = _a[_i];

                if (!splitHashes[key]) {
                  splitHashes[key] = {};
                }

                splitHashes[key][defId] = eventUiBases[defId];
              }
            }
          }

          return splitHashes;
        };

        Splitter.prototype._splitInteraction = function (interaction) {
          var splitStates = {};

          if (interaction) {
            var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents) // can't use cached. might be events from other calendar
            ); // can't rely on defKeys because event data is mutated


            var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);

            var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);

            var populate = function populate(key) {
              if (!splitStates[key]) {
                splitStates[key] = {
                  affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,
                  mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,
                  isEvent: interaction.isEvent,
                  origSeg: interaction.origSeg
                };
              }
            };

            for (var key in affectedStores_1) {
              populate(key);
            }

            for (var key in mutatedStores_1) {
              populate(key);
            }
          }

          return splitStates;
        };

        return Splitter;
      }();

      function buildEventUiForKey(allUi, eventUiForKey, individualUi) {
        var baseParts = [];

        if (allUi) {
          baseParts.push(allUi);
        }

        if (eventUiForKey) {
          baseParts.push(eventUiForKey);
        }

        var stuff = {
          '': combineEventUis(baseParts)
        };

        if (individualUi) {
          _assign(stuff, individualUi);
        }

        return stuff;
      } // Generates HTML for an anchor to another view into the calendar.
      // Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.
      // `gotoOptions` can either be a DateMarker, or an object with the form:
      // { date, type, forceOff }
      // `type` is a view-type like "day" or "week". default value is "day".
      // `attrs` and `innerHtml` are use to generate the rest of the HTML tag.


      function buildGotoAnchorHtml(allOptions, dateEnv, gotoOptions, attrs, innerHtml) {
        var date;
        var type;
        var forceOff;
        var finalOptions;

        if (gotoOptions instanceof Date) {
          date = gotoOptions; // a single date-like input
        } else {
          date = gotoOptions.date;
          type = gotoOptions.type;
          forceOff = gotoOptions.forceOff;
        }

        finalOptions = {
          date: dateEnv.formatIso(date, {
            omitTime: true
          }),
          type: type || 'day'
        };

        if (typeof attrs === 'string') {
          innerHtml = attrs;
          attrs = null;
        }

        attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space

        innerHtml = innerHtml || '';

        if (!forceOff && allOptions.navLinks) {
          return '<a' + attrs + ' data-goto="' + htmlEscape(JSON.stringify(finalOptions)) + '">' + innerHtml + '</a>';
        } else {
          return '<span' + attrs + '>' + innerHtml + '</span>';
        }
      }

      function getAllDayHtml(allOptions) {
        return allOptions.allDayHtml || htmlEscape(allOptions.allDayText);
      } // Computes HTML classNames for a single-day element


      function getDayClasses(date, dateProfile, context, noThemeHighlight) {
        var calendar = context.calendar,
            options = context.options,
            theme = context.theme,
            dateEnv = context.dateEnv;
        var classes = [];
        var todayStart;
        var todayEnd;

        if (!rangeContainsMarker(dateProfile.activeRange, date)) {
          classes.push('fc-disabled-day');
        } else {
          classes.push('fc-' + DAY_IDS[date.getUTCDay()]);

          if (options.monthMode && dateEnv.getMonth(date) !== dateEnv.getMonth(dateProfile.currentRange.start)) {
            classes.push('fc-other-month');
          }

          todayStart = startOfDay(calendar.getNow());
          todayEnd = addDays(todayStart, 1);

          if (date < todayStart) {
            classes.push('fc-past');
          } else if (date >= todayEnd) {
            classes.push('fc-future');
          } else {
            classes.push('fc-today');

            if (noThemeHighlight !== true) {
              classes.push(theme.getClass('today'));
            }
          }
        }

        return classes;
      } // given a function that resolves a result asynchronously.
      // the function can either call passed-in success and failure callbacks,
      // or it can return a promise.
      // if you need to pass additional params to func, bind them first.


      function unpromisify(func, success, failure) {
        // guard against success/failure callbacks being called more than once
        // and guard against a promise AND callback being used together.
        var isResolved = false;

        var wrappedSuccess = function wrappedSuccess() {
          if (!isResolved) {
            isResolved = true;
            success.apply(this, arguments);
          }
        };

        var wrappedFailure = function wrappedFailure() {
          if (!isResolved) {
            isResolved = true;

            if (failure) {
              failure.apply(this, arguments);
            }
          }
        };

        var res = func(wrappedSuccess, wrappedFailure);

        if (res && typeof res.then === 'function') {
          res.then(wrappedSuccess, wrappedFailure);
        }
      }

      var Mixin =
      /** @class */
      function () {
        function Mixin() {} // mix into a CLASS


        Mixin.mixInto = function (destClass) {
          this.mixIntoObj(destClass.prototype);
        }; // mix into ANY object


        Mixin.mixIntoObj = function (destObj) {
          var _this = this;

          Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
            if (!destObj[name]) {
              // if destination doesn't already define it
              destObj[name] = _this.prototype[name];
            }
          });
        };
        /*
        will override existing methods
        TODO: remove! not used anymore
        */


        Mixin.mixOver = function (destClass) {
          var _this = this;

          Object.getOwnPropertyNames(this.prototype).forEach(function (name) {
            destClass.prototype[name] = _this.prototype[name];
          });
        };

        return Mixin;
      }();
      /*
      USAGE:
        import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'
      in class:
        on: EmitterInterface['on']
        one: EmitterInterface['one']
        off: EmitterInterface['off']
        trigger: EmitterInterface['trigger']
        triggerWith: EmitterInterface['triggerWith']
        hasHandlers: EmitterInterface['hasHandlers']
      after class:
        EmitterMixin.mixInto(TheClass)
      */


      var EmitterMixin =
      /** @class */
      function (_super) {
        __extends(EmitterMixin, _super);

        function EmitterMixin() {
          return _super !== null && _super.apply(this, arguments) || this;
        }

        EmitterMixin.prototype.on = function (type, handler) {
          addToHash(this._handlers || (this._handlers = {}), type, handler);
          return this; // for chaining
        }; // todo: add comments


        EmitterMixin.prototype.one = function (type, handler) {
          addToHash(this._oneHandlers || (this._oneHandlers = {}), type, handler);
          return this; // for chaining
        };

        EmitterMixin.prototype.off = function (type, handler) {
          if (this._handlers) {
            removeFromHash(this._handlers, type, handler);
          }

          if (this._oneHandlers) {
            removeFromHash(this._oneHandlers, type, handler);
          }

          return this; // for chaining
        };

        EmitterMixin.prototype.trigger = function (type) {
          var args = [];

          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }

          this.triggerWith(type, this, args);
          return this; // for chaining
        };

        EmitterMixin.prototype.triggerWith = function (type, context, args) {
          if (this._handlers) {
            applyAll(this._handlers[type], context, args);
          }

          if (this._oneHandlers) {
            applyAll(this._oneHandlers[type], context, args);
            delete this._oneHandlers[type]; // will never fire again
          }

          return this; // for chaining
        };

        EmitterMixin.prototype.hasHandlers = function (type) {
          return this._handlers && this._handlers[type] && this._handlers[type].length || this._oneHandlers && this._oneHandlers[type] && this._oneHandlers[type].length;
        };

        return EmitterMixin;
      }(Mixin);

      function addToHash(hash, type, handler) {
        (hash[type] || (hash[type] = [])).push(handler);
      }

      function removeFromHash(hash, type, handler) {
        if (handler) {
          if (hash[type]) {
            hash[type] = hash[type].filter(function (func) {
              return func !== handler;
            });
          }
        } else {
          delete hash[type]; // remove all handler funcs for this type
        }
      }
      /*
      Records offset information for a set of elements, relative to an origin element.
      Can record the left/right OR the top/bottom OR both.
      Provides methods for querying the cache by position.
      */


      var PositionCache =
      /** @class */
      function () {
        function PositionCache(originEl, els, isHorizontal, isVertical) {
          this.originEl = originEl;
          this.els = els;
          this.isHorizontal = isHorizontal;
          this.isVertical = isVertical;
        } // Queries the els for coordinates and stores them.
        // Call this method before using and of the get* methods below.


        PositionCache.prototype.build = function () {
          var originEl = this.originEl;
          var originClientRect = this.originClientRect = originEl.getBoundingClientRect(); // relative to viewport top-left

          if (this.isHorizontal) {
            this.buildElHorizontals(originClientRect.left);
          }

          if (this.isVertical) {
            this.buildElVerticals(originClientRect.top);
          }
        }; // Populates the left/right internal coordinate arrays


        PositionCache.prototype.buildElHorizontals = function (originClientLeft) {
          var lefts = [];
          var rights = [];

          for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
            var el = _a[_i];
            var rect = el.getBoundingClientRect();
            lefts.push(rect.left - originClientLeft);
            rights.push(rect.right - originClientLeft);
          }

          this.lefts = lefts;
          this.rights = rights;
        }; // Populates the top/bottom internal coordinate arrays


        PositionCache.prototype.buildElVerticals = function (originClientTop) {
          var tops = [];
          var bottoms = [];

          for (var _i = 0, _a = this.els; _i < _a.length; _i++) {
            var el = _a[_i];
            var rect = el.getBoundingClientRect();
            tops.push(rect.top - originClientTop);
            bottoms.push(rect.bottom - originClientTop);
          }

          this.tops = tops;
          this.bottoms = bottoms;
        }; // Given a left offset (from document left), returns the index of the el that it horizontally intersects.
        // If no intersection is made, returns undefined.


        PositionCache.prototype.leftToIndex = function (leftPosition) {
          var lefts = this.lefts;
          var rights = this.rights;
          var len = lefts.length;
          var i;

          for (i = 0; i < len; i++) {
            if (leftPosition >= lefts[i] && leftPosition < rights[i]) {
              return i;
            }
          }
        }; // Given a top offset (from document top), returns the index of the el that it vertically intersects.
        // If no intersection is made, returns undefined.


        PositionCache.prototype.topToIndex = function (topPosition) {
          var tops = this.tops;
          var bottoms = this.bottoms;
          var len = tops.length;
          var i;

          for (i = 0; i < len; i++) {
            if (topPosition >= tops[i] && topPosition < bottoms[i]) {
              return i;
            }
          }
        }; // Gets the width of the element at the given index


        PositionCache.prototype.getWidth = function (leftIndex) {
          return this.rights[leftIndex] - this.lefts[leftIndex];
        }; // Gets the height of the element at the given index


        PositionCache.prototype.getHeight = function (topIndex) {
          return this.bottoms[topIndex] - this.tops[topIndex];
        };

        return PositionCache;
      }();
      /*
      An object for getting/setting scroll-related information for an element.
      Internally, this is done very differently for window versus DOM element,
      so this object serves as a common interface.
      */


      var ScrollController =
      /** @class */
      function () {
        function ScrollController() {}

        ScrollController.prototype.getMaxScrollTop = function () {
          return this.getScrollHeight() - this.getClientHeight();
        };

        ScrollController.prototype.getMaxScrollLeft = function () {
          return this.getScrollWidth() - this.getClientWidth();
        };

        ScrollController.prototype.canScrollVertically = function () {
          return this.getMaxScrollTop() > 0;
        };

        ScrollController.prototype.canScrollHorizontally = function () {
          return this.getMaxScrollLeft() > 0;
        };

        ScrollController.prototype.canScrollUp = function () {
          return this.getScrollTop() > 0;
        };

        ScrollController.prototype.canScrollDown = function () {
          return this.getScrollTop() < this.getMaxScrollTop();
        };

        ScrollController.prototype.canScrollLeft = function () {
          return this.getScrollLeft() > 0;
        };

        ScrollController.prototype.canScrollRight = function () {
          return this.getScrollLeft() < this.getMaxScrollLeft();
        };

        return ScrollController;
      }();

      var ElementScrollController =
      /** @class */
      function (_super) {
        __extends(ElementScrollController, _super);

        function ElementScrollController(el) {
          var _this = _super.call(this) || this;

          _this.el = el;
          return _this;
        }

        ElementScrollController.prototype.getScrollTop = function () {
          return this.el.scrollTop;
        };

        ElementScrollController.prototype.getScrollLeft = function () {
          return this.el.scrollLeft;
        };

        ElementScrollController.prototype.setScrollTop = function (top) {
          this.el.scrollTop = top;
        };

        ElementScrollController.prototype.setScrollLeft = function (left) {
          this.el.scrollLeft = left;
        };

        ElementScrollController.prototype.getScrollWidth = function () {
          return this.el.scrollWidth;
        };

        ElementScrollController.prototype.getScrollHeight = function () {
          return this.el.scrollHeight;
        };

        ElementScrollController.prototype.getClientHeight = function () {
          return this.el.clientHeight;
        };

        ElementScrollController.prototype.getClientWidth = function () {
          return this.el.clientWidth;
        };

        return ElementScrollController;
      }(ScrollController);

      var WindowScrollController =
      /** @class */
      function (_super) {
        __extends(WindowScrollController, _super);

        function WindowScrollController() {
          return _super !== null && _super.apply(this, arguments) || this;
        }

        WindowScrollController.prototype.getScrollTop = function () {
          return window.pageYOffset;
        };

        WindowScrollController.prototype.getScrollLeft = function () {
          return window.pageXOffset;
        };

        WindowScrollController.prototype.setScrollTop = function (n) {
          window.scroll(window.pageXOffset, n);
        };

        WindowScrollController.prototype.setScrollLeft = function (n) {
          window.scroll(n, window.pageYOffset);
        };

        WindowScrollController.prototype.getScrollWidth = function () {
          return document.documentElement.scrollWidth;
        };

        WindowScrollController.prototype.getScrollHeight = function () {
          return document.documentElement.scrollHeight;
        };

        WindowScrollController.prototype.getClientHeight = function () {
          return document.documentElement.clientHeight;
        };

        WindowScrollController.prototype.getClientWidth = function () {
          return document.documentElement.clientWidth;
        };

        return WindowScrollController;
      }(ScrollController);
      /*
      Embodies a div that has potential scrollbars
      */


      var ScrollComponent =
      /** @class */
      function (_super) {
        __extends(ScrollComponent, _super);

        function ScrollComponent(overflowX, overflowY) {
          var _this = _super.call(this, createElement('div', {
            className: 'fc-scroller'
          })) || this;

          _this.overflowX = overflowX;
          _this.overflowY = overflowY;

          _this.applyOverflow();

          return _this;
        } // sets to natural height, unlocks overflow


        ScrollComponent.prototype.clear = function () {
          this.setHeight('auto');
          this.applyOverflow();
        };

        ScrollComponent.prototype.destroy = function () {
          removeElement(this.el);
        }; // Overflow
        // -----------------------------------------------------------------------------------------------------------------


        ScrollComponent.prototype.applyOverflow = function () {
          applyStyle(this.el, {
            overflowX: this.overflowX,
            overflowY: this.overflowY
          });
        }; // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.
        // Useful for preserving scrollbar widths regardless of future resizes.
        // Can pass in scrollbarWidths for optimization.


        ScrollComponent.prototype.lockOverflow = function (scrollbarWidths) {
          var overflowX = this.overflowX;
          var overflowY = this.overflowY;
          scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();

          if (overflowX === 'auto') {
            overflowX = scrollbarWidths.bottom || // horizontal scrollbars?
            this.canScrollHorizontally() // OR scrolling pane with massless scrollbars?
            ? 'scroll' : 'hidden';
          }

          if (overflowY === 'auto') {
            overflowY = scrollbarWidths.left || scrollbarWidths.right || // horizontal scrollbars?
            this.canScrollVertically() // OR scrolling pane with massless scrollbars?
            ? 'scroll' : 'hidden';
          }

          applyStyle(this.el, {
            overflowX: overflowX,
            overflowY: overflowY
          });
        };

        ScrollComponent.prototype.setHeight = function (height) {
          applyStyleProp(this.el, 'height', height);
        };

        ScrollComponent.prototype.getScrollbarWidths = function () {
          var edges = computeEdges(this.el);
          return {
            left: edges.scrollbarLeft,
            right: edges.scrollbarRight,
            bottom: edges.scrollbarBottom
          };
        };

        return ScrollComponent;
      }(ElementScrollController);

      var Theme =
      /** @class */
      function () {
        function Theme(calendarOptions) {
          this.calendarOptions = calendarOptions;
          this.processIconOverride();
        }

        Theme.prototype.processIconOverride = function () {
          if (this.iconOverrideOption) {
            this.setIconOverride(this.calendarOptions[this.iconOverrideOption]);
          }
        };

        Theme.prototype.setIconOverride = function (iconOverrideHash) {
          var iconClassesCopy;
          var buttonName;

          if (typeof iconOverrideHash === 'object' && iconOverrideHash) {
            // non-null object
            iconClassesCopy = _assign({}, this.iconClasses);

            for (buttonName in iconOverrideHash) {
              iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);
            }

            this.iconClasses = iconClassesCopy;
          } else if (iconOverrideHash === false) {
            this.iconClasses = {};
          }
        };

        Theme.prototype.applyIconOverridePrefix = function (className) {
          var prefix = this.iconOverridePrefix;

          if (prefix && className.indexOf(prefix) !== 0) {
            // if not already present
            className = prefix + className;
          }

          return className;
        };

        Theme.prototype.getClass = function (key) {
          return this.classes[key] || '';
        };

        Theme.prototype.getIconClass = function (buttonName) {
          var className = this.iconClasses[buttonName];

          if (className) {
            return this.baseIconClass + ' ' + className;
          }

          return '';
        };

        Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {
          var className;

          if (this.iconOverrideCustomButtonOption) {
            className = customButtonProps[this.iconOverrideCustomButtonOption];

            if (className) {
              return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);
            }
          }

          return '';
        };

        return Theme;
      }();

      Theme.prototype.classes = {};
      Theme.prototype.iconClasses = {};
      Theme.prototype.baseIconClass = '';
      Theme.prototype.iconOverridePrefix = '';
      var guid = 0;

      var ComponentContext =
      /** @class */
      function () {
        function ComponentContext(calendar, theme, dateEnv, options, view) {
          this.calendar = calendar;
          this.theme = theme;
          this.dateEnv = dateEnv;
          this.options = options;
          this.view = view;
          this.isRtl = options.dir === 'rtl';
          this.eventOrderSpecs = parseFieldSpecs(options.eventOrder);
          this.nextDayThreshold = createDuration(options.nextDayThreshold);
        }

        ComponentContext.prototype.extend = function (options, view) {
          return new ComponentContext(this.calendar, this.theme, this.dateEnv, options || this.options, view || this.view);
        };

        return ComponentContext;
      }();

      var Component =
      /** @class */
      function () {
        function Component() {
          this.everRendered = false;
          this.uid = String(guid++);
        }

        Component.addEqualityFuncs = function (newFuncs) {
          this.prototype.equalityFuncs = _assign({}, this.prototype.equalityFuncs, newFuncs);
        };

        Component.prototype.receiveProps = function (props, context) {
          this.receiveContext(context);

          var _a = recycleProps(this.props || {}, props, this.equalityFuncs),
              anyChanges = _a.anyChanges,
              comboProps = _a.comboProps;

          this.props = comboProps;

          if (anyChanges) {
            if (this.everRendered) {
              this.beforeUpdate();
            }

            this.render(comboProps, context);

            if (this.everRendered) {
              this.afterUpdate();
            }
          }

          this.everRendered = true;
        };

        Component.prototype.receiveContext = function (context) {
          var oldContext = this.context;
          this.context = context;

          if (!oldContext) {
            this.firstContext(context);
          }
        };

        Component.prototype.render = function (props, context) {};

        Component.prototype.firstContext = function (context) {};

        Component.prototype.beforeUpdate = function () {};

        Component.prototype.afterUpdate = function () {}; // after destroy is called, this component won't ever be used again


        Component.prototype.destroy = function () {};

        return Component;
      }();

      Component.prototype.equalityFuncs = {};
      /*
      Reuses old values when equal. If anything is unequal, returns newProps as-is.
      Great for PureComponent, but won't be feasible with React, so just eliminate and use React's DOM diffing.
      */

      function recycleProps(oldProps, newProps, equalityFuncs) {
        var comboProps = {}; // some old, some new

        var anyChanges = false;

        for (var key in newProps) {
          if (key in oldProps && (oldProps[key] === newProps[key] || equalityFuncs[key] && equalityFuncs[key](oldProps[key], newProps[key]))) {
            // equal to old? use old prop
            comboProps[key] = oldProps[key];
          } else {
            comboProps[key] = newProps[key];
            anyChanges = true;
          }
        }

        for (var key in oldProps) {
          if (!(key in newProps)) {
            anyChanges = true;
            break;
          }
        }

        return {
          anyChanges: anyChanges,
          comboProps: comboProps
        };
      }
      /*
      PURPOSES:
      - hook up to fg, fill, and mirror renderers
      - interface for dragging and hits
      */


      var DateComponent =
      /** @class */
      function (_super) {
        __extends(DateComponent, _super);

        function DateComponent(el) {
          var _this = _super.call(this) || this;

          _this.el = el;
          return _this;
        }

        DateComponent.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          removeElement(this.el);
        }; // Hit System
        // -----------------------------------------------------------------------------------------------------------------


        DateComponent.prototype.buildPositionCaches = function () {};

        DateComponent.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
          return null; // this should be abstract
        }; // Validation
        // -----------------------------------------------------------------------------------------------------------------


        DateComponent.prototype.isInteractionValid = function (interaction) {
          var calendar = this.context.calendar;
          var dateProfile = this.props.dateProfile; // HACK

          var instances = interaction.mutatedEvents.instances;

          if (dateProfile) {
            // HACK for DayTile
            for (var instanceId in instances) {
              if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {
                return false;
              }
            }
          }

          return isInteractionValid(interaction, calendar);
        };

        DateComponent.prototype.isDateSelectionValid = function (selection) {
          var calendar = this.context.calendar;
          var dateProfile = this.props.dateProfile; // HACK

          if (dateProfile && // HACK for DayTile
          !rangeContainsRange(dateProfile.validRange, selection.range)) {
            return false;
          }

          return isDateSelectionValid(selection, calendar);
        }; // Pointer Interaction Utils
        // -----------------------------------------------------------------------------------------------------------------


        DateComponent.prototype.isValidSegDownEl = function (el) {
          return !this.props.eventDrag && // HACK
          !this.props.eventResize && // HACK
          !elementClosest(el, '.fc-mirror') && (this.isPopover() || !this.isInPopover(el)); // ^above line ensures we don't detect a seg interaction within a nested component.
          // it's a HACK because it only supports a popover as the nested component.
        };

        DateComponent.prototype.isValidDateDownEl = function (el) {
          var segEl = elementClosest(el, this.fgSegSelector);
          return (!segEl || segEl.classList.contains('fc-mirror')) && !elementClosest(el, '.fc-more') && // a "more.." link
          !elementClosest(el, 'a[data-goto]') && // a clickable nav link
          !this.isInPopover(el);
        };

        DateComponent.prototype.isPopover = function () {
          return this.el.classList.contains('fc-popover');
        };

        DateComponent.prototype.isInPopover = function (el) {
          return Boolean(elementClosest(el, '.fc-popover'));
        };

        return DateComponent;
      }(Component);

      DateComponent.prototype.fgSegSelector = '.fc-event-container > *';
      DateComponent.prototype.bgSegSelector = '.fc-bgevent:not(.fc-nonbusiness)';
      var uid$1 = 0;

      function createPlugin(input) {
        return {
          id: String(uid$1++),
          deps: input.deps || [],
          reducers: input.reducers || [],
          eventDefParsers: input.eventDefParsers || [],
          isDraggableTransformers: input.isDraggableTransformers || [],
          eventDragMutationMassagers: input.eventDragMutationMassagers || [],
          eventDefMutationAppliers: input.eventDefMutationAppliers || [],
          dateSelectionTransformers: input.dateSelectionTransformers || [],
          datePointTransforms: input.datePointTransforms || [],
          dateSpanTransforms: input.dateSpanTransforms || [],
          views: input.views || {},
          viewPropsTransformers: input.viewPropsTransformers || [],
          isPropsValid: input.isPropsValid || null,
          externalDefTransforms: input.externalDefTransforms || [],
          eventResizeJoinTransforms: input.eventResizeJoinTransforms || [],
          viewContainerModifiers: input.viewContainerModifiers || [],
          eventDropTransformers: input.eventDropTransformers || [],
          componentInteractions: input.componentInteractions || [],
          calendarInteractions: input.calendarInteractions || [],
          themeClasses: input.themeClasses || {},
          eventSourceDefs: input.eventSourceDefs || [],
          cmdFormatter: input.cmdFormatter,
          recurringTypes: input.recurringTypes || [],
          namedTimeZonedImpl: input.namedTimeZonedImpl,
          defaultView: input.defaultView || '',
          elementDraggingImpl: input.elementDraggingImpl,
          optionChangeHandlers: input.optionChangeHandlers || {}
        };
      }

      var PluginSystem =
      /** @class */
      function () {
        function PluginSystem() {
          this.hooks = {
            reducers: [],
            eventDefParsers: [],
            isDraggableTransformers: [],
            eventDragMutationMassagers: [],
            eventDefMutationAppliers: [],
            dateSelectionTransformers: [],
            datePointTransforms: [],
            dateSpanTransforms: [],
            views: {},
            viewPropsTransformers: [],
            isPropsValid: null,
            externalDefTransforms: [],
            eventResizeJoinTransforms: [],
            viewContainerModifiers: [],
            eventDropTransformers: [],
            componentInteractions: [],
            calendarInteractions: [],
            themeClasses: {},
            eventSourceDefs: [],
            cmdFormatter: null,
            recurringTypes: [],
            namedTimeZonedImpl: null,
            defaultView: '',
            elementDraggingImpl: null,
            optionChangeHandlers: {}
          };
          this.addedHash = {};
        }

        PluginSystem.prototype.add = function (plugin) {
          if (!this.addedHash[plugin.id]) {
            this.addedHash[plugin.id] = true;

            for (var _i = 0, _a = plugin.deps; _i < _a.length; _i++) {
              var dep = _a[_i];
              this.add(dep);
            }

            this.hooks = combineHooks(this.hooks, plugin);
          }
        };

        return PluginSystem;
      }();

      function combineHooks(hooks0, hooks1) {
        return {
          reducers: hooks0.reducers.concat(hooks1.reducers),
          eventDefParsers: hooks0.eventDefParsers.concat(hooks1.eventDefParsers),
          isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),
          eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),
          eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),
          dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),
          datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),
          dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),
          views: _assign({}, hooks0.views, hooks1.views),
          viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),
          isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,
          externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),
          eventResizeJoinTransforms: hooks0.eventResizeJoinTransforms.concat(hooks1.eventResizeJoinTransforms),
          viewContainerModifiers: hooks0.viewContainerModifiers.concat(hooks1.viewContainerModifiers),
          eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),
          calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),
          componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),
          themeClasses: _assign({}, hooks0.themeClasses, hooks1.themeClasses),
          eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),
          cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,
          recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),
          namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,
          defaultView: hooks0.defaultView || hooks1.defaultView,
          elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,
          optionChangeHandlers: _assign({}, hooks0.optionChangeHandlers, hooks1.optionChangeHandlers)
        };
      }

      var eventSourceDef = {
        ignoreRange: true,
        parseMeta: function parseMeta(raw) {
          if (Array.isArray(raw)) {
            // short form
            return raw;
          } else if (Array.isArray(raw.events)) {
            return raw.events;
          }

          return null;
        },
        fetch: function fetch(arg, success) {
          success({
            rawEvents: arg.eventSource.meta
          });
        }
      };
      var ArrayEventSourcePlugin = createPlugin({
        eventSourceDefs: [eventSourceDef]
      });
      var eventSourceDef$1 = {
        parseMeta: function parseMeta(raw) {
          if (typeof raw === 'function') {
            // short form
            return raw;
          } else if (typeof raw.events === 'function') {
            return raw.events;
          }

          return null;
        },
        fetch: function fetch(arg, success, failure) {
          var dateEnv = arg.calendar.dateEnv;
          var func = arg.eventSource.meta;
          unpromisify(func.bind(null, {
            start: dateEnv.toDate(arg.range.start),
            end: dateEnv.toDate(arg.range.end),
            startStr: dateEnv.formatIso(arg.range.start),
            endStr: dateEnv.formatIso(arg.range.end),
            timeZone: dateEnv.timeZone
          }), function (rawEvents) {
            success({
              rawEvents: rawEvents
            }); // needs an object response
          }, failure // send errorObj directly to failure callback
          );
        }
      };
      var FuncEventSourcePlugin = createPlugin({
        eventSourceDefs: [eventSourceDef$1]
      });

      function requestJson(method, url, params, successCallback, failureCallback) {
        method = method.toUpperCase();
        var body = null;

        if (method === 'GET') {
          url = injectQueryStringParams(url, params);
        } else {
          body = encodeParams(params);
        }

        var xhr = new XMLHttpRequest();
        xhr.open(method, url, true);

        if (method !== 'GET') {
          xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        }

        xhr.onload = function () {
          if (xhr.status >= 200 && xhr.status < 400) {
            try {
              var res = JSON.parse(xhr.responseText);
              successCallback(res, xhr);
            } catch (err) {
              failureCallback('Failure parsing JSON', xhr);
            }
          } else {
            failureCallback('Request failed', xhr);
          }
        };

        xhr.onerror = function () {
          failureCallback('Request failed', xhr);
        };

        xhr.send(body);
      }

      function injectQueryStringParams(url, params) {
        return url + (url.indexOf('?') === -1 ? '?' : '&') + encodeParams(params);
      }

      function encodeParams(params) {
        var parts = [];

        for (var key in params) {
          parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));
        }

        return parts.join('&');
      }

      var eventSourceDef$2 = {
        parseMeta: function parseMeta(raw) {
          if (typeof raw === 'string') {
            // short form
            raw = {
              url: raw
            };
          } else if (!raw || typeof raw !== 'object' || !raw.url) {
            return null;
          }

          return {
            url: raw.url,
            method: (raw.method || 'GET').toUpperCase(),
            extraParams: raw.extraParams,
            startParam: raw.startParam,
            endParam: raw.endParam,
            timeZoneParam: raw.timeZoneParam
          };
        },
        fetch: function fetch(arg, success, failure) {
          var meta = arg.eventSource.meta;
          var requestParams = buildRequestParams(meta, arg.range, arg.calendar);
          requestJson(meta.method, meta.url, requestParams, function (rawEvents, xhr) {
            success({
              rawEvents: rawEvents,
              xhr: xhr
            });
          }, function (errorMessage, xhr) {
            failure({
              message: errorMessage,
              xhr: xhr
            });
          });
        }
      };
      var JsonFeedEventSourcePlugin = createPlugin({
        eventSourceDefs: [eventSourceDef$2]
      });

      function buildRequestParams(meta, range, calendar) {
        var dateEnv = calendar.dateEnv;
        var startParam;
        var endParam;
        var timeZoneParam;
        var customRequestParams;
        var params = {};
        startParam = meta.startParam;

        if (startParam == null) {
          startParam = calendar.opt('startParam');
        }

        endParam = meta.endParam;

        if (endParam == null) {
          endParam = calendar.opt('endParam');
        }

        timeZoneParam = meta.timeZoneParam;

        if (timeZoneParam == null) {
          timeZoneParam = calendar.opt('timeZoneParam');
        } // retrieve any outbound GET/POST data from the options


        if (typeof meta.extraParams === 'function') {
          // supplied as a function that returns a key/value object
          customRequestParams = meta.extraParams();
        } else {
          // probably supplied as a straight key/value object
          customRequestParams = meta.extraParams || {};
        }

        _assign(params, customRequestParams);

        params[startParam] = dateEnv.formatIso(range.start);
        params[endParam] = dateEnv.formatIso(range.end);

        if (dateEnv.timeZone !== 'local') {
          params[timeZoneParam] = dateEnv.timeZone;
        }

        return params;
      }

      var recurring = {
        parse: function parse(rawEvent, leftoverProps, dateEnv) {
          var createMarker = dateEnv.createMarker.bind(dateEnv);
          var processors = {
            daysOfWeek: null,
            startTime: createDuration,
            endTime: createDuration,
            startRecur: createMarker,
            endRecur: createMarker
          };
          var props = refineProps(rawEvent, processors, {}, leftoverProps);
          var anyValid = false;

          for (var propName in props) {
            if (props[propName] != null) {
              anyValid = true;
              break;
            }
          }

          if (anyValid) {
            var duration = null;

            if ('duration' in leftoverProps) {
              duration = createDuration(leftoverProps.duration);
              delete leftoverProps.duration;
            }

            if (!duration && props.startTime && props.endTime) {
              duration = subtractDurations(props.endTime, props.startTime);
            }

            return {
              allDayGuess: Boolean(!props.startTime && !props.endTime),
              duration: duration,
              typeData: props // doesn't need endTime anymore but oh well

            };
          }

          return null;
        },
        expand: function expand(typeData, framingRange, dateEnv) {
          var clippedFramingRange = intersectRanges(framingRange, {
            start: typeData.startRecur,
            end: typeData.endRecur
          });

          if (clippedFramingRange) {
            return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);
          } else {
            return [];
          }
        }
      };
      var SimpleRecurrencePlugin = createPlugin({
        recurringTypes: [recurring]
      });

      function expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {
        var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;
        var dayMarker = startOfDay(framingRange.start);
        var endMarker = framingRange.end;
        var instanceStarts = [];

        while (dayMarker < endMarker) {
          var instanceStart // if everyday, or this particular day-of-week
          = void 0; // if everyday, or this particular day-of-week

          if (!dowHash || dowHash[dayMarker.getUTCDay()]) {
            if (startTime) {
              instanceStart = dateEnv.add(dayMarker, startTime);
            } else {
              instanceStart = dayMarker;
            }

            instanceStarts.push(instanceStart);
          }

          dayMarker = addDays(dayMarker, 1);
        }

        return instanceStarts;
      }

      var DefaultOptionChangeHandlers = createPlugin({
        optionChangeHandlers: {
          events: function events(_events, calendar, deepEqual) {
            handleEventSources([_events], calendar, deepEqual);
          },
          eventSources: handleEventSources,
          plugins: handlePlugins
        }
      });

      function handleEventSources(inputs, calendar, deepEqual) {
        var unfoundSources = hashValuesToArray(calendar.state.eventSources);
        var newInputs = [];

        for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
          var input = inputs_1[_i];
          var inputFound = false;

          for (var i = 0; i < unfoundSources.length; i++) {
            if (deepEqual(unfoundSources[i]._raw, input)) {
              unfoundSources.splice(i, 1); // delete

              inputFound = true;
              break;
            }
          }

          if (!inputFound) {
            newInputs.push(input);
          }
        }

        for (var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++) {
          var unfoundSource = unfoundSources_1[_a];
          calendar.dispatch({
            type: 'REMOVE_EVENT_SOURCE',
            sourceId: unfoundSource.sourceId
          });
        }

        for (var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++) {
          var newInput = newInputs_1[_b];
          calendar.addEventSource(newInput);
        }
      } // shortcoming: won't remove plugins


      function handlePlugins(inputs, calendar) {
        calendar.addPluginInputs(inputs); // will gracefully handle duplicates
      }

      var config = {}; // TODO: make these options

      var globalDefaults = {
        defaultRangeSeparator: ' - ',
        titleRangeSeparator: " \u2013 ",
        defaultTimedEventDuration: '01:00:00',
        defaultAllDayEventDuration: {
          day: 1
        },
        forceEventDuration: false,
        nextDayThreshold: '00:00:00',
        // display
        columnHeader: true,
        defaultView: '',
        aspectRatio: 1.35,
        header: {
          left: 'title',
          center: '',
          right: 'today prev,next'
        },
        weekends: true,
        weekNumbers: false,
        weekNumberCalculation: 'local',
        editable: false,
        // nowIndicator: false,
        scrollTime: '06:00:00',
        minTime: '00:00:00',
        maxTime: '24:00:00',
        showNonCurrentDates: true,
        // event ajax
        lazyFetching: true,
        startParam: 'start',
        endParam: 'end',
        timeZoneParam: 'timeZone',
        timeZone: 'local',
        // allDayDefault: undefined,
        // locale
        locales: [],
        locale: '',
        // dir: will get this from the default locale
        // buttonIcons: null,
        // allows setting a min-height to the event segment to prevent short events overlapping each other
        timeGridEventMinHeight: 0,
        themeSystem: 'standard',
        // eventResizableFromStart: false,
        dragRevertDuration: 500,
        dragScroll: true,
        allDayMaintainDuration: false,
        // selectable: false,
        unselectAuto: true,
        // selectMinDistance: 0,
        dropAccept: '*',
        eventOrder: 'start,-duration,allDay,title',
        // ^ if start tie, longer events go before shorter. final tie-breaker is title text
        // rerenderDelay: null,
        eventLimit: false,
        eventLimitClick: 'popover',
        dayPopoverFormat: {
          month: 'long',
          day: 'numeric',
          year: 'numeric'
        },
        handleWindowResize: true,
        windowResizeDelay: 100,
        longPressDelay: 1000,
        eventDragMinDistance: 5 // only applies to mouse

      };
      var rtlDefaults = {
        header: {
          left: 'next,prev today',
          center: '',
          right: 'title'
        },
        buttonIcons: {
          // TODO: make RTL support the responibility of the theme
          prev: 'fc-icon-chevron-right',
          next: 'fc-icon-chevron-left',
          prevYear: 'fc-icon-chevrons-right',
          nextYear: 'fc-icon-chevrons-left'
        }
      };
      var complexOptions = ['header', 'footer', 'buttonText', 'buttonIcons']; // Merges an array of option objects into a single object

      function mergeOptions(optionObjs) {
        return mergeProps(optionObjs, complexOptions);
      } // TODO: move this stuff to a "plugin"-related file...


      var INTERNAL_PLUGINS = [ArrayEventSourcePlugin, FuncEventSourcePlugin, JsonFeedEventSourcePlugin, SimpleRecurrencePlugin, DefaultOptionChangeHandlers];

      function refinePluginDefs(pluginInputs) {
        var plugins = [];

        for (var _i = 0, pluginInputs_1 = pluginInputs; _i < pluginInputs_1.length; _i++) {
          var pluginInput = pluginInputs_1[_i];

          if (typeof pluginInput === 'string') {
            var globalName = 'FullCalendar' + capitaliseFirstLetter(pluginInput);

            if (!window[globalName]) {
              console.warn('Plugin file not loaded for ' + pluginInput);
            } else {
              plugins.push(window[globalName]["default"]); // is an ES6 module
            }
          } else {
            plugins.push(pluginInput);
          }
        }

        return INTERNAL_PLUGINS.concat(plugins);
      }

      var RAW_EN_LOCALE = {
        code: 'en',
        week: {
          dow: 0,
          doy: 4 // 4 days need to be within the year to be considered the first week

        },
        dir: 'ltr',
        buttonText: {
          prev: 'prev',
          next: 'next',
          prevYear: 'prev year',
          nextYear: 'next year',
          year: 'year',
          today: 'today',
          month: 'month',
          week: 'week',
          day: 'day',
          list: 'list'
        },
        weekLabel: 'W',
        allDayText: 'all-day',
        eventLimitText: 'more',
        noEventsMessage: 'No events to display'
      };

      function parseRawLocales(explicitRawLocales) {
        var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';
        var globalArray = window['FullCalendarLocalesAll'] || []; // from locales-all.js

        var globalObject = window['FullCalendarLocales'] || {}; // from locales/*.js. keys are meaningless

        var allRawLocales = globalArray.concat( // globalArray is low prio
        hashValuesToArray(globalObject), // medium prio
        explicitRawLocales // highest prio
        );
        var rawLocaleMap = {
          en: RAW_EN_LOCALE // necessary?

        };

        for (var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++) {
          var rawLocale = allRawLocales_1[_i];
          rawLocaleMap[rawLocale.code] = rawLocale;
        }

        return {
          map: rawLocaleMap,
          defaultCode: defaultCode
        };
      }

      function buildLocale(inputSingular, available) {
        if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {
          return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);
        } else {
          return queryLocale(inputSingular, available);
        }
      }

      function queryLocale(codeArg, available) {
        var codes = [].concat(codeArg || []); // will convert to array

        var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;
        return parseLocale(codeArg, codes, raw);
      }

      function queryRawLocale(codes, available) {
        for (var i = 0; i < codes.length; i++) {
          var parts = codes[i].toLocaleLowerCase().split('-');

          for (var j = parts.length; j > 0; j--) {
            var simpleId = parts.slice(0, j).join('-');

            if (available[simpleId]) {
              return available[simpleId];
            }
          }
        }

        return null;
      }

      function parseLocale(codeArg, codes, raw) {
        var merged = mergeProps([RAW_EN_LOCALE, raw], ['buttonText']);
        delete merged.code; // don't want this part of the options

        var week = merged.week;
        delete merged.week;
        return {
          codeArg: codeArg,
          codes: codes,
          week: week,
          simpleNumberFormat: new Intl.NumberFormat(codeArg),
          options: merged
        };
      }

      var OptionsManager =
      /** @class */
      function () {
        function OptionsManager(overrides) {
          this.overrides = _assign({}, overrides); // make a copy

          this.dynamicOverrides = {};
          this.compute();
        }

        OptionsManager.prototype.mutate = function (updates, removals, isDynamic) {
          if (!Object.keys(updates).length && !removals.length) {
            return;
          }

          var overrideHash = isDynamic ? this.dynamicOverrides : this.overrides;

          _assign(overrideHash, updates);

          for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {
            var propName = removals_1[_i];
            delete overrideHash[propName];
          }

          this.compute();
        }; // Computes the flattened options hash for the calendar and assigns to `this.options`.
        // Assumes this.overrides and this.dynamicOverrides have already been initialized.


        OptionsManager.prototype.compute = function () {
          // TODO: not a very efficient system
          var locales = firstDefined( // explicit locale option given?
          this.dynamicOverrides.locales, this.overrides.locales, globalDefaults.locales);
          var locale = firstDefined( // explicit locales option given?
          this.dynamicOverrides.locale, this.overrides.locale, globalDefaults.locale);
          var available = parseRawLocales(locales);
          var localeDefaults = buildLocale(locale || available.defaultCode, available.map).options;
          var dir = firstDefined( // based on options computed so far, is direction RTL?
          this.dynamicOverrides.dir, this.overrides.dir, localeDefaults.dir);
          var dirDefaults = dir === 'rtl' ? rtlDefaults : {};
          this.dirDefaults = dirDefaults;
          this.localeDefaults = localeDefaults;
          this.computed = mergeOptions([globalDefaults, dirDefaults, localeDefaults, this.overrides, this.dynamicOverrides]);
        };

        return OptionsManager;
      }();

      var calendarSystemClassMap = {};

      function registerCalendarSystem(name, theClass) {
        calendarSystemClassMap[name] = theClass;
      }

      function createCalendarSystem(name) {
        return new calendarSystemClassMap[name]();
      }

      var GregorianCalendarSystem =
      /** @class */
      function () {
        function GregorianCalendarSystem() {}

        GregorianCalendarSystem.prototype.getMarkerYear = function (d) {
          return d.getUTCFullYear();
        };

        GregorianCalendarSystem.prototype.getMarkerMonth = function (d) {
          return d.getUTCMonth();
        };

        GregorianCalendarSystem.prototype.getMarkerDay = function (d) {
          return d.getUTCDate();
        };

        GregorianCalendarSystem.prototype.arrayToMarker = function (arr) {
          return arrayToUtcDate(arr);
        };

        GregorianCalendarSystem.prototype.markerToArray = function (marker) {
          return dateToUtcArray(marker);
        };

        return GregorianCalendarSystem;
      }();

      registerCalendarSystem('gregory', GregorianCalendarSystem);
      var ISO_RE = /^\s*(\d{4})(-(\d{2})(-(\d{2})([T ](\d{2}):(\d{2})(:(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;

      function parse(str) {
        var m = ISO_RE.exec(str);

        if (m) {
          var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number('0.' + m[12]) * 1000 : 0));

          if (isValidDate(marker)) {
            var timeZoneOffset = null;

            if (m[13]) {
              timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 + Number(m[18] || 0));
            }

            return {
              marker: marker,
              isTimeUnspecified: !m[6],
              timeZoneOffset: timeZoneOffset
            };
          }
        }

        return null;
      }

      var DateEnv =
      /** @class */
      function () {
        function DateEnv(settings) {
          var timeZone = this.timeZone = settings.timeZone;
          var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';

          if (settings.namedTimeZoneImpl && isNamedTimeZone) {
            this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);
          }

          this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);
          this.calendarSystem = createCalendarSystem(settings.calendarSystem);
          this.locale = settings.locale;
          this.weekDow = settings.locale.week.dow;
          this.weekDoy = settings.locale.week.doy;

          if (settings.weekNumberCalculation === 'ISO') {
            this.weekDow = 1;
            this.weekDoy = 4;
          }

          if (typeof settings.firstDay === 'number') {
            this.weekDow = settings.firstDay;
          }

          if (typeof settings.weekNumberCalculation === 'function') {
            this.weekNumberFunc = settings.weekNumberCalculation;
          }

          this.weekLabel = settings.weekLabel != null ? settings.weekLabel : settings.locale.options.weekLabel;
          this.cmdFormatter = settings.cmdFormatter;
        } // Creating / Parsing


        DateEnv.prototype.createMarker = function (input) {
          var meta = this.createMarkerMeta(input);

          if (meta === null) {
            return null;
          }

          return meta.marker;
        };

        DateEnv.prototype.createNowMarker = function () {
          if (this.canComputeOffset) {
            return this.timestampToMarker(new Date().valueOf());
          } else {
            // if we can't compute the current date val for a timezone,
            // better to give the current local date vals than UTC
            return arrayToUtcDate(dateToLocalArray(new Date()));
          }
        };

        DateEnv.prototype.createMarkerMeta = function (input) {
          if (typeof input === 'string') {
            return this.parse(input);
          }

          var marker = null;

          if (typeof input === 'number') {
            marker = this.timestampToMarker(input);
          } else if (input instanceof Date) {
            input = input.valueOf();

            if (!isNaN(input)) {
              marker = this.timestampToMarker(input);
            }
          } else if (Array.isArray(input)) {
            marker = arrayToUtcDate(input);
          }

          if (marker === null || !isValidDate(marker)) {
            return null;
          }

          return {
            marker: marker,
            isTimeUnspecified: false,
            forcedTzo: null
          };
        };

        DateEnv.prototype.parse = function (s) {
          var parts = parse(s);

          if (parts === null) {
            return null;
          }

          var marker = parts.marker;
          var forcedTzo = null;

          if (parts.timeZoneOffset !== null) {
            if (this.canComputeOffset) {
              marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);
            } else {
              forcedTzo = parts.timeZoneOffset;
            }
          }

          return {
            marker: marker,
            isTimeUnspecified: parts.isTimeUnspecified,
            forcedTzo: forcedTzo
          };
        }; // Accessors


        DateEnv.prototype.getYear = function (marker) {
          return this.calendarSystem.getMarkerYear(marker);
        };

        DateEnv.prototype.getMonth = function (marker) {
          return this.calendarSystem.getMarkerMonth(marker);
        }; // Adding / Subtracting


        DateEnv.prototype.add = function (marker, dur) {
          var a = this.calendarSystem.markerToArray(marker);
          a[0] += dur.years;
          a[1] += dur.months;
          a[2] += dur.days;
          a[6] += dur.milliseconds;
          return this.calendarSystem.arrayToMarker(a);
        };

        DateEnv.prototype.subtract = function (marker, dur) {
          var a = this.calendarSystem.markerToArray(marker);
          a[0] -= dur.years;
          a[1] -= dur.months;
          a[2] -= dur.days;
          a[6] -= dur.milliseconds;
          return this.calendarSystem.arrayToMarker(a);
        };

        DateEnv.prototype.addYears = function (marker, n) {
          var a = this.calendarSystem.markerToArray(marker);
          a[0] += n;
          return this.calendarSystem.arrayToMarker(a);
        };

        DateEnv.prototype.addMonths = function (marker, n) {
          var a = this.calendarSystem.markerToArray(marker);
          a[1] += n;
          return this.calendarSystem.arrayToMarker(a);
        }; // Diffing Whole Units


        DateEnv.prototype.diffWholeYears = function (m0, m1) {
          var calendarSystem = this.calendarSystem;

          if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) && calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {
            return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);
          }

          return null;
        };

        DateEnv.prototype.diffWholeMonths = function (m0, m1) {
          var calendarSystem = this.calendarSystem;

          if (timeAsMs(m0) === timeAsMs(m1) && calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {
            return calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0) + (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;
          }

          return null;
        }; // Range / Duration


        DateEnv.prototype.greatestWholeUnit = function (m0, m1) {
          var n = this.diffWholeYears(m0, m1);

          if (n !== null) {
            return {
              unit: 'year',
              value: n
            };
          }

          n = this.diffWholeMonths(m0, m1);

          if (n !== null) {
            return {
              unit: 'month',
              value: n
            };
          }

          n = diffWholeWeeks(m0, m1);

          if (n !== null) {
            return {
              unit: 'week',
              value: n
            };
          }

          n = diffWholeDays(m0, m1);

          if (n !== null) {
            return {
              unit: 'day',
              value: n
            };
          }

          n = diffHours(m0, m1);

          if (isInt(n)) {
            return {
              unit: 'hour',
              value: n
            };
          }

          n = diffMinutes(m0, m1);

          if (isInt(n)) {
            return {
              unit: 'minute',
              value: n
            };
          }

          n = diffSeconds(m0, m1);

          if (isInt(n)) {
            return {
              unit: 'second',
              value: n
            };
          }

          return {
            unit: 'millisecond',
            value: m1.valueOf() - m0.valueOf()
          };
        };

        DateEnv.prototype.countDurationsBetween = function (m0, m1, d) {
          // TODO: can use greatestWholeUnit
          var diff;

          if (d.years) {
            diff = this.diffWholeYears(m0, m1);

            if (diff !== null) {
              return diff / asRoughYears(d);
            }
          }

          if (d.months) {
            diff = this.diffWholeMonths(m0, m1);

            if (diff !== null) {
              return diff / asRoughMonths(d);
            }
          }

          if (d.days) {
            diff = diffWholeDays(m0, m1);

            if (diff !== null) {
              return diff / asRoughDays(d);
            }
          }

          return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);
        }; // Start-Of


        DateEnv.prototype.startOf = function (m, unit) {
          if (unit === 'year') {
            return this.startOfYear(m);
          } else if (unit === 'month') {
            return this.startOfMonth(m);
          } else if (unit === 'week') {
            return this.startOfWeek(m);
          } else if (unit === 'day') {
            return startOfDay(m);
          } else if (unit === 'hour') {
            return startOfHour(m);
          } else if (unit === 'minute') {
            return startOfMinute(m);
          } else if (unit === 'second') {
            return startOfSecond(m);
          }
        };

        DateEnv.prototype.startOfYear = function (m) {
          return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m)]);
        };

        DateEnv.prototype.startOfMonth = function (m) {
          return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m)]);
        };

        DateEnv.prototype.startOfWeek = function (m) {
          return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m), this.calendarSystem.getMarkerMonth(m), m.getUTCDate() - (m.getUTCDay() - this.weekDow + 7) % 7]);
        }; // Week Number


        DateEnv.prototype.computeWeekNumber = function (marker) {
          if (this.weekNumberFunc) {
            return this.weekNumberFunc(this.toDate(marker));
          } else {
            return weekOfYear(marker, this.weekDow, this.weekDoy);
          }
        }; // TODO: choke on timeZoneName: long


        DateEnv.prototype.format = function (marker, formatter, dateOptions) {
          if (dateOptions === void 0) {
            dateOptions = {};
          }

          return formatter.format({
            marker: marker,
            timeZoneOffset: dateOptions.forcedTzo != null ? dateOptions.forcedTzo : this.offsetForMarker(marker)
          }, this);
        };

        DateEnv.prototype.formatRange = function (start, end, formatter, dateOptions) {
          if (dateOptions === void 0) {
            dateOptions = {};
          }

          if (dateOptions.isEndExclusive) {
            end = addMs(end, -1);
          }

          return formatter.formatRange({
            marker: start,
            timeZoneOffset: dateOptions.forcedStartTzo != null ? dateOptions.forcedStartTzo : this.offsetForMarker(start)
          }, {
            marker: end,
            timeZoneOffset: dateOptions.forcedEndTzo != null ? dateOptions.forcedEndTzo : this.offsetForMarker(end)
          }, this);
        };

        DateEnv.prototype.formatIso = function (marker, extraOptions) {
          if (extraOptions === void 0) {
            extraOptions = {};
          }

          var timeZoneOffset = null;

          if (!extraOptions.omitTimeZoneOffset) {
            if (extraOptions.forcedTzo != null) {
              timeZoneOffset = extraOptions.forcedTzo;
            } else {
              timeZoneOffset = this.offsetForMarker(marker);
            }
          }

          return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);
        }; // TimeZone


        DateEnv.prototype.timestampToMarker = function (ms) {
          if (this.timeZone === 'local') {
            return arrayToUtcDate(dateToLocalArray(new Date(ms)));
          } else if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {
            return new Date(ms);
          } else {
            return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));
          }
        };

        DateEnv.prototype.offsetForMarker = function (m) {
          if (this.timeZone === 'local') {
            return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert "inverse" offset to "normal" offset
          } else if (this.timeZone === 'UTC') {
            return 0;
          } else if (this.namedTimeZoneImpl) {
            return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));
          }

          return null;
        }; // Conversion


        DateEnv.prototype.toDate = function (m, forcedTzo) {
          if (this.timeZone === 'local') {
            return arrayToLocalDate(dateToUtcArray(m));
          } else if (this.timeZone === 'UTC') {
            return new Date(m.valueOf()); // make sure it's a copy
          } else if (!this.namedTimeZoneImpl) {
            return new Date(m.valueOf() - (forcedTzo || 0));
          } else {
            return new Date(m.valueOf() - this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60 // convert minutes -> ms
            );
          }
        };

        return DateEnv;
      }();

      var SIMPLE_SOURCE_PROPS = {
        id: String,
        allDayDefault: Boolean,
        eventDataTransform: Function,
        success: Function,
        failure: Function
      };
      var uid$2 = 0;

      function doesSourceNeedRange(eventSource, calendar) {
        var defs = calendar.pluginSystem.hooks.eventSourceDefs;
        return !defs[eventSource.sourceDefId].ignoreRange;
      }

      function parseEventSource(raw, calendar) {
        var defs = calendar.pluginSystem.hooks.eventSourceDefs;

        for (var i = defs.length - 1; i >= 0; i--) {
          // later-added plugins take precedence
          var def = defs[i];
          var meta = def.parseMeta(raw);

          if (meta) {
            var res = parseEventSourceProps(typeof raw === 'object' ? raw : {}, meta, i, calendar);
            res._raw = raw;
            return res;
          }
        }

        return null;
      }

      function parseEventSourceProps(raw, meta, sourceDefId, calendar) {
        var leftovers0 = {};
        var props = refineProps(raw, SIMPLE_SOURCE_PROPS, {}, leftovers0);
        var leftovers1 = {};
        var ui = processUnscopedUiProps(leftovers0, calendar, leftovers1);
        props.isFetching = false;
        props.latestFetchId = '';
        props.fetchRange = null;
        props.publicId = String(raw.id || '');
        props.sourceId = String(uid$2++);
        props.sourceDefId = sourceDefId;
        props.meta = meta;
        props.ui = ui;
        props.extendedProps = leftovers1;
        return props;
      }

      function reduceEventSources(eventSources, action, dateProfile, calendar) {
        switch (action.type) {
          case 'ADD_EVENT_SOURCES':
            // already parsed
            return addSources(eventSources, action.sources, dateProfile ? dateProfile.activeRange : null, calendar);

          case 'REMOVE_EVENT_SOURCE':
            return removeSource(eventSources, action.sourceId);

          case 'PREV': // TODO: how do we track all actions that affect dateProfile :(

          case 'NEXT':
          case 'SET_DATE':
          case 'SET_VIEW_TYPE':
            if (dateProfile) {
              return fetchDirtySources(eventSources, dateProfile.activeRange, calendar);
            } else {
              return eventSources;
            }

          case 'FETCH_EVENT_SOURCES':
          case 'CHANGE_TIMEZONE':
            return fetchSourcesByIds(eventSources, action.sourceIds ? arrayToHash(action.sourceIds) : excludeStaticSources(eventSources, calendar), dateProfile ? dateProfile.activeRange : null, calendar);

          case 'RECEIVE_EVENTS':
          case 'RECEIVE_EVENT_ERROR':
            return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);

          case 'REMOVE_ALL_EVENT_SOURCES':
            return {};

          default:
            return eventSources;
        }
      }

      var uid$3 = 0;

      function addSources(eventSourceHash, sources, fetchRange, calendar) {
        var hash = {};

        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {
          var source = sources_1[_i];
          hash[source.sourceId] = source;
        }

        if (fetchRange) {
          hash = fetchDirtySources(hash, fetchRange, calendar);
        }

        return _assign({}, eventSourceHash, hash);
      }

      function removeSource(eventSourceHash, sourceId) {
        return filterHash(eventSourceHash, function (eventSource) {
          return eventSource.sourceId !== sourceId;
        });
      }

      function fetchDirtySources(sourceHash, fetchRange, calendar) {
        return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {
          return isSourceDirty(eventSource, fetchRange, calendar);
        }), fetchRange, calendar);
      }

      function isSourceDirty(eventSource, fetchRange, calendar) {
        if (!doesSourceNeedRange(eventSource, calendar)) {
          return !eventSource.latestFetchId;
        } else {
          return !calendar.opt('lazyFetching') || !eventSource.fetchRange || eventSource.isFetching || // always cancel outdated in-progress fetches
          fetchRange.start < eventSource.fetchRange.start || fetchRange.end > eventSource.fetchRange.end;
        }
      }

      function fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, calendar) {
        var nextSources = {};

        for (var sourceId in prevSources) {
          var source = prevSources[sourceId];

          if (sourceIdHash[sourceId]) {
            nextSources[sourceId] = fetchSource(source, fetchRange, calendar);
          } else {
            nextSources[sourceId] = source;
          }
        }

        return nextSources;
      }

      function fetchSource(eventSource, fetchRange, calendar) {
        var sourceDef = calendar.pluginSystem.hooks.eventSourceDefs[eventSource.sourceDefId];
        var fetchId = String(uid$3++);
        sourceDef.fetch({
          eventSource: eventSource,
          calendar: calendar,
          range: fetchRange
        }, function (res) {
          var rawEvents = res.rawEvents;
          var calSuccess = calendar.opt('eventSourceSuccess');
          var calSuccessRes;
          var sourceSuccessRes;

          if (eventSource.success) {
            sourceSuccessRes = eventSource.success(rawEvents, res.xhr);
          }

          if (calSuccess) {
            calSuccessRes = calSuccess(rawEvents, res.xhr);
          }

          rawEvents = sourceSuccessRes || calSuccessRes || rawEvents;
          calendar.dispatch({
            type: 'RECEIVE_EVENTS',
            sourceId: eventSource.sourceId,
            fetchId: fetchId,
            fetchRange: fetchRange,
            rawEvents: rawEvents
          });
        }, function (error) {
          var callFailure = calendar.opt('eventSourceFailure');
          console.warn(error.message, error);

          if (eventSource.failure) {
            eventSource.failure(error);
          }

          if (callFailure) {
            callFailure(error);
          }

          calendar.dispatch({
            type: 'RECEIVE_EVENT_ERROR',
            sourceId: eventSource.sourceId,
            fetchId: fetchId,
            fetchRange: fetchRange,
            error: error
          });
        });
        return _assign({}, eventSource, {
          isFetching: true,
          latestFetchId: fetchId
        });
      }

      function receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {
        var _a;

        var eventSource = sourceHash[sourceId];

        if (eventSource && // not already removed
        fetchId === eventSource.latestFetchId) {
          return _assign({}, sourceHash, (_a = {}, _a[sourceId] = _assign({}, eventSource, {
            isFetching: false,
            fetchRange: fetchRange // also serves as a marker that at least one fetch has completed

          }), _a));
        }

        return sourceHash;
      }

      function excludeStaticSources(eventSources, calendar) {
        return filterHash(eventSources, function (eventSource) {
          return doesSourceNeedRange(eventSource, calendar);
        });
      }

      var DateProfileGenerator =
      /** @class */
      function () {
        function DateProfileGenerator(viewSpec, calendar) {
          this.viewSpec = viewSpec;
          this.options = viewSpec.options;
          this.dateEnv = calendar.dateEnv;
          this.calendar = calendar;
          this.initHiddenDays();
        }
        /* Date Range Computation
        ------------------------------------------------------------------------------------------------------------------*/
        // Builds a structure with info about what the dates/ranges will be for the "prev" view.


        DateProfileGenerator.prototype.buildPrev = function (currentDateProfile, currentDate) {
          var dateEnv = this.dateEnv;
          var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
          currentDateProfile.dateIncrement);
          return this.build(prevDate, -1);
        }; // Builds a structure with info about what the dates/ranges will be for the "next" view.


        DateProfileGenerator.prototype.buildNext = function (currentDateProfile, currentDate) {
          var dateEnv = this.dateEnv;
          var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month
          currentDateProfile.dateIncrement);
          return this.build(nextDate, 1);
        }; // Builds a structure holding dates/ranges for rendering around the given date.
        // Optional direction param indicates whether the date is being incremented/decremented
        // from its previous value. decremented = -1, incremented = 1 (default).


        DateProfileGenerator.prototype.build = function (currentDate, direction, forceToValid) {
          if (forceToValid === void 0) {
            forceToValid = false;
          }

          var validRange;
          var minTime = null;
          var maxTime = null;
          var currentInfo;
          var isRangeAllDay;
          var renderRange;
          var activeRange;
          var isValid;
          validRange = this.buildValidRange();
          validRange = this.trimHiddenDays(validRange);

          if (forceToValid) {
            currentDate = constrainMarkerToRange(currentDate, validRange);
          }

          currentInfo = this.buildCurrentRangeInfo(currentDate, direction);
          isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);
          renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);
          renderRange = this.trimHiddenDays(renderRange);
          activeRange = renderRange;

          if (!this.options.showNonCurrentDates) {
            activeRange = intersectRanges(activeRange, currentInfo.range);
          }

          minTime = createDuration(this.options.minTime);
          maxTime = createDuration(this.options.maxTime);
          activeRange = this.adjustActiveRange(activeRange, minTime, maxTime);
          activeRange = intersectRanges(activeRange, validRange); // might return null
          // it's invalid if the originally requested date is not contained,
          // or if the range is completely outside of the valid range.

          isValid = rangesIntersect(currentInfo.range, validRange);
          return {
            // constraint for where prev/next operations can go and where events can be dragged/resized to.
            // an object with optional start and end properties.
            validRange: validRange,
            // range the view is formally responsible for.
            // for example, a month view might have 1st-31st, excluding padded dates
            currentRange: currentInfo.range,
            // name of largest unit being displayed, like "month" or "week"
            currentRangeUnit: currentInfo.unit,
            isRangeAllDay: isRangeAllDay,
            // dates that display events and accept drag-n-drop
            // will be `null` if no dates accept events
            activeRange: activeRange,
            // date range with a rendered skeleton
            // includes not-active days that need some sort of DOM
            renderRange: renderRange,
            // Duration object that denotes the first visible time of any given day
            minTime: minTime,
            // Duration object that denotes the exclusive visible end time of any given day
            maxTime: maxTime,
            isValid: isValid,
            // how far the current date will move for a prev/next operation
            dateIncrement: this.buildDateIncrement(currentInfo.duration) // pass a fallback (might be null) ^

          };
        }; // Builds an object with optional start/end properties.
        // Indicates the minimum/maximum dates to display.
        // not responsible for trimming hidden days.


        DateProfileGenerator.prototype.buildValidRange = function () {
          return this.getRangeOption('validRange', this.calendar.getNow()) || {
            start: null,
            end: null
          }; // completely open-ended
        }; // Builds a structure with info about the "current" range, the range that is
        // highlighted as being the current month for example.
        // See build() for a description of `direction`.
        // Guaranteed to have `range` and `unit` properties. `duration` is optional.


        DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {
          var _a = this,
              viewSpec = _a.viewSpec,
              dateEnv = _a.dateEnv;

          var duration = null;
          var unit = null;
          var range = null;
          var dayCount;

          if (viewSpec.duration) {
            duration = viewSpec.duration;
            unit = viewSpec.durationUnit;
            range = this.buildRangeFromDuration(date, direction, duration, unit);
          } else if (dayCount = this.options.dayCount) {
            unit = 'day';
            range = this.buildRangeFromDayCount(date, direction, dayCount);
          } else if (range = this.buildCustomVisibleRange(date)) {
            unit = dateEnv.greatestWholeUnit(range.start, range.end).unit;
          } else {
            duration = this.getFallbackDuration();
            unit = greatestDurationDenominator(duration).unit;
            range = this.buildRangeFromDuration(date, direction, duration, unit);
          }

          return {
            duration: duration,
            unit: unit,
            range: range
          };
        };

        DateProfileGenerator.prototype.getFallbackDuration = function () {
          return createDuration({
            day: 1
          });
        }; // Returns a new activeRange to have time values (un-ambiguate)
        // minTime or maxTime causes the range to expand.


        DateProfileGenerator.prototype.adjustActiveRange = function (range, minTime, maxTime) {
          var dateEnv = this.dateEnv;
          var start = range.start;
          var end = range.end;

          if (this.viewSpec["class"].prototype.usesMinMaxTime) {
            // expand active range if minTime is negative (why not when positive?)
            if (asRoughDays(minTime) < 0) {
              start = startOfDay(start); // necessary?

              start = dateEnv.add(start, minTime);
            } // expand active range if maxTime is beyond one day (why not when positive?)


            if (asRoughDays(maxTime) > 1) {
              end = startOfDay(end); // necessary?

              end = addDays(end, -1);
              end = dateEnv.add(end, maxTime);
            }
          }

          return {
            start: start,
            end: end
          };
        }; // Builds the "current" range when it is specified as an explicit duration.
        // `unit` is the already-computed greatestDurationDenominator unit of duration.


        DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {
          var dateEnv = this.dateEnv;
          var alignment = this.options.dateAlignment;
          var dateIncrementInput;
          var dateIncrementDuration;
          var start;
          var end;
          var res; // compute what the alignment should be

          if (!alignment) {
            dateIncrementInput = this.options.dateIncrement;

            if (dateIncrementInput) {
              dateIncrementDuration = createDuration(dateIncrementInput); // use the smaller of the two units

              if (asRoughMs(dateIncrementDuration) < asRoughMs(duration)) {
                alignment = greatestDurationDenominator(dateIncrementDuration, !getWeeksFromInput(dateIncrementInput)).unit;
              } else {
                alignment = unit;
              }
            } else {
              alignment = unit;
            }
          } // if the view displays a single day or smaller


          if (asRoughDays(duration) <= 1) {
            if (this.isHiddenDay(start)) {
              start = this.skipHiddenDays(start, direction);
              start = startOfDay(start);
            }
          }

          function computeRes() {
            start = dateEnv.startOf(date, alignment);
            end = dateEnv.add(start, duration);
            res = {
              start: start,
              end: end
            };
          }

          computeRes(); // if range is completely enveloped by hidden days, go past the hidden days

          if (!this.trimHiddenDays(res)) {
            date = this.skipHiddenDays(date, direction);
            computeRes();
          }

          return res;
        }; // Builds the "current" range when a dayCount is specified.


        DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {
          var dateEnv = this.dateEnv;
          var customAlignment = this.options.dateAlignment;
          var runningCount = 0;
          var start = date;
          var end;

          if (customAlignment) {
            start = dateEnv.startOf(start, customAlignment);
          }

          start = startOfDay(start);
          start = this.skipHiddenDays(start, direction);
          end = start;

          do {
            end = addDays(end, 1);

            if (!this.isHiddenDay(end)) {
              runningCount++;
            }
          } while (runningCount < dayCount);

          return {
            start: start,
            end: end
          };
        }; // Builds a normalized range object for the "visible" range,
        // which is a way to define the currentRange and activeRange at the same time.


        DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {
          var dateEnv = this.dateEnv;
          var visibleRange = this.getRangeOption('visibleRange', dateEnv.toDate(date));

          if (visibleRange && (visibleRange.start == null || visibleRange.end == null)) {
            return null;
          }

          return visibleRange;
        }; // Computes the range that will represent the element/cells for *rendering*,
        // but which may have voided days/times.
        // not responsible for trimming hidden days.


        DateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {
          return currentRange;
        }; // Compute the duration value that should be added/substracted to the current date
        // when a prev/next operation happens.


        DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {
          var dateIncrementInput = this.options.dateIncrement;
          var customAlignment;

          if (dateIncrementInput) {
            return createDuration(dateIncrementInput);
          } else if (customAlignment = this.options.dateAlignment) {
            return createDuration(1, customAlignment);
          } else if (fallback) {
            return fallback;
          } else {
            return createDuration({
              days: 1
            });
          }
        }; // Arguments after name will be forwarded to a hypothetical function value
        // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.
        // Always clone your objects if you fear mutation.


        DateProfileGenerator.prototype.getRangeOption = function (name) {
          var otherArgs = [];

          for (var _i = 1; _i < arguments.length; _i++) {
            otherArgs[_i - 1] = arguments[_i];
          }

          var val = this.options[name];

          if (typeof val === 'function') {
            val = val.apply(null, otherArgs);
          }

          if (val) {
            val = parseRange(val, this.dateEnv);
          }

          if (val) {
            val = computeVisibleDayRange(val);
          }

          return val;
        };
        /* Hidden Days
        ------------------------------------------------------------------------------------------------------------------*/
        // Initializes internal variables related to calculating hidden days-of-week


        DateProfileGenerator.prototype.initHiddenDays = function () {
          var hiddenDays = this.options.hiddenDays || []; // array of day-of-week indices that are hidden

          var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)

          var dayCnt = 0;
          var i;

          if (this.options.weekends === false) {
            hiddenDays.push(0, 6); // 0=sunday, 6=saturday
          }

          for (i = 0; i < 7; i++) {
            if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {
              dayCnt++;
            }
          }

          if (!dayCnt) {
            throw new Error('invalid hiddenDays'); // all days were hidden? bad.
          }

          this.isHiddenDayHash = isHiddenDayHash;
        }; // Remove days from the beginning and end of the range that are computed as hidden.
        // If the whole range is trimmed off, returns null


        DateProfileGenerator.prototype.trimHiddenDays = function (range) {
          var start = range.start;
          var end = range.end;

          if (start) {
            start = this.skipHiddenDays(start);
          }

          if (end) {
            end = this.skipHiddenDays(end, -1, true);
          }

          if (start == null || end == null || start < end) {
            return {
              start: start,
              end: end
            };
          }

          return null;
        }; // Is the current day hidden?
        // `day` is a day-of-week index (0-6), or a Date (used for UTC)


        DateProfileGenerator.prototype.isHiddenDay = function (day) {
          if (day instanceof Date) {
            day = day.getUTCDay();
          }

          return this.isHiddenDayHash[day];
        }; // Incrementing the current day until it is no longer a hidden day, returning a copy.
        // DOES NOT CONSIDER validRange!
        // If the initial value of `date` is not a hidden day, don't do anything.
        // Pass `isExclusive` as `true` if you are dealing with an end date.
        // `inc` defaults to `1` (increment one day forward each time)


        DateProfileGenerator.prototype.skipHiddenDays = function (date, inc, isExclusive) {
          if (inc === void 0) {
            inc = 1;
          }

          if (isExclusive === void 0) {
            isExclusive = false;
          }

          while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {
            date = addDays(date, inc);
          }

          return date;
        };

        return DateProfileGenerator;
      }(); // TODO: find a way to avoid comparing DateProfiles. it's tedious


      function isDateProfilesEqual(p0, p1) {
        return rangesEqual(p0.validRange, p1.validRange) && rangesEqual(p0.activeRange, p1.activeRange) && rangesEqual(p0.renderRange, p1.renderRange) && durationsEqual(p0.minTime, p1.minTime) && durationsEqual(p0.maxTime, p1.maxTime);
        /*
        TODO: compare more?
          currentRange: DateRange
          currentRangeUnit: string
          isRangeAllDay: boolean
          isValid: boolean
          dateIncrement: Duration
        */
      }

      function reduce(state, action, calendar) {
        var viewType = reduceViewType(state.viewType, action);
        var dateProfile = reduceDateProfile(state.dateProfile, action, state.currentDate, viewType, calendar);
        var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendar);

        var nextState = _assign({}, state, {
          viewType: viewType,
          dateProfile: dateProfile,
          currentDate: reduceCurrentDate(state.currentDate, action, dateProfile),
          eventSources: eventSources,
          eventStore: reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendar),
          dateSelection: reduceDateSelection(state.dateSelection, action, calendar),
          eventSelection: reduceSelectedEvent(state.eventSelection, action),
          eventDrag: reduceEventDrag(state.eventDrag, action, eventSources, calendar),
          eventResize: reduceEventResize(state.eventResize, action, eventSources, calendar),
          eventSourceLoadingLevel: computeLoadingLevel(eventSources),
          loadingLevel: computeLoadingLevel(eventSources)
        });

        for (var _i = 0, _a = calendar.pluginSystem.hooks.reducers; _i < _a.length; _i++) {
          var reducerFunc = _a[_i];
          nextState = reducerFunc(nextState, action, calendar);
        } // console.log(action.type, nextState)


        return nextState;
      }

      function reduceViewType(currentViewType, action) {
        switch (action.type) {
          case 'SET_VIEW_TYPE':
            return action.viewType;

          default:
            return currentViewType;
        }
      }

      function reduceDateProfile(currentDateProfile, action, currentDate, viewType, calendar) {
        var newDateProfile;

        switch (action.type) {
          case 'PREV':
            newDateProfile = calendar.dateProfileGenerators[viewType].buildPrev(currentDateProfile, currentDate);
            break;

          case 'NEXT':
            newDateProfile = calendar.dateProfileGenerators[viewType].buildNext(currentDateProfile, currentDate);
            break;

          case 'SET_DATE':
            if (!currentDateProfile.activeRange || !rangeContainsMarker(currentDateProfile.currentRange, action.dateMarker)) {
              newDateProfile = calendar.dateProfileGenerators[viewType].build(action.dateMarker, undefined, true // forceToValid
              );
            }

            break;

          case 'SET_VIEW_TYPE':
            var generator = calendar.dateProfileGenerators[viewType];

            if (!generator) {
              throw new Error(viewType ? 'The FullCalendar view "' + viewType + '" does not exist. Make sure your plugins are loaded correctly.' : 'No available FullCalendar view plugins.');
            }

            newDateProfile = generator.build(action.dateMarker || currentDate, undefined, true // forceToValid
            );
            break;
        }

        if (newDateProfile && newDateProfile.isValid && !(currentDateProfile && isDateProfilesEqual(currentDateProfile, newDateProfile))) {
          return newDateProfile;
        } else {
          return currentDateProfile;
        }
      }

      function reduceCurrentDate(currentDate, action, dateProfile) {
        switch (action.type) {
          case 'PREV':
          case 'NEXT':
            if (!rangeContainsMarker(dateProfile.currentRange, currentDate)) {
              return dateProfile.currentRange.start;
            } else {
              return currentDate;
            }

          case 'SET_DATE':
          case 'SET_VIEW_TYPE':
            var newDate = action.dateMarker || currentDate;

            if (dateProfile.activeRange && !rangeContainsMarker(dateProfile.activeRange, newDate)) {
              return dateProfile.currentRange.start;
            } else {
              return newDate;
            }

          default:
            return currentDate;
        }
      }

      function reduceDateSelection(currentSelection, action, calendar) {
        switch (action.type) {
          case 'SELECT_DATES':
            return action.selection;

          case 'UNSELECT_DATES':
            return null;

          default:
            return currentSelection;
        }
      }

      function reduceSelectedEvent(currentInstanceId, action) {
        switch (action.type) {
          case 'SELECT_EVENT':
            return action.eventInstanceId;

          case 'UNSELECT_EVENT':
            return '';

          default:
            return currentInstanceId;
        }
      }

      function reduceEventDrag(currentDrag, action, sources, calendar) {
        switch (action.type) {
          case 'SET_EVENT_DRAG':
            var newDrag = action.state;
            return {
              affectedEvents: newDrag.affectedEvents,
              mutatedEvents: newDrag.mutatedEvents,
              isEvent: newDrag.isEvent,
              origSeg: newDrag.origSeg
            };

          case 'UNSET_EVENT_DRAG':
            return null;

          default:
            return currentDrag;
        }
      }

      function reduceEventResize(currentResize, action, sources, calendar) {
        switch (action.type) {
          case 'SET_EVENT_RESIZE':
            var newResize = action.state;
            return {
              affectedEvents: newResize.affectedEvents,
              mutatedEvents: newResize.mutatedEvents,
              isEvent: newResize.isEvent,
              origSeg: newResize.origSeg
            };

          case 'UNSET_EVENT_RESIZE':
            return null;

          default:
            return currentResize;
        }
      }

      function computeLoadingLevel(eventSources) {
        var cnt = 0;

        for (var sourceId in eventSources) {
          if (eventSources[sourceId].isFetching) {
            cnt++;
          }
        }

        return cnt;
      }

      var STANDARD_PROPS = {
        start: null,
        end: null,
        allDay: Boolean
      };

      function parseDateSpan(raw, dateEnv, defaultDuration) {
        var span = parseOpenDateSpan(raw, dateEnv);
        var range = span.range;

        if (!range.start) {
          return null;
        }

        if (!range.end) {
          if (defaultDuration == null) {
            return null;
          } else {
            range.end = dateEnv.add(range.start, defaultDuration);
          }
        }

        return span;
      }
      /*
      TODO: somehow combine with parseRange?
      Will return null if the start/end props were present but parsed invalidly.
      */


      function parseOpenDateSpan(raw, dateEnv) {
        var leftovers = {};
        var standardProps = refineProps(raw, STANDARD_PROPS, {}, leftovers);
        var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;
        var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;
        var allDay = standardProps.allDay;

        if (allDay == null) {
          allDay = startMeta && startMeta.isTimeUnspecified && (!endMeta || endMeta.isTimeUnspecified);
        } // use this leftover object as the selection object


        leftovers.range = {
          start: startMeta ? startMeta.marker : null,
          end: endMeta ? endMeta.marker : null
        };
        leftovers.allDay = allDay;
        return leftovers;
      }

      function isDateSpansEqual(span0, span1) {
        return rangesEqual(span0.range, span1.range) && span0.allDay === span1.allDay && isSpanPropsEqual(span0, span1);
      } // the NON-DATE-RELATED props


      function isSpanPropsEqual(span0, span1) {
        for (var propName in span1) {
          if (propName !== 'range' && propName !== 'allDay') {
            if (span0[propName] !== span1[propName]) {
              return false;
            }
          }
        } // are there any props that span0 has that span1 DOESN'T have?
        // both have range/allDay, so no need to special-case.


        for (var propName in span0) {
          if (!(propName in span1)) {
            return false;
          }
        }

        return true;
      }

      function buildDateSpanApi(span, dateEnv) {
        return {
          start: dateEnv.toDate(span.range.start),
          end: dateEnv.toDate(span.range.end),
          startStr: dateEnv.formatIso(span.range.start, {
            omitTime: span.allDay
          }),
          endStr: dateEnv.formatIso(span.range.end, {
            omitTime: span.allDay
          }),
          allDay: span.allDay
        };
      }

      function buildDatePointApi(span, dateEnv) {
        return {
          date: dateEnv.toDate(span.range.start),
          dateStr: dateEnv.formatIso(span.range.start, {
            omitTime: span.allDay
          }),
          allDay: span.allDay
        };
      }

      function fabricateEventRange(dateSpan, eventUiBases, calendar) {
        var def = parseEventDef({
          editable: false
        }, '', // sourceId
        dateSpan.allDay, true, // hasEnd
        calendar);
        return {
          def: def,
          ui: compileEventUi(def, eventUiBases),
          instance: createEventInstance(def.defId, dateSpan.range),
          range: dateSpan.range,
          isStart: true,
          isEnd: true
        };
      }

      function compileViewDefs(defaultConfigs, overrideConfigs) {
        var hash = {};
        var viewType;

        for (viewType in defaultConfigs) {
          ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
        }

        for (viewType in overrideConfigs) {
          ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);
        }

        return hash;
      }

      function ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
        if (hash[viewType]) {
          return hash[viewType];
        }

        var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);

        if (viewDef) {
          hash[viewType] = viewDef;
        }

        return viewDef;
      }

      function buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {
        var defaultConfig = defaultConfigs[viewType];
        var overrideConfig = overrideConfigs[viewType];

        var queryProp = function queryProp(name) {
          return defaultConfig && defaultConfig[name] !== null ? defaultConfig[name] : overrideConfig && overrideConfig[name] !== null ? overrideConfig[name] : null;
        };

        var theClass = queryProp('class');
        var superType = queryProp('superType');

        if (!superType && theClass) {
          superType = findViewNameBySubclass(theClass, overrideConfigs) || findViewNameBySubclass(theClass, defaultConfigs);
        }

        var superDef = null;

        if (superType) {
          if (superType === viewType) {
            throw new Error('Can\'t have a custom view type that references itself');
          }

          superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);
        }

        if (!theClass && superDef) {
          theClass = superDef["class"];
        }

        if (!theClass) {
          return null; // don't throw a warning, might be settings for a single-unit view
        }

        return {
          type: viewType,
          "class": theClass,
          defaults: _assign({}, superDef ? superDef.defaults : {}, defaultConfig ? defaultConfig.options : {}),
          overrides: _assign({}, superDef ? superDef.overrides : {}, overrideConfig ? overrideConfig.options : {})
        };
      }

      function findViewNameBySubclass(viewSubclass, configs) {
        var superProto = Object.getPrototypeOf(viewSubclass.prototype);

        for (var viewType in configs) {
          var parsed = configs[viewType]; // need DIRECT subclass, so instanceof won't do it

          if (parsed["class"] && parsed["class"].prototype === superProto) {
            return viewType;
          }
        }

        return '';
      }

      function parseViewConfigs(inputs) {
        return mapHash(inputs, parseViewConfig);
      }

      var VIEW_DEF_PROPS = {
        type: String,
        "class": null
      };

      function parseViewConfig(input) {
        if (typeof input === 'function') {
          input = {
            "class": input
          };
        }

        var options = {};
        var props = refineProps(input, VIEW_DEF_PROPS, {}, options);
        return {
          superType: props.type,
          "class": props["class"],
          options: options
        };
      }

      function buildViewSpecs(defaultInputs, optionsManager) {
        var defaultConfigs = parseViewConfigs(defaultInputs);
        var overrideConfigs = parseViewConfigs(optionsManager.overrides.views);
        var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);
        return mapHash(viewDefs, function (viewDef) {
          return buildViewSpec(viewDef, overrideConfigs, optionsManager);
        });
      }

      function buildViewSpec(viewDef, overrideConfigs, optionsManager) {
        var durationInput = viewDef.overrides.duration || viewDef.defaults.duration || optionsManager.dynamicOverrides.duration || optionsManager.overrides.duration;
        var duration = null;
        var durationUnit = '';
        var singleUnit = '';
        var singleUnitOverrides = {};

        if (durationInput) {
          duration = createDuration(durationInput);

          if (duration) {
            // valid?
            var denom = greatestDurationDenominator(duration, !getWeeksFromInput(durationInput));
            durationUnit = denom.unit;

            if (denom.value === 1) {
              singleUnit = durationUnit;
              singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].options : {};
            }
          }
        }

        var queryButtonText = function queryButtonText(options) {
          var buttonTextMap = options.buttonText || {};
          var buttonTextKey = viewDef.defaults.buttonTextKey;

          if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {
            return buttonTextMap[buttonTextKey];
          }

          if (buttonTextMap[viewDef.type] != null) {
            return buttonTextMap[viewDef.type];
          }

          if (buttonTextMap[singleUnit] != null) {
            return buttonTextMap[singleUnit];
          }
        };

        return {
          type: viewDef.type,
          "class": viewDef["class"],
          duration: duration,
          durationUnit: durationUnit,
          singleUnit: singleUnit,
          options: _assign({}, globalDefaults, viewDef.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, singleUnitOverrides, viewDef.overrides, optionsManager.dynamicOverrides),
          buttonTextOverride: queryButtonText(optionsManager.dynamicOverrides) || queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence
          viewDef.overrides.buttonText,
          buttonTextDefault: queryButtonText(optionsManager.localeDefaults) || queryButtonText(optionsManager.dirDefaults) || viewDef.defaults.buttonText || queryButtonText(globalDefaults) || viewDef.type // fall back to given view name

        };
      }

      var Toolbar =
      /** @class */
      function (_super) {
        __extends(Toolbar, _super);

        function Toolbar(extraClassName) {
          var _this = _super.call(this) || this;

          _this._renderLayout = memoizeRendering(_this.renderLayout, _this.unrenderLayout);
          _this._updateTitle = memoizeRendering(_this.updateTitle, null, [_this._renderLayout]);
          _this._updateActiveButton = memoizeRendering(_this.updateActiveButton, null, [_this._renderLayout]);
          _this._updateToday = memoizeRendering(_this.updateToday, null, [_this._renderLayout]);
          _this._updatePrev = memoizeRendering(_this.updatePrev, null, [_this._renderLayout]);
          _this._updateNext = memoizeRendering(_this.updateNext, null, [_this._renderLayout]);
          _this.el = createElement('div', {
            className: 'fc-toolbar ' + extraClassName
          });
          return _this;
        }

        Toolbar.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this._renderLayout.unrender(); // should unrender everything else


          removeElement(this.el);
        };

        Toolbar.prototype.render = function (props) {
          this._renderLayout(props.layout);

          this._updateTitle(props.title);

          this._updateActiveButton(props.activeButton);

          this._updateToday(props.isTodayEnabled);

          this._updatePrev(props.isPrevEnabled);

          this._updateNext(props.isNextEnabled);
        };

        Toolbar.prototype.renderLayout = function (layout) {
          var el = this.el;
          this.viewsWithButtons = [];
          appendToElement(el, this.renderSection('left', layout.left));
          appendToElement(el, this.renderSection('center', layout.center));
          appendToElement(el, this.renderSection('right', layout.right));
        };

        Toolbar.prototype.unrenderLayout = function () {
          this.el.innerHTML = '';
        };

        Toolbar.prototype.renderSection = function (position, buttonStr) {
          var _this = this;

          var _a = this.context,
              theme = _a.theme,
              calendar = _a.calendar;
          var optionsManager = calendar.optionsManager;
          var viewSpecs = calendar.viewSpecs;
          var sectionEl = createElement('div', {
            className: 'fc-' + position
          });
          var calendarCustomButtons = optionsManager.computed.customButtons || {};
          var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};
          var calendarButtonText = optionsManager.computed.buttonText || {};

          if (buttonStr) {
            buttonStr.split(' ').forEach(function (buttonGroupStr, i) {
              var groupChildren = [];
              var isOnlyButtons = true;
              var groupEl;
              buttonGroupStr.split(',').forEach(function (buttonName, j) {
                var customButtonProps;
                var viewSpec;
                var buttonClick;
                var buttonIcon; // only one of these will be set

                var buttonText; // "

                var buttonInnerHtml;
                var buttonClasses;
                var buttonEl;
                var buttonAriaAttr;

                if (buttonName === 'title') {
                  groupChildren.push(htmlToElement('<h2>&nbsp;</h2>')); // we always want it to take up height

                  isOnlyButtons = false;
                } else {
                  if (customButtonProps = calendarCustomButtons[buttonName]) {
                    buttonClick = function buttonClick(ev) {
                      if (customButtonProps.click) {
                        customButtonProps.click.call(buttonEl, ev);
                      }
                    };

                    (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = customButtonProps.text);
                  } else if (viewSpec = viewSpecs[buttonName]) {
                    _this.viewsWithButtons.push(buttonName);

                    buttonClick = function buttonClick() {
                      calendar.changeView(buttonName);
                    };

                    (buttonText = viewSpec.buttonTextOverride) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = viewSpec.buttonTextDefault);
                  } else if (calendar[buttonName]) {
                    // a calendar method
                    buttonClick = function buttonClick() {
                      calendar[buttonName]();
                    };

                    (buttonText = calendarButtonTextOverrides[buttonName]) || (buttonIcon = theme.getIconClass(buttonName)) || (buttonText = calendarButtonText[buttonName]); //            ^ everything else is considered default
                  }

                  if (buttonClick) {
                    buttonClasses = ['fc-' + buttonName + '-button', theme.getClass('button')];

                    if (buttonText) {
                      buttonInnerHtml = htmlEscape(buttonText);
                      buttonAriaAttr = '';
                    } else if (buttonIcon) {
                      buttonInnerHtml = "<span class='" + buttonIcon + "'></span>";
                      buttonAriaAttr = ' aria-label="' + buttonName + '"';
                    }

                    buttonEl = htmlToElement( // type="button" so that it doesn't submit a form
                    '<button type="button" class="' + buttonClasses.join(' ') + '"' + buttonAriaAttr + '>' + buttonInnerHtml + '</button>');
                    buttonEl.addEventListener('click', buttonClick);
                    groupChildren.push(buttonEl);
                  }
                }
              });

              if (groupChildren.length > 1) {
                groupEl = document.createElement('div');
                var buttonGroupClassName = theme.getClass('buttonGroup');

                if (isOnlyButtons && buttonGroupClassName) {
                  groupEl.classList.add(buttonGroupClassName);
                }

                appendToElement(groupEl, groupChildren);
                sectionEl.appendChild(groupEl);
              } else {
                appendToElement(sectionEl, groupChildren); // 1 or 0 children
              }
            });
          }

          return sectionEl;
        };

        Toolbar.prototype.updateToday = function (isTodayEnabled) {
          this.toggleButtonEnabled('today', isTodayEnabled);
        };

        Toolbar.prototype.updatePrev = function (isPrevEnabled) {
          this.toggleButtonEnabled('prev', isPrevEnabled);
        };

        Toolbar.prototype.updateNext = function (isNextEnabled) {
          this.toggleButtonEnabled('next', isNextEnabled);
        };

        Toolbar.prototype.updateTitle = function (text) {
          findElements(this.el, 'h2').forEach(function (titleEl) {
            titleEl.innerText = text;
          });
        };

        Toolbar.prototype.updateActiveButton = function (buttonName) {
          var theme = this.context.theme;
          var className = theme.getClass('buttonActive');
          findElements(this.el, 'button').forEach(function (buttonEl) {
            if (buttonName && buttonEl.classList.contains('fc-' + buttonName + '-button')) {
              buttonEl.classList.add(className);
            } else {
              buttonEl.classList.remove(className);
            }
          });
        };

        Toolbar.prototype.toggleButtonEnabled = function (buttonName, bool) {
          findElements(this.el, '.fc-' + buttonName + '-button').forEach(function (buttonEl) {
            buttonEl.disabled = !bool;
          });
        };

        return Toolbar;
      }(Component);

      var CalendarComponent =
      /** @class */
      function (_super) {
        __extends(CalendarComponent, _super);

        function CalendarComponent(el) {
          var _this = _super.call(this) || this;

          _this.elClassNames = [];
          _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);
          _this.renderToolbars = memoizeRendering(_this._renderToolbars, _this._unrenderToolbars, [_this.renderSkeleton]);
          _this.buildComponentContext = memoize(buildComponentContext);
          _this.buildViewPropTransformers = memoize(buildViewPropTransformers);
          _this.el = el;
          _this.computeTitle = memoize(computeTitle);
          _this.parseBusinessHours = memoize(function (input) {
            return parseBusinessHours(input, _this.context.calendar);
          });
          return _this;
        }

        CalendarComponent.prototype.render = function (props, context) {
          this.freezeHeight();
          var title = this.computeTitle(props.dateProfile, props.viewSpec.options);
          this.renderSkeleton(context);
          this.renderToolbars(props.viewSpec, props.dateProfile, props.currentDate, title);
          this.renderView(props, title);
          this.updateSize();
          this.thawHeight();
        };

        CalendarComponent.prototype.destroy = function () {
          if (this.header) {
            this.header.destroy();
          }

          if (this.footer) {
            this.footer.destroy();
          }

          this.renderSkeleton.unrender(); // will call destroyView

          _super.prototype.destroy.call(this);
        };

        CalendarComponent.prototype._renderSkeleton = function (context) {
          this.updateElClassNames(context);
          prependToElement(this.el, this.contentEl = createElement('div', {
            className: 'fc-view-container'
          }));
          var calendar = context.calendar;

          for (var _i = 0, _a = calendar.pluginSystem.hooks.viewContainerModifiers; _i < _a.length; _i++) {
            var modifyViewContainer = _a[_i];
            modifyViewContainer(this.contentEl, calendar);
          }
        };

        CalendarComponent.prototype._unrenderSkeleton = function () {
          // weird to have this here
          if (this.view) {
            this.savedScroll = this.view.queryScroll();
            this.view.destroy();
            this.view = null;
          }

          removeElement(this.contentEl);
          this.removeElClassNames();
        };

        CalendarComponent.prototype.removeElClassNames = function () {
          var classList = this.el.classList;

          for (var _i = 0, _a = this.elClassNames; _i < _a.length; _i++) {
            var className = _a[_i];
            classList.remove(className);
          }

          this.elClassNames = [];
        };

        CalendarComponent.prototype.updateElClassNames = function (context) {
          this.removeElClassNames();
          var theme = context.theme,
              options = context.options;
          this.elClassNames = ['fc', 'fc-' + options.dir, theme.getClass('widget')];
          var classList = this.el.classList;

          for (var _i = 0, _a = this.elClassNames; _i < _a.length; _i++) {
            var className = _a[_i];
            classList.add(className);
          }
        };

        CalendarComponent.prototype._renderToolbars = function (viewSpec, dateProfile, currentDate, title) {
          var _a = this,
              context = _a.context,
              header = _a.header,
              footer = _a.footer;

          var options = context.options,
              calendar = context.calendar;
          var headerLayout = options.header;
          var footerLayout = options.footer;
          var dateProfileGenerator = this.props.dateProfileGenerator;
          var now = calendar.getNow();
          var todayInfo = dateProfileGenerator.build(now);
          var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate);
          var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate);
          var toolbarProps = {
            title: title,
            activeButton: viewSpec.type,
            isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),
            isPrevEnabled: prevInfo.isValid,
            isNextEnabled: nextInfo.isValid
          };

          if (headerLayout) {
            if (!header) {
              header = this.header = new Toolbar('fc-header-toolbar');
              prependToElement(this.el, header.el);
            }

            header.receiveProps(_assign({
              layout: headerLayout
            }, toolbarProps), context);
          } else if (header) {
            header.destroy();
            header = this.header = null;
          }

          if (footerLayout) {
            if (!footer) {
              footer = this.footer = new Toolbar('fc-footer-toolbar');
              appendToElement(this.el, footer.el);
            }

            footer.receiveProps(_assign({
              layout: footerLayout
            }, toolbarProps), context);
          } else if (footer) {
            footer.destroy();
            footer = this.footer = null;
          }
        };

        CalendarComponent.prototype._unrenderToolbars = function () {
          if (this.header) {
            this.header.destroy();
            this.header = null;
          }

          if (this.footer) {
            this.footer.destroy();
            this.footer = null;
          }
        };

        CalendarComponent.prototype.renderView = function (props, title) {
          var view = this.view;
          var _a = this.context,
              calendar = _a.calendar,
              options = _a.options;
          var viewSpec = props.viewSpec,
              dateProfileGenerator = props.dateProfileGenerator;

          if (!view || view.viewSpec !== viewSpec) {
            if (view) {
              view.destroy();
            }

            view = this.view = new viewSpec['class'](viewSpec, this.contentEl);

            if (this.savedScroll) {
              view.addScroll(this.savedScroll, true);
              this.savedScroll = null;
            }
          }

          view.title = title; // for the API

          var viewProps = {
            dateProfileGenerator: dateProfileGenerator,
            dateProfile: props.dateProfile,
            businessHours: this.parseBusinessHours(viewSpec.options.businessHours),
            eventStore: props.eventStore,
            eventUiBases: props.eventUiBases,
            dateSelection: props.dateSelection,
            eventSelection: props.eventSelection,
            eventDrag: props.eventDrag,
            eventResize: props.eventResize
          };
          var transformers = this.buildViewPropTransformers(calendar.pluginSystem.hooks.viewPropsTransformers);

          for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {
            var transformer = transformers_1[_i];

            _assign(viewProps, transformer.transform(viewProps, viewSpec, props, options));
          }

          view.receiveProps(viewProps, this.buildComponentContext(this.context, viewSpec, view));
        }; // Sizing
        // -----------------------------------------------------------------------------------------------------------------


        CalendarComponent.prototype.updateSize = function (isResize) {
          if (isResize === void 0) {
            isResize = false;
          }

          var view = this.view;

          if (!view) {
            return; // why?
          }

          if (isResize || this.isHeightAuto == null) {
            this.computeHeightVars();
          }

          view.updateSize(isResize, this.viewHeight, this.isHeightAuto);
          view.updateNowIndicator(); // we need to guarantee this will run after updateSize

          view.popScroll(isResize);
        };

        CalendarComponent.prototype.computeHeightVars = function () {
          var calendar = this.context.calendar; // yuck. need to handle dynamic options

          var heightInput = calendar.opt('height');
          var contentHeightInput = calendar.opt('contentHeight');
          this.isHeightAuto = heightInput === 'auto' || contentHeightInput === 'auto';

          if (typeof contentHeightInput === 'number') {
            // exists and not 'auto'
            this.viewHeight = contentHeightInput;
          } else if (typeof contentHeightInput === 'function') {
            // exists and is a function
            this.viewHeight = contentHeightInput();
          } else if (typeof heightInput === 'number') {
            // exists and not 'auto'
            this.viewHeight = heightInput - this.queryToolbarsHeight();
          } else if (typeof heightInput === 'function') {
            // exists and is a function
            this.viewHeight = heightInput() - this.queryToolbarsHeight();
          } else if (heightInput === 'parent') {
            // set to height of parent element
            var parentEl = this.el.parentNode;
            this.viewHeight = parentEl.getBoundingClientRect().height - this.queryToolbarsHeight();
          } else {
            this.viewHeight = Math.round(this.contentEl.getBoundingClientRect().width / Math.max(calendar.opt('aspectRatio'), .5));
          }
        };

        CalendarComponent.prototype.queryToolbarsHeight = function () {
          var height = 0;

          if (this.header) {
            height += computeHeightAndMargins(this.header.el);
          }

          if (this.footer) {
            height += computeHeightAndMargins(this.footer.el);
          }

          return height;
        }; // Height "Freezing"
        // -----------------------------------------------------------------------------------------------------------------


        CalendarComponent.prototype.freezeHeight = function () {
          applyStyle(this.el, {
            height: this.el.getBoundingClientRect().height,
            overflow: 'hidden'
          });
        };

        CalendarComponent.prototype.thawHeight = function () {
          applyStyle(this.el, {
            height: '',
            overflow: ''
          });
        };

        return CalendarComponent;
      }(Component); // Title and Date Formatting
      // -----------------------------------------------------------------------------------------------------------------
      // Computes what the title at the top of the calendar should be for this view


      function computeTitle(dateProfile, viewOptions) {
        var range; // for views that span a large unit of time, show the proper interval, ignoring stray days before and after

        if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {
          range = dateProfile.currentRange;
        } else {
          // for day units or smaller, use the actual day range
          range = dateProfile.activeRange;
        }

        return this.context.dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || computeTitleFormat(dateProfile), viewOptions.titleRangeSeparator), {
          isEndExclusive: dateProfile.isRangeAllDay
        });
      } // Generates the format string that should be used to generate the title for the current date range.
      // Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.


      function computeTitleFormat(dateProfile) {
        var currentRangeUnit = dateProfile.currentRangeUnit;

        if (currentRangeUnit === 'year') {
          return {
            year: 'numeric'
          };
        } else if (currentRangeUnit === 'month') {
          return {
            year: 'numeric',
            month: 'long'
          }; // like "September 2014"
        } else {
          var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);

          if (days !== null && days > 1) {
            // multi-day range. shorter, like "Sep 9 - 10 2014"
            return {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            };
          } else {
            // one day. longer, like "September 9 2014"
            return {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            };
          }
        }
      } // build a context scoped to the view


      function buildComponentContext(context, viewSpec, view) {
        return context.extend(viewSpec.options, view);
      } // Plugin
      // -----------------------------------------------------------------------------------------------------------------


      function buildViewPropTransformers(theClasses) {
        return theClasses.map(function (theClass) {
          return new theClass();
        });
      }

      var Interaction =
      /** @class */
      function () {
        function Interaction(settings) {
          this.component = settings.component;
        }

        Interaction.prototype.destroy = function () {};

        return Interaction;
      }();

      function parseInteractionSettings(component, input) {
        return {
          component: component,
          el: input.el,
          useEventCenter: input.useEventCenter != null ? input.useEventCenter : true
        };
      }

      function interactionSettingsToStore(settings) {
        var _a;

        return _a = {}, _a[settings.component.uid] = settings, _a;
      } // global state


      var interactionSettingsStore = {};
      /*
      Detects when the user clicks on an event within a DateComponent
      */

      var EventClicking =
      /** @class */
      function (_super) {
        __extends(EventClicking, _super);

        function EventClicking(settings) {
          var _this = _super.call(this, settings) || this;

          _this.handleSegClick = function (ev, segEl) {
            var component = _this.component;
            var _a = component.context,
                calendar = _a.calendar,
                view = _a.view;
            var seg = getElSeg(segEl);

            if (seg && // might be the <div> surrounding the more link
            component.isValidSegDownEl(ev.target)) {
              // our way to simulate a link click for elements that can't be <a> tags
              // grab before trigger fired in case trigger trashes DOM thru rerendering
              var hasUrlContainer = elementClosest(ev.target, '.fc-has-url');
              var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';
              calendar.publiclyTrigger('eventClick', [{
                el: segEl,
                event: new EventApi(component.context.calendar, seg.eventRange.def, seg.eventRange.instance),
                jsEvent: ev,
                view: view
              }]);

              if (url && !ev.defaultPrevented) {
                window.location.href = url;
              }
            }
          };

          var component = settings.component;
          _this.destroy = listenBySelector(component.el, 'click', component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegClick);
          return _this;
        }

        return EventClicking;
      }(Interaction);
      /*
      Triggers events and adds/removes core classNames when the user's pointer
      enters/leaves event-elements of a component.
      */


      var EventHovering =
      /** @class */
      function (_super) {
        __extends(EventHovering, _super);

        function EventHovering(settings) {
          var _this = _super.call(this, settings) || this; // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it


          _this.handleEventElRemove = function (el) {
            if (el === _this.currentSegEl) {
              _this.handleSegLeave(null, _this.currentSegEl);
            }
          };

          _this.handleSegEnter = function (ev, segEl) {
            if (getElSeg(segEl)) {
              // TODO: better way to make sure not hovering over more+ link or its wrapper
              segEl.classList.add('fc-allow-mouse-resize');
              _this.currentSegEl = segEl;

              _this.triggerEvent('eventMouseEnter', ev, segEl);
            }
          };

          _this.handleSegLeave = function (ev, segEl) {
            if (_this.currentSegEl) {
              segEl.classList.remove('fc-allow-mouse-resize');
              _this.currentSegEl = null;

              _this.triggerEvent('eventMouseLeave', ev, segEl);
            }
          };

          var component = settings.component;
          _this.removeHoverListeners = listenToHoverBySelector(component.el, component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegEnter, _this.handleSegLeave); // how to make sure component already has context?

          component.context.calendar.on('eventElRemove', _this.handleEventElRemove);
          return _this;
        }

        EventHovering.prototype.destroy = function () {
          this.removeHoverListeners();
          this.component.context.calendar.off('eventElRemove', this.handleEventElRemove);
        };

        EventHovering.prototype.triggerEvent = function (publicEvName, ev, segEl) {
          var component = this.component;
          var _a = component.context,
              calendar = _a.calendar,
              view = _a.view;
          var seg = getElSeg(segEl);

          if (!ev || component.isValidSegDownEl(ev.target)) {
            calendar.publiclyTrigger(publicEvName, [{
              el: segEl,
              event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),
              jsEvent: ev,
              view: view
            }]);
          }
        };

        return EventHovering;
      }(Interaction);

      var StandardTheme =
      /** @class */
      function (_super) {
        __extends(StandardTheme, _super);

        function StandardTheme() {
          return _super !== null && _super.apply(this, arguments) || this;
        }

        return StandardTheme;
      }(Theme);

      StandardTheme.prototype.classes = {
        widget: 'fc-unthemed',
        widgetHeader: 'fc-widget-header',
        widgetContent: 'fc-widget-content',
        buttonGroup: 'fc-button-group',
        button: 'fc-button fc-button-primary',
        buttonActive: 'fc-button-active',
        popoverHeader: 'fc-widget-header',
        popoverContent: 'fc-widget-content',
        // day grid
        headerRow: 'fc-widget-header',
        dayRow: 'fc-widget-content',
        // list view
        listView: 'fc-widget-content'
      };
      StandardTheme.prototype.baseIconClass = 'fc-icon';
      StandardTheme.prototype.iconClasses = {
        close: 'fc-icon-x',
        prev: 'fc-icon-chevron-left',
        next: 'fc-icon-chevron-right',
        prevYear: 'fc-icon-chevrons-left',
        nextYear: 'fc-icon-chevrons-right'
      };
      StandardTheme.prototype.iconOverrideOption = 'buttonIcons';
      StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';
      StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';

      var Calendar =
      /** @class */
      function () {
        function Calendar(el, overrides) {
          var _this = this;

          this.buildComponentContext = memoize(buildComponentContext$1);
          this.parseRawLocales = memoize(parseRawLocales);
          this.buildLocale = memoize(buildLocale);
          this.buildDateEnv = memoize(buildDateEnv);
          this.buildTheme = memoize(buildTheme);
          this.buildEventUiSingleBase = memoize(this._buildEventUiSingleBase);
          this.buildSelectionConfig = memoize(this._buildSelectionConfig);
          this.buildEventUiBySource = memoizeOutput(buildEventUiBySource, isPropsEqual);
          this.buildEventUiBases = memoize(buildEventUiBases);
          this.interactionsStore = {};
          this.actionQueue = [];
          this.isReducing = false; // isDisplaying: boolean = false // installed in DOM? accepting renders?

          this.needsRerender = false; // needs a render?

          this.isRendering = false; // currently in the executeRender function?

          this.renderingPauseDepth = 0;
          this.buildDelayedRerender = memoize(buildDelayedRerender);
          this.afterSizingTriggers = {};
          this.isViewUpdated = false;
          this.isDatesUpdated = false;
          this.isEventsUpdated = false;
          this.el = el;
          this.optionsManager = new OptionsManager(overrides || {});
          this.pluginSystem = new PluginSystem(); // only do once. don't do in handleOptions. because can't remove plugins

          this.addPluginInputs(this.optionsManager.computed.plugins || []);
          this.handleOptions(this.optionsManager.computed);
          this.publiclyTrigger('_init'); // for tests

          this.hydrate();
          this.calendarInteractions = this.pluginSystem.hooks.calendarInteractions.map(function (calendarInteractionClass) {
            return new calendarInteractionClass(_this);
          });
        }

        Calendar.prototype.addPluginInputs = function (pluginInputs) {
          var pluginDefs = refinePluginDefs(pluginInputs);

          for (var _i = 0, pluginDefs_1 = pluginDefs; _i < pluginDefs_1.length; _i++) {
            var pluginDef = pluginDefs_1[_i];
            this.pluginSystem.add(pluginDef);
          }
        };

        Object.defineProperty(Calendar.prototype, "view", {
          // public API
          get: function get() {
            return this.component ? this.component.view : null;
          },
          enumerable: true,
          configurable: true
        }); // Public API for rendering
        // -----------------------------------------------------------------------------------------------------------------

        Calendar.prototype.render = function () {
          if (!this.component) {
            this.component = new CalendarComponent(this.el);
            this.renderableEventStore = createEmptyEventStore();
            this.bindHandlers();
            this.executeRender();
          } else {
            this.requestRerender();
          }
        };

        Calendar.prototype.destroy = function () {
          if (this.component) {
            this.unbindHandlers();
            this.component.destroy(); // don't null-out. in case API needs access

            this.component = null; // umm ???

            for (var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++) {
              var interaction = _a[_i];
              interaction.destroy();
            }

            this.publiclyTrigger('_destroyed');
          }
        }; // Handlers
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.bindHandlers = function () {
          var _this = this; // event delegation for nav links


          this.removeNavLinkListener = listenBySelector(this.el, 'click', 'a[data-goto]', function (ev, anchorEl) {
            var gotoOptions = anchorEl.getAttribute('data-goto');
            gotoOptions = gotoOptions ? JSON.parse(gotoOptions) : {};
            var dateEnv = _this.dateEnv;
            var dateMarker = dateEnv.createMarker(gotoOptions.date);
            var viewType = gotoOptions.type; // property like "navLinkDayClick". might be a string or a function

            var customAction = _this.viewOpt('navLink' + capitaliseFirstLetter(viewType) + 'Click');

            if (typeof customAction === 'function') {
              customAction(dateEnv.toDate(dateMarker), ev);
            } else {
              if (typeof customAction === 'string') {
                viewType = customAction;
              }

              _this.zoomTo(dateMarker, viewType);
            }
          });

          if (this.opt('handleWindowResize')) {
            window.addEventListener('resize', this.windowResizeProxy = debounce( // prevents rapid calls
            this.windowResize.bind(this), this.opt('windowResizeDelay')));
          }
        };

        Calendar.prototype.unbindHandlers = function () {
          this.removeNavLinkListener();

          if (this.windowResizeProxy) {
            window.removeEventListener('resize', this.windowResizeProxy);
            this.windowResizeProxy = null;
          }
        }; // Dispatcher
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.hydrate = function () {
          var _this = this;

          this.state = this.buildInitialState();
          var rawSources = this.opt('eventSources') || [];
          var singleRawSource = this.opt('events');
          var sources = []; // parsed

          if (singleRawSource) {
            rawSources.unshift(singleRawSource);
          }

          for (var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++) {
            var rawSource = rawSources_1[_i];
            var source = parseEventSource(rawSource, this);

            if (source) {
              sources.push(source);
            }
          }

          this.batchRendering(function () {
            _this.dispatch({
              type: 'INIT'
            }); // pass in sources here?


            _this.dispatch({
              type: 'ADD_EVENT_SOURCES',
              sources: sources
            });

            _this.dispatch({
              type: 'SET_VIEW_TYPE',
              viewType: _this.opt('defaultView') || _this.pluginSystem.hooks.defaultView
            });
          });
        };

        Calendar.prototype.buildInitialState = function () {
          return {
            viewType: null,
            loadingLevel: 0,
            eventSourceLoadingLevel: 0,
            currentDate: this.getInitialDate(),
            dateProfile: null,
            eventSources: {},
            eventStore: createEmptyEventStore(),
            dateSelection: null,
            eventSelection: '',
            eventDrag: null,
            eventResize: null
          };
        };

        Calendar.prototype.dispatch = function (action) {
          this.actionQueue.push(action);

          if (!this.isReducing) {
            this.isReducing = true;
            var oldState = this.state;

            while (this.actionQueue.length) {
              this.state = this.reduce(this.state, this.actionQueue.shift(), this);
            }

            var newState = this.state;
            this.isReducing = false;

            if (!oldState.loadingLevel && newState.loadingLevel) {
              this.publiclyTrigger('loading', [true]);
            } else if (oldState.loadingLevel && !newState.loadingLevel) {
              this.publiclyTrigger('loading', [false]);
            }

            var view = this.component && this.component.view;

            if (oldState.eventStore !== newState.eventStore) {
              if (oldState.eventStore) {
                this.isEventsUpdated = true;
              }
            }

            if (oldState.dateProfile !== newState.dateProfile) {
              if (oldState.dateProfile && view) {
                // why would view be null!?
                this.publiclyTrigger('datesDestroy', [{
                  view: view,
                  el: view.el
                }]);
              }

              this.isDatesUpdated = true;
            }

            if (oldState.viewType !== newState.viewType) {
              if (oldState.viewType && view) {
                // why would view be null!?
                this.publiclyTrigger('viewSkeletonDestroy', [{
                  view: view,
                  el: view.el
                }]);
              }

              this.isViewUpdated = true;
            }

            this.requestRerender();
          }
        };

        Calendar.prototype.reduce = function (state, action, calendar) {
          return reduce(state, action, calendar);
        }; // Render Queue
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.requestRerender = function () {
          this.needsRerender = true;
          this.delayedRerender(); // will call a debounced-version of tryRerender
        };

        Calendar.prototype.tryRerender = function () {
          if (this.component && // must be accepting renders
          this.needsRerender && // indicates that a rerender was requested
          !this.renderingPauseDepth && // not paused
          !this.isRendering // not currently in the render loop
          ) {
              this.executeRender();
            }
        };

        Calendar.prototype.batchRendering = function (func) {
          this.renderingPauseDepth++;
          func();
          this.renderingPauseDepth--;

          if (this.needsRerender) {
            this.requestRerender();
          }
        }; // Rendering
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.executeRender = function () {
          // clear these BEFORE the render so that new values will accumulate during render
          this.needsRerender = false;
          this.isRendering = true;
          this.renderComponent();
          this.isRendering = false; // received a rerender request while rendering

          if (this.needsRerender) {
            this.delayedRerender();
          }
        };
        /*
        don't call this directly. use executeRender instead
        */


        Calendar.prototype.renderComponent = function () {
          var _a = this,
              state = _a.state,
              component = _a.component;

          var viewType = state.viewType;
          var viewSpec = this.viewSpecs[viewType];

          if (!viewSpec) {
            throw new Error("View type \"" + viewType + "\" is not valid");
          } // if event sources are still loading and progressive rendering hasn't been enabled,
          // keep rendering the last fully loaded set of events


          var renderableEventStore = this.renderableEventStore = state.eventSourceLoadingLevel && !this.opt('progressiveEventRendering') ? this.renderableEventStore : state.eventStore;
          var eventUiSingleBase = this.buildEventUiSingleBase(viewSpec.options);
          var eventUiBySource = this.buildEventUiBySource(state.eventSources);
          var eventUiBases = this.eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);
          component.receiveProps(_assign({}, state, {
            viewSpec: viewSpec,
            dateProfileGenerator: this.dateProfileGenerators[viewType],
            dateProfile: state.dateProfile,
            eventStore: renderableEventStore,
            eventUiBases: eventUiBases,
            dateSelection: state.dateSelection,
            eventSelection: state.eventSelection,
            eventDrag: state.eventDrag,
            eventResize: state.eventResize
          }), this.buildComponentContext(this.theme, this.dateEnv, this.optionsManager.computed));

          if (this.isViewUpdated) {
            this.isViewUpdated = false;
            this.publiclyTrigger('viewSkeletonRender', [{
              view: component.view,
              el: component.view.el
            }]);
          }

          if (this.isDatesUpdated) {
            this.isDatesUpdated = false;
            this.publiclyTrigger('datesRender', [{
              view: component.view,
              el: component.view.el
            }]);
          }

          if (this.isEventsUpdated) {
            this.isEventsUpdated = false;
          }

          this.releaseAfterSizingTriggers();
        }; // Options
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.setOption = function (name, val) {
          var _a;

          this.mutateOptions((_a = {}, _a[name] = val, _a), [], true);
        };

        Calendar.prototype.getOption = function (name) {
          return this.optionsManager.computed[name];
        };

        Calendar.prototype.opt = function (name) {
          return this.optionsManager.computed[name];
        };

        Calendar.prototype.viewOpt = function (name) {
          return this.viewOpts()[name];
        };

        Calendar.prototype.viewOpts = function () {
          return this.viewSpecs[this.state.viewType].options;
        };
        /*
        handles option changes (like a diff)
        */


        Calendar.prototype.mutateOptions = function (updates, removals, isDynamic, deepEqual) {
          var _this = this;

          var changeHandlers = this.pluginSystem.hooks.optionChangeHandlers;
          var normalUpdates = {};
          var specialUpdates = {};
          var oldDateEnv = this.dateEnv; // do this before handleOptions

          var isTimeZoneDirty = false;
          var isSizeDirty = false;
          var anyDifficultOptions = Boolean(removals.length);

          for (var name_1 in updates) {
            if (changeHandlers[name_1]) {
              specialUpdates[name_1] = updates[name_1];
            } else {
              normalUpdates[name_1] = updates[name_1];
            }
          }

          for (var name_2 in normalUpdates) {
            if (/^(height|contentHeight|aspectRatio)$/.test(name_2)) {
              isSizeDirty = true;
            } else if (/^(defaultDate|defaultView)$/.test(name_2)) ;else {
              anyDifficultOptions = true;

              if (name_2 === 'timeZone') {
                isTimeZoneDirty = true;
              }
            }
          }

          this.optionsManager.mutate(normalUpdates, removals, isDynamic);

          if (anyDifficultOptions) {
            this.handleOptions(this.optionsManager.computed);
          }

          this.batchRendering(function () {
            if (anyDifficultOptions) {
              if (isTimeZoneDirty) {
                _this.dispatch({
                  type: 'CHANGE_TIMEZONE',
                  oldDateEnv: oldDateEnv
                });
              }
              /* HACK
              has the same effect as calling this.requestRerender()
              but recomputes the state's dateProfile
              */


              _this.dispatch({
                type: 'SET_VIEW_TYPE',
                viewType: _this.state.viewType
              });
            } else if (isSizeDirty) {
              _this.updateSize();
            } // special updates


            if (deepEqual) {
              for (var name_3 in specialUpdates) {
                changeHandlers[name_3](specialUpdates[name_3], _this, deepEqual);
              }
            }
          });
        };
        /*
        rebuilds things based off of a complete set of refined options
        */


        Calendar.prototype.handleOptions = function (options) {
          var _this = this;

          var pluginHooks = this.pluginSystem.hooks;
          this.defaultAllDayEventDuration = createDuration(options.defaultAllDayEventDuration);
          this.defaultTimedEventDuration = createDuration(options.defaultTimedEventDuration);
          this.delayedRerender = this.buildDelayedRerender(options.rerenderDelay);
          this.theme = this.buildTheme(options);
          var available = this.parseRawLocales(options.locales);
          this.availableRawLocales = available.map;
          var locale = this.buildLocale(options.locale || available.defaultCode, available.map);
          this.dateEnv = this.buildDateEnv(locale, options.timeZone, pluginHooks.namedTimeZonedImpl, options.firstDay, options.weekNumberCalculation, options.weekLabel, pluginHooks.cmdFormatter);
          this.selectionConfig = this.buildSelectionConfig(options); // needs dateEnv. do after :(
          // ineffecient to do every time?

          this.viewSpecs = buildViewSpecs(pluginHooks.views, this.optionsManager); // ineffecient to do every time?

          this.dateProfileGenerators = mapHash(this.viewSpecs, function (viewSpec) {
            return new viewSpec["class"].prototype.dateProfileGeneratorClass(viewSpec, _this);
          });
        };

        Calendar.prototype.getAvailableLocaleCodes = function () {
          return Object.keys(this.availableRawLocales);
        };

        Calendar.prototype._buildSelectionConfig = function (rawOpts) {
          return processScopedUiProps('select', rawOpts, this);
        };

        Calendar.prototype._buildEventUiSingleBase = function (rawOpts) {
          if (rawOpts.editable) {
            // so 'editable' affected events
            rawOpts = _assign({}, rawOpts, {
              eventEditable: true
            });
          }

          return processScopedUiProps('event', rawOpts, this);
        }; // Trigger
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.hasPublicHandlers = function (name) {
          return this.hasHandlers(name) || this.opt(name); // handler specified in options
        };

        Calendar.prototype.publiclyTrigger = function (name, args) {
          var optHandler = this.opt(name);
          this.triggerWith(name, this, args);

          if (optHandler) {
            return optHandler.apply(this, args);
          }
        };

        Calendar.prototype.publiclyTriggerAfterSizing = function (name, args) {
          var afterSizingTriggers = this.afterSizingTriggers;
          (afterSizingTriggers[name] || (afterSizingTriggers[name] = [])).push(args);
        };

        Calendar.prototype.releaseAfterSizingTriggers = function () {
          var afterSizingTriggers = this.afterSizingTriggers;

          for (var name_4 in afterSizingTriggers) {
            for (var _i = 0, _a = afterSizingTriggers[name_4]; _i < _a.length; _i++) {
              var args = _a[_i];
              this.publiclyTrigger(name_4, args);
            }
          }

          this.afterSizingTriggers = {};
        }; // View
        // -----------------------------------------------------------------------------------------------------------------
        // Returns a boolean about whether the view is okay to instantiate at some point


        Calendar.prototype.isValidViewType = function (viewType) {
          return Boolean(this.viewSpecs[viewType]);
        };

        Calendar.prototype.changeView = function (viewType, dateOrRange) {
          var dateMarker = null;

          if (dateOrRange) {
            if (dateOrRange.start && dateOrRange.end) {
              // a range
              this.optionsManager.mutate({
                visibleRange: dateOrRange
              }, []); // will not rerender

              this.handleOptions(this.optionsManager.computed); // ...but yuck
            } else {
              // a date
              dateMarker = this.dateEnv.createMarker(dateOrRange); // just like gotoDate
            }
          }

          this.unselect();
          this.dispatch({
            type: 'SET_VIEW_TYPE',
            viewType: viewType,
            dateMarker: dateMarker
          });
        }; // Forces navigation to a view for the given date.
        // `viewType` can be a specific view name or a generic one like "week" or "day".
        // needs to change


        Calendar.prototype.zoomTo = function (dateMarker, viewType) {
          var spec;
          viewType = viewType || 'day'; // day is default zoom

          spec = this.viewSpecs[viewType] || this.getUnitViewSpec(viewType);
          this.unselect();

          if (spec) {
            this.dispatch({
              type: 'SET_VIEW_TYPE',
              viewType: spec.type,
              dateMarker: dateMarker
            });
          } else {
            this.dispatch({
              type: 'SET_DATE',
              dateMarker: dateMarker
            });
          }
        }; // Given a duration singular unit, like "week" or "day", finds a matching view spec.
        // Preference is given to views that have corresponding buttons.


        Calendar.prototype.getUnitViewSpec = function (unit) {
          var component = this.component;
          var viewTypes = [];
          var i;
          var spec; // put views that have buttons first. there will be duplicates, but oh

          if (component.header) {
            viewTypes.push.apply(viewTypes, component.header.viewsWithButtons);
          }

          if (component.footer) {
            viewTypes.push.apply(viewTypes, component.footer.viewsWithButtons);
          }

          for (var viewType in this.viewSpecs) {
            viewTypes.push(viewType);
          }

          for (i = 0; i < viewTypes.length; i++) {
            spec = this.viewSpecs[viewTypes[i]];

            if (spec) {
              if (spec.singleUnit === unit) {
                return spec;
              }
            }
          }
        }; // Current Date
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.getInitialDate = function () {
          var defaultDateInput = this.opt('defaultDate'); // compute the initial ambig-timezone date

          if (defaultDateInput != null) {
            return this.dateEnv.createMarker(defaultDateInput);
          } else {
            return this.getNow(); // getNow already returns unzoned
          }
        };

        Calendar.prototype.prev = function () {
          this.unselect();
          this.dispatch({
            type: 'PREV'
          });
        };

        Calendar.prototype.next = function () {
          this.unselect();
          this.dispatch({
            type: 'NEXT'
          });
        };

        Calendar.prototype.prevYear = function () {
          this.unselect();
          this.dispatch({
            type: 'SET_DATE',
            dateMarker: this.dateEnv.addYears(this.state.currentDate, -1)
          });
        };

        Calendar.prototype.nextYear = function () {
          this.unselect();
          this.dispatch({
            type: 'SET_DATE',
            dateMarker: this.dateEnv.addYears(this.state.currentDate, 1)
          });
        };

        Calendar.prototype.today = function () {
          this.unselect();
          this.dispatch({
            type: 'SET_DATE',
            dateMarker: this.getNow()
          });
        };

        Calendar.prototype.gotoDate = function (zonedDateInput) {
          this.unselect();
          this.dispatch({
            type: 'SET_DATE',
            dateMarker: this.dateEnv.createMarker(zonedDateInput)
          });
        };

        Calendar.prototype.incrementDate = function (deltaInput) {
          var delta = createDuration(deltaInput);

          if (delta) {
            // else, warn about invalid input?
            this.unselect();
            this.dispatch({
              type: 'SET_DATE',
              dateMarker: this.dateEnv.add(this.state.currentDate, delta)
            });
          }
        }; // for external API


        Calendar.prototype.getDate = function () {
          return this.dateEnv.toDate(this.state.currentDate);
        }; // Date Formatting Utils
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.formatDate = function (d, formatter) {
          var dateEnv = this.dateEnv;
          return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));
        }; // `settings` is for formatter AND isEndExclusive


        Calendar.prototype.formatRange = function (d0, d1, settings) {
          var dateEnv = this.dateEnv;
          return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings, this.opt('defaultRangeSeparator')), settings);
        };

        Calendar.prototype.formatIso = function (d, omitTime) {
          var dateEnv = this.dateEnv;
          return dateEnv.formatIso(dateEnv.createMarker(d), {
            omitTime: omitTime
          });
        }; // Sizing
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.windowResize = function (ev) {
          if (!this.isHandlingWindowResize && this.component && // why?
          ev.target === window // not a jqui resize event
          ) {
              this.isHandlingWindowResize = true;
              this.updateSize();
              this.publiclyTrigger('windowResize', [this.view]);
              this.isHandlingWindowResize = false;
            }
        };

        Calendar.prototype.updateSize = function () {
          if (this.component) {
            // when?
            this.component.updateSize(true);
          }
        }; // Component Registration
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.registerInteractiveComponent = function (component, settingsInput) {
          var settings = parseInteractionSettings(component, settingsInput);
          var DEFAULT_INTERACTIONS = [EventClicking, EventHovering];
          var interactionClasses = DEFAULT_INTERACTIONS.concat(this.pluginSystem.hooks.componentInteractions);
          var interactions = interactionClasses.map(function (interactionClass) {
            return new interactionClass(settings);
          });
          this.interactionsStore[component.uid] = interactions;
          interactionSettingsStore[component.uid] = settings;
        };

        Calendar.prototype.unregisterInteractiveComponent = function (component) {
          for (var _i = 0, _a = this.interactionsStore[component.uid]; _i < _a.length; _i++) {
            var listener = _a[_i];
            listener.destroy();
          }

          delete this.interactionsStore[component.uid];
          delete interactionSettingsStore[component.uid];
        }; // Date Selection / Event Selection / DayClick
        // -----------------------------------------------------------------------------------------------------------------
        // this public method receives start/end dates in any format, with any timezone
        // NOTE: args were changed from v3


        Calendar.prototype.select = function (dateOrObj, endDate) {
          var selectionInput;

          if (endDate == null) {
            if (dateOrObj.start != null) {
              selectionInput = dateOrObj;
            } else {
              selectionInput = {
                start: dateOrObj,
                end: null
              };
            }
          } else {
            selectionInput = {
              start: dateOrObj,
              end: endDate
            };
          }

          var selection = parseDateSpan(selectionInput, this.dateEnv, createDuration({
            days: 1
          }) // TODO: cache this?
          );

          if (selection) {
            // throw parse error otherwise?
            this.dispatch({
              type: 'SELECT_DATES',
              selection: selection
            });
            this.triggerDateSelect(selection);
          }
        }; // public method


        Calendar.prototype.unselect = function (pev) {
          if (this.state.dateSelection) {
            this.dispatch({
              type: 'UNSELECT_DATES'
            });
            this.triggerDateUnselect(pev);
          }
        };

        Calendar.prototype.triggerDateSelect = function (selection, pev) {
          var arg = _assign({}, this.buildDateSpanApi(selection), {
            jsEvent: pev ? pev.origEvent : null,
            view: this.view
          });

          this.publiclyTrigger('select', [arg]);
        };

        Calendar.prototype.triggerDateUnselect = function (pev) {
          this.publiclyTrigger('unselect', [{
            jsEvent: pev ? pev.origEvent : null,
            view: this.view
          }]);
        }; // TODO: receive pev?


        Calendar.prototype.triggerDateClick = function (dateSpan, dayEl, view, ev) {
          var arg = _assign({}, this.buildDatePointApi(dateSpan), {
            dayEl: dayEl,
            jsEvent: ev,
            // Is this always a mouse event? See #4655
            view: view
          });

          this.publiclyTrigger('dateClick', [arg]);
        };

        Calendar.prototype.buildDatePointApi = function (dateSpan) {
          var props = {};

          for (var _i = 0, _a = this.pluginSystem.hooks.datePointTransforms; _i < _a.length; _i++) {
            var transform = _a[_i];

            _assign(props, transform(dateSpan, this));
          }

          _assign(props, buildDatePointApi(dateSpan, this.dateEnv));

          return props;
        };

        Calendar.prototype.buildDateSpanApi = function (dateSpan) {
          var props = {};

          for (var _i = 0, _a = this.pluginSystem.hooks.dateSpanTransforms; _i < _a.length; _i++) {
            var transform = _a[_i];

            _assign(props, transform(dateSpan, this));
          }

          _assign(props, buildDateSpanApi(dateSpan, this.dateEnv));

          return props;
        }; // Date Utils
        // -----------------------------------------------------------------------------------------------------------------
        // Returns a DateMarker for the current date, as defined by the client's computer or from the `now` option


        Calendar.prototype.getNow = function () {
          var now = this.opt('now');

          if (typeof now === 'function') {
            now = now();
          }

          if (now == null) {
            return this.dateEnv.createNowMarker();
          }

          return this.dateEnv.createMarker(now);
        }; // Event-Date Utilities
        // -----------------------------------------------------------------------------------------------------------------
        // Given an event's allDay status and start date, return what its fallback end date should be.
        // TODO: rename to computeDefaultEventEnd


        Calendar.prototype.getDefaultEventEnd = function (allDay, marker) {
          var end = marker;

          if (allDay) {
            end = startOfDay(end);
            end = this.dateEnv.add(end, this.defaultAllDayEventDuration);
          } else {
            end = this.dateEnv.add(end, this.defaultTimedEventDuration);
          }

          return end;
        }; // Public Events API
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.addEvent = function (eventInput, sourceInput) {
          if (eventInput instanceof EventApi) {
            var def = eventInput._def;
            var instance = eventInput._instance; // not already present? don't want to add an old snapshot

            if (!this.state.eventStore.defs[def.defId]) {
              this.dispatch({
                type: 'ADD_EVENTS',
                eventStore: eventTupleToStore({
                  def: def,
                  instance: instance
                }) // TODO: better util for two args?

              });
            }

            return eventInput;
          }

          var sourceId;

          if (sourceInput instanceof EventSourceApi) {
            sourceId = sourceInput.internalEventSource.sourceId;
          } else if (sourceInput != null) {
            var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function

            if (!sourceApi) {
              console.warn('Could not find an event source with ID "' + sourceInput + '"'); // TODO: test

              return null;
            } else {
              sourceId = sourceApi.internalEventSource.sourceId;
            }
          }

          var tuple = parseEvent(eventInput, sourceId, this);

          if (tuple) {
            this.dispatch({
              type: 'ADD_EVENTS',
              eventStore: eventTupleToStore(tuple)
            });
            return new EventApi(this, tuple.def, tuple.def.recurringDef ? null : tuple.instance);
          }

          return null;
        }; // TODO: optimize


        Calendar.prototype.getEventById = function (id) {
          var _a = this.state.eventStore,
              defs = _a.defs,
              instances = _a.instances;
          id = String(id);

          for (var defId in defs) {
            var def = defs[defId];

            if (def.publicId === id) {
              if (def.recurringDef) {
                return new EventApi(this, def, null);
              } else {
                for (var instanceId in instances) {
                  var instance = instances[instanceId];

                  if (instance.defId === def.defId) {
                    return new EventApi(this, def, instance);
                  }
                }
              }
            }
          }

          return null;
        };

        Calendar.prototype.getEvents = function () {
          var _a = this.state.eventStore,
              defs = _a.defs,
              instances = _a.instances;
          var eventApis = [];

          for (var id in instances) {
            var instance = instances[id];
            var def = defs[instance.defId];
            eventApis.push(new EventApi(this, def, instance));
          }

          return eventApis;
        };

        Calendar.prototype.removeAllEvents = function () {
          this.dispatch({
            type: 'REMOVE_ALL_EVENTS'
          });
        };

        Calendar.prototype.rerenderEvents = function () {
          this.dispatch({
            type: 'RESET_EVENTS'
          });
        }; // Public Event Sources API
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.getEventSources = function () {
          var sourceHash = this.state.eventSources;
          var sourceApis = [];

          for (var internalId in sourceHash) {
            sourceApis.push(new EventSourceApi(this, sourceHash[internalId]));
          }

          return sourceApis;
        };

        Calendar.prototype.getEventSourceById = function (id) {
          var sourceHash = this.state.eventSources;
          id = String(id);

          for (var sourceId in sourceHash) {
            if (sourceHash[sourceId].publicId === id) {
              return new EventSourceApi(this, sourceHash[sourceId]);
            }
          }

          return null;
        };

        Calendar.prototype.addEventSource = function (sourceInput) {
          if (sourceInput instanceof EventSourceApi) {
            // not already present? don't want to add an old snapshot
            if (!this.state.eventSources[sourceInput.internalEventSource.sourceId]) {
              this.dispatch({
                type: 'ADD_EVENT_SOURCES',
                sources: [sourceInput.internalEventSource]
              });
            }

            return sourceInput;
          }

          var eventSource = parseEventSource(sourceInput, this);

          if (eventSource) {
            // TODO: error otherwise?
            this.dispatch({
              type: 'ADD_EVENT_SOURCES',
              sources: [eventSource]
            });
            return new EventSourceApi(this, eventSource);
          }

          return null;
        };

        Calendar.prototype.removeAllEventSources = function () {
          this.dispatch({
            type: 'REMOVE_ALL_EVENT_SOURCES'
          });
        };

        Calendar.prototype.refetchEvents = function () {
          this.dispatch({
            type: 'FETCH_EVENT_SOURCES'
          });
        }; // Scroll
        // -----------------------------------------------------------------------------------------------------------------


        Calendar.prototype.scrollToTime = function (timeInput) {
          var duration = createDuration(timeInput);

          if (duration) {
            this.component.view.scrollToDuration(duration);
          }
        };

        return Calendar;
      }();

      EmitterMixin.mixInto(Calendar); // for memoizers
      // -----------------------------------------------------------------------------------------------------------------

      function buildComponentContext$1(theme, dateEnv, options) {
        return new ComponentContext(this, theme, dateEnv, options, null);
      }

      function buildDateEnv(locale, timeZone, namedTimeZoneImpl, firstDay, weekNumberCalculation, weekLabel, cmdFormatter) {
        return new DateEnv({
          calendarSystem: 'gregory',
          timeZone: timeZone,
          namedTimeZoneImpl: namedTimeZoneImpl,
          locale: locale,
          weekNumberCalculation: weekNumberCalculation,
          firstDay: firstDay,
          weekLabel: weekLabel,
          cmdFormatter: cmdFormatter
        });
      }

      function buildTheme(calendarOptions) {
        var themeClass = this.pluginSystem.hooks.themeClasses[calendarOptions.themeSystem] || StandardTheme;
        return new themeClass(calendarOptions);
      }

      function buildDelayedRerender(wait) {
        var func = this.tryRerender.bind(this);

        if (wait != null) {
          func = debounce(func, wait);
        }

        return func;
      }

      function buildEventUiBySource(eventSources) {
        return mapHash(eventSources, function (eventSource) {
          return eventSource.ui;
        });
      }

      function buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {
        var eventUiBases = {
          '': eventUiSingleBase
        };

        for (var defId in eventDefs) {
          var def = eventDefs[defId];

          if (def.sourceId && eventUiBySource[def.sourceId]) {
            eventUiBases[defId] = eventUiBySource[def.sourceId];
          }
        }

        return eventUiBases;
      }

      var View =
      /** @class */
      function (_super) {
        __extends(View, _super);

        function View(viewSpec, parentEl) {
          var _this = _super.call(this, createElement('div', {
            className: 'fc-view fc-' + viewSpec.type + '-view'
          })) || this;

          _this.renderDatesMem = memoizeRendering(_this.renderDatesWrap, _this.unrenderDatesWrap);
          _this.renderBusinessHoursMem = memoizeRendering(_this.renderBusinessHours, _this.unrenderBusinessHours, [_this.renderDatesMem]);
          _this.renderDateSelectionMem = memoizeRendering(_this.renderDateSelectionWrap, _this.unrenderDateSelectionWrap, [_this.renderDatesMem]);
          _this.renderEventsMem = memoizeRendering(_this.renderEvents, _this.unrenderEvents, [_this.renderDatesMem]);
          _this.renderEventSelectionMem = memoizeRendering(_this.renderEventSelectionWrap, _this.unrenderEventSelectionWrap, [_this.renderEventsMem]);
          _this.renderEventDragMem = memoizeRendering(_this.renderEventDragWrap, _this.unrenderEventDragWrap, [_this.renderDatesMem]);
          _this.renderEventResizeMem = memoizeRendering(_this.renderEventResizeWrap, _this.unrenderEventResizeWrap, [_this.renderDatesMem]);
          _this.viewSpec = viewSpec;
          _this.type = viewSpec.type;
          parentEl.appendChild(_this.el);

          _this.initialize();

          return _this;
        }

        View.prototype.initialize = function () {};

        Object.defineProperty(View.prototype, "activeStart", {
          // Date Setting/Unsetting
          // -----------------------------------------------------------------------------------------------------------------
          get: function get() {
            return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.start);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(View.prototype, "activeEnd", {
          get: function get() {
            return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.end);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(View.prototype, "currentStart", {
          get: function get() {
            return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.start);
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(View.prototype, "currentEnd", {
          get: function get() {
            return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.end);
          },
          enumerable: true,
          configurable: true
        }); // General Rendering
        // -----------------------------------------------------------------------------------------------------------------

        View.prototype.render = function (props, context) {
          this.renderDatesMem(props.dateProfile);
          this.renderBusinessHoursMem(props.businessHours);
          this.renderDateSelectionMem(props.dateSelection);
          this.renderEventsMem(props.eventStore);
          this.renderEventSelectionMem(props.eventSelection);
          this.renderEventDragMem(props.eventDrag);
          this.renderEventResizeMem(props.eventResize);
        };

        View.prototype.beforeUpdate = function () {
          this.addScroll(this.queryScroll());
        };

        View.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.renderDatesMem.unrender(); // should unrender everything else
        }; // Sizing
        // -----------------------------------------------------------------------------------------------------------------


        View.prototype.updateSize = function (isResize, viewHeight, isAuto) {
          var calendar = this.context.calendar;

          if (isResize) {
            this.addScroll(this.queryScroll()); // NOTE: same code as in beforeUpdate
          }

          if (isResize || // HACKS...
          calendar.isViewUpdated || calendar.isDatesUpdated || calendar.isEventsUpdated) {
            // sort of the catch-all sizing
            // anything that might cause dimension changes
            this.updateBaseSize(isResize, viewHeight, isAuto);
          } // NOTE: popScroll is called by CalendarComponent

        };

        View.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {}; // Date Rendering
        // -----------------------------------------------------------------------------------------------------------------


        View.prototype.renderDatesWrap = function (dateProfile) {
          this.renderDates(dateProfile);
          this.addScroll({
            duration: createDuration(this.context.options.scrollTime)
          });
        };

        View.prototype.unrenderDatesWrap = function () {
          this.stopNowIndicator();
          this.unrenderDates();
        };

        View.prototype.renderDates = function (dateProfile) {};

        View.prototype.unrenderDates = function () {}; // Business Hours
        // -----------------------------------------------------------------------------------------------------------------


        View.prototype.renderBusinessHours = function (businessHours) {};

        View.prototype.unrenderBusinessHours = function () {}; // Date Selection
        // -----------------------------------------------------------------------------------------------------------------


        View.prototype.renderDateSelectionWrap = function (selection) {
          if (selection) {
            this.renderDateSelection(selection);
          }
        };

        View.prototype.unrenderDateSelectionWrap = function (selection) {
          if (selection) {
            this.unrenderDateSelection(selection);
          }
        };

        View.prototype.renderDateSelection = function (selection) {};

        View.prototype.unrenderDateSelection = function (selection) {}; // Event Rendering
        // -----------------------------------------------------------------------------------------------------------------


        View.prototype.renderEvents = function (eventStore) {};

        View.prototype.unrenderEvents = function () {}; // util for subclasses


        View.prototype.sliceEvents = function (eventStore, allDay) {
          var props = this.props;
          return sliceEventStore(eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? this.context.nextDayThreshold : null).fg;
        }; // Event Selection
        // -----------------------------------------------------------------------------------------------------------------


        View.prototype.renderEventSelectionWrap = function (instanceId) {
          if (instanceId) {
            this.renderEventSelection(instanceId);
          }
        };

        View.prototype.unrenderEventSelectionWrap = function (instanceId) {
          if (instanceId) {
            this.unrenderEventSelection(instanceId);
          }
        };

        View.prototype.renderEventSelection = function (instanceId) {};

        View.prototype.unrenderEventSelection = function (instanceId) {}; // Event Drag
        // -----------------------------------------------------------------------------------------------------------------


        View.prototype.renderEventDragWrap = function (state) {
          if (state) {
            this.renderEventDrag(state);
          }
        };

        View.prototype.unrenderEventDragWrap = function (state) {
          if (state) {
            this.unrenderEventDrag(state);
          }
        };

        View.prototype.renderEventDrag = function (state) {};

        View.prototype.unrenderEventDrag = function (state) {}; // Event Resize
        // -----------------------------------------------------------------------------------------------------------------


        View.prototype.renderEventResizeWrap = function (state) {
          if (state) {
            this.renderEventResize(state);
          }
        };

        View.prototype.unrenderEventResizeWrap = function (state) {
          if (state) {
            this.unrenderEventResize(state);
          }
        };

        View.prototype.renderEventResize = function (state) {};

        View.prototype.unrenderEventResize = function (state) {};
        /* Now Indicator
        ------------------------------------------------------------------------------------------------------------------*/
        // Immediately render the current time indicator and begins re-rendering it at an interval,
        // which is defined by this.getNowIndicatorUnit().
        // TODO: somehow do this for the current whole day's background too
        // USAGE: must be called manually from subclasses' render methods! don't need to call stopNowIndicator tho


        View.prototype.startNowIndicator = function (dateProfile, dateProfileGenerator) {
          var _this = this;

          var _a = this.context,
              calendar = _a.calendar,
              dateEnv = _a.dateEnv,
              options = _a.options;
          var unit;
          var update;
          var delay; // ms wait value

          if (options.nowIndicator && !this.initialNowDate) {
            unit = this.getNowIndicatorUnit(dateProfile, dateProfileGenerator);

            if (unit) {
              update = this.updateNowIndicator.bind(this);
              this.initialNowDate = calendar.getNow();
              this.initialNowQueriedMs = new Date().valueOf(); // wait until the beginning of the next interval

              delay = dateEnv.add(dateEnv.startOf(this.initialNowDate, unit), createDuration(1, unit)).valueOf() - this.initialNowDate.valueOf(); // TODO: maybe always use setTimeout, waiting until start of next unit

              this.nowIndicatorTimeoutID = setTimeout(function () {
                _this.nowIndicatorTimeoutID = null;
                update();

                if (unit === 'second') {
                  delay = 1000; // every second
                } else {
                  delay = 1000 * 60; // otherwise, every minute
                }

                _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval
              }, delay);
            } // rendering will be initiated in updateSize

          }
        }; // rerenders the now indicator, computing the new current time from the amount of time that has passed
        // since the initial getNow call.


        View.prototype.updateNowIndicator = function () {
          if (this.props.dateProfile && // a way to determine if dates were rendered yet
          this.initialNowDate // activated before?
          ) {
              this.unrenderNowIndicator(); // won't unrender if unnecessary

              this.renderNowIndicator(addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs));
              this.isNowIndicatorRendered = true;
            }
        }; // Immediately unrenders the view's current time indicator and stops any re-rendering timers.
        // Won't cause side effects if indicator isn't rendered.


        View.prototype.stopNowIndicator = function () {
          if (this.nowIndicatorTimeoutID) {
            clearTimeout(this.nowIndicatorTimeoutID);
            this.nowIndicatorTimeoutID = null;
          }

          if (this.nowIndicatorIntervalID) {
            clearInterval(this.nowIndicatorIntervalID);
            this.nowIndicatorIntervalID = null;
          }

          if (this.isNowIndicatorRendered) {
            this.unrenderNowIndicator();
            this.isNowIndicatorRendered = false;
          }
        };

        View.prototype.getNowIndicatorUnit = function (dateProfile, dateProfileGenerator) {// subclasses should implement
        }; // Renders a current time indicator at the given datetime


        View.prototype.renderNowIndicator = function (date) {// SUBCLASSES MUST PASS TO CHILDREN!
        }; // Undoes the rendering actions from renderNowIndicator


        View.prototype.unrenderNowIndicator = function () {// SUBCLASSES MUST PASS TO CHILDREN!
        };
        /* Scroller
        ------------------------------------------------------------------------------------------------------------------*/


        View.prototype.addScroll = function (scroll, isForced) {
          if (isForced) {
            scroll.isForced = isForced;
          }

          _assign(this.queuedScroll || (this.queuedScroll = {}), scroll);
        };

        View.prototype.popScroll = function (isResize) {
          this.applyQueuedScroll(isResize);
          this.queuedScroll = null;
        };

        View.prototype.applyQueuedScroll = function (isResize) {
          if (this.queuedScroll) {
            this.applyScroll(this.queuedScroll, isResize);
          }
        };

        View.prototype.queryScroll = function () {
          var scroll = {};

          if (this.props.dateProfile) {
            // dates rendered yet?
            _assign(scroll, this.queryDateScroll());
          }

          return scroll;
        };

        View.prototype.applyScroll = function (scroll, isResize) {
          var duration = scroll.duration,
              isForced = scroll.isForced;

          if (duration != null && !isForced) {
            delete scroll.duration;

            if (this.props.dateProfile) {
              // dates rendered yet?
              _assign(scroll, this.computeDateScroll(duration));
            }
          }

          if (this.props.dateProfile) {
            // dates rendered yet?
            this.applyDateScroll(scroll);
          }
        };

        View.prototype.computeDateScroll = function (duration) {
          return {}; // subclasses must implement
        };

        View.prototype.queryDateScroll = function () {
          return {}; // subclasses must implement
        };

        View.prototype.applyDateScroll = function (scroll) {// subclasses must implement
        }; // for API


        View.prototype.scrollToDuration = function (duration) {
          this.applyScroll({
            duration: duration
          }, false);
        };

        return View;
      }(DateComponent);

      EmitterMixin.mixInto(View);
      View.prototype.usesMinMaxTime = false;
      View.prototype.dateProfileGeneratorClass = DateProfileGenerator;

      var FgEventRenderer =
      /** @class */
      function () {
        function FgEventRenderer() {
          this.segs = [];
          this.isSizeDirty = false;
        }

        FgEventRenderer.prototype.renderSegs = function (context, segs, mirrorInfo) {
          this.context = context;
          this.rangeUpdated(); // called too frequently :(
          // render an `.el` on each seg
          // returns a subset of the segs. segs that were actually rendered

          segs = this.renderSegEls(segs, mirrorInfo);
          this.segs = segs;
          this.attachSegs(segs, mirrorInfo);
          this.isSizeDirty = true;
          triggerRenderedSegs(this.context, this.segs, Boolean(mirrorInfo));
        };

        FgEventRenderer.prototype.unrender = function (context, _segs, mirrorInfo) {
          triggerWillRemoveSegs(this.context, this.segs, Boolean(mirrorInfo));
          this.detachSegs(this.segs);
          this.segs = [];
        }; // Updates values that rely on options and also relate to range


        FgEventRenderer.prototype.rangeUpdated = function () {
          var options = this.context.options;
          var displayEventTime;
          var displayEventEnd;
          this.eventTimeFormat = createFormatter(options.eventTimeFormat || this.computeEventTimeFormat(), options.defaultRangeSeparator);
          displayEventTime = options.displayEventTime;

          if (displayEventTime == null) {
            displayEventTime = this.computeDisplayEventTime(); // might be based off of range
          }

          displayEventEnd = options.displayEventEnd;

          if (displayEventEnd == null) {
            displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range
          }

          this.displayEventTime = displayEventTime;
          this.displayEventEnd = displayEventEnd;
        }; // Renders and assigns an `el` property for each foreground event segment.
        // Only returns segments that successfully rendered.


        FgEventRenderer.prototype.renderSegEls = function (segs, mirrorInfo) {
          var html = '';
          var i;

          if (segs.length) {
            // don't build an empty html string
            // build a large concatenation of event segment HTML
            for (i = 0; i < segs.length; i++) {
              html += this.renderSegHtml(segs[i], mirrorInfo);
            } // Grab individual elements from the combined HTML string. Use each as the default rendering.
            // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.


            htmlToElements(html).forEach(function (el, i) {
              var seg = segs[i];

              if (el) {
                seg.el = el;
              }
            });
            segs = filterSegsViaEls(this.context, segs, Boolean(mirrorInfo));
          }

          return segs;
        }; // Generic utility for generating the HTML classNames for an event segment's element


        FgEventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable, mirrorInfo) {
          var classes = ['fc-event', seg.isStart ? 'fc-start' : 'fc-not-start', seg.isEnd ? 'fc-end' : 'fc-not-end'].concat(seg.eventRange.ui.classNames);

          if (isDraggable) {
            classes.push('fc-draggable');
          }

          if (isResizable) {
            classes.push('fc-resizable');
          }

          if (mirrorInfo) {
            classes.push('fc-mirror');

            if (mirrorInfo.isDragging) {
              classes.push('fc-dragging');
            }

            if (mirrorInfo.isResizing) {
              classes.push('fc-resizing');
            }
          }

          return classes;
        }; // Compute the text that should be displayed on an event's element.
        // `range` can be the Event object itself, or something range-like, with at least a `start`.
        // If event times are disabled, or the event has no time, will return a blank string.
        // If not specified, formatter will default to the eventTimeFormat setting,
        // and displayEnd will default to the displayEventEnd setting.


        FgEventRenderer.prototype.getTimeText = function (eventRange, formatter, displayEnd) {
          var def = eventRange.def,
              instance = eventRange.instance;
          return this._getTimeText(instance.range.start, def.hasEnd ? instance.range.end : null, def.allDay, formatter, displayEnd, instance.forcedStartTzo, instance.forcedEndTzo);
        };

        FgEventRenderer.prototype._getTimeText = function (start, end, allDay, formatter, displayEnd, forcedStartTzo, forcedEndTzo) {
          var dateEnv = this.context.dateEnv;

          if (formatter == null) {
            formatter = this.eventTimeFormat;
          }

          if (displayEnd == null) {
            displayEnd = this.displayEventEnd;
          }

          if (this.displayEventTime && !allDay) {
            if (displayEnd && end) {
              return dateEnv.formatRange(start, end, formatter, {
                forcedStartTzo: forcedStartTzo,
                forcedEndTzo: forcedEndTzo
              });
            } else {
              return dateEnv.format(start, formatter, {
                forcedTzo: forcedStartTzo
              });
            }
          }

          return '';
        };

        FgEventRenderer.prototype.computeEventTimeFormat = function () {
          return {
            hour: 'numeric',
            minute: '2-digit',
            omitZeroMinute: true
          };
        };

        FgEventRenderer.prototype.computeDisplayEventTime = function () {
          return true;
        };

        FgEventRenderer.prototype.computeDisplayEventEnd = function () {
          return true;
        }; // Utility for generating event skin-related CSS properties


        FgEventRenderer.prototype.getSkinCss = function (ui) {
          return {
            'background-color': ui.backgroundColor,
            'border-color': ui.borderColor,
            color: ui.textColor
          };
        };

        FgEventRenderer.prototype.sortEventSegs = function (segs) {
          var specs = this.context.eventOrderSpecs;
          var objs = segs.map(buildSegCompareObj);
          objs.sort(function (obj0, obj1) {
            return compareByFieldSpecs(obj0, obj1, specs);
          });
          return objs.map(function (c) {
            return c._seg;
          });
        };

        FgEventRenderer.prototype.computeSizes = function (force) {
          if (force || this.isSizeDirty) {
            this.computeSegSizes(this.segs);
          }
        };

        FgEventRenderer.prototype.assignSizes = function (force) {
          if (force || this.isSizeDirty) {
            this.assignSegSizes(this.segs);
            this.isSizeDirty = false;
          }
        };

        FgEventRenderer.prototype.computeSegSizes = function (segs) {};

        FgEventRenderer.prototype.assignSegSizes = function (segs) {}; // Manipulation on rendered segs


        FgEventRenderer.prototype.hideByHash = function (hash) {
          if (hash) {
            for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
              var seg = _a[_i];

              if (hash[seg.eventRange.instance.instanceId]) {
                seg.el.style.visibility = 'hidden';
              }
            }
          }
        };

        FgEventRenderer.prototype.showByHash = function (hash) {
          if (hash) {
            for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
              var seg = _a[_i];

              if (hash[seg.eventRange.instance.instanceId]) {
                seg.el.style.visibility = '';
              }
            }
          }
        };

        FgEventRenderer.prototype.selectByInstanceId = function (instanceId) {
          if (instanceId) {
            for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
              var seg = _a[_i];
              var eventInstance = seg.eventRange.instance;

              if (eventInstance && eventInstance.instanceId === instanceId && seg.el // necessary?
              ) {
                  seg.el.classList.add('fc-selected');
                }
            }
          }
        };

        FgEventRenderer.prototype.unselectByInstanceId = function (instanceId) {
          if (instanceId) {
            for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {
              var seg = _a[_i];

              if (seg.el) {
                // necessary?
                seg.el.classList.remove('fc-selected');
              }
            }
          }
        };

        return FgEventRenderer;
      }(); // returns a object with all primitive props that can be compared


      function buildSegCompareObj(seg) {
        var eventDef = seg.eventRange.def;
        var range = seg.eventRange.instance.range;
        var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events

        var end = range.end ? range.end.valueOf() : 0; // "

        return _assign({}, eventDef.extendedProps, eventDef, {
          id: eventDef.publicId,
          start: start,
          end: end,
          duration: end - start,
          allDay: Number(eventDef.allDay),
          _seg: seg // for later retrieval

        });
      }
      /*
      TODO: when refactoring this class, make a new FillRenderer instance for each `type`
      */


      var FillRenderer =
      /** @class */
      function () {
        function FillRenderer() {
          this.fillSegTag = 'div';
          this.dirtySizeFlags = {};
          this.containerElsByType = {};
          this.segsByType = {};
        }

        FillRenderer.prototype.getSegsByType = function (type) {
          return this.segsByType[type] || [];
        };

        FillRenderer.prototype.renderSegs = function (type, context, segs) {
          var _a;

          this.context = context;
          var renderedSegs = this.renderSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs

          var containerEls = this.attachSegs(type, renderedSegs);

          if (containerEls) {
            (_a = this.containerElsByType[type] || (this.containerElsByType[type] = [])).push.apply(_a, containerEls);
          }

          this.segsByType[type] = renderedSegs;

          if (type === 'bgEvent') {
            triggerRenderedSegs(context, renderedSegs, false); // isMirror=false
          }

          this.dirtySizeFlags[type] = true;
        }; // Unrenders a specific type of fill that is currently rendered on the grid


        FillRenderer.prototype.unrender = function (type, context) {
          var segs = this.segsByType[type];

          if (segs) {
            if (type === 'bgEvent') {
              triggerWillRemoveSegs(context, segs, false); // isMirror=false
            }

            this.detachSegs(type, segs);
          }
        }; // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.
        // Only returns segments that successfully rendered.


        FillRenderer.prototype.renderSegEls = function (type, segs) {
          var _this = this;

          var html = '';
          var i;

          if (segs.length) {
            // build a large concatenation of segment HTML
            for (i = 0; i < segs.length; i++) {
              html += this.renderSegHtml(type, segs[i]);
            } // Grab individual elements from the combined HTML string. Use each as the default rendering.
            // Then, compute the 'el' for each segment.


            htmlToElements(html).forEach(function (el, i) {
              var seg = segs[i];

              if (el) {
                seg.el = el;
              }
            });

            if (type === 'bgEvent') {
              segs = filterSegsViaEls(this.context, segs, false // isMirror. background events can never be mirror elements
              );
            } // correct element type? (would be bad if a non-TD were inserted into a table for example)


            segs = segs.filter(function (seg) {
              return elementMatches(seg.el, _this.fillSegTag);
            });
          }

          return segs;
        }; // Builds the HTML needed for one fill segment. Generic enough to work with different types.


        FillRenderer.prototype.renderSegHtml = function (type, seg) {
          var css = null;
          var classNames = [];

          if (type !== 'highlight' && type !== 'businessHours') {
            css = {
              'background-color': seg.eventRange.ui.backgroundColor
            };
          }

          if (type !== 'highlight') {
            classNames = classNames.concat(seg.eventRange.ui.classNames);
          }

          if (type === 'businessHours') {
            classNames.push('fc-bgevent');
          } else {
            classNames.push('fc-' + type.toLowerCase());
          }

          return '<' + this.fillSegTag + (classNames.length ? ' class="' + classNames.join(' ') + '"' : '') + (css ? ' style="' + cssToStr(css) + '"' : '') + '></' + this.fillSegTag + '>';
        };

        FillRenderer.prototype.detachSegs = function (type, segs) {
          var containerEls = this.containerElsByType[type];

          if (containerEls) {
            containerEls.forEach(removeElement);
            delete this.containerElsByType[type];
          }
        };

        FillRenderer.prototype.computeSizes = function (force) {
          for (var type in this.segsByType) {
            if (force || this.dirtySizeFlags[type]) {
              this.computeSegSizes(this.segsByType[type]);
            }
          }
        };

        FillRenderer.prototype.assignSizes = function (force) {
          for (var type in this.segsByType) {
            if (force || this.dirtySizeFlags[type]) {
              this.assignSegSizes(this.segsByType[type]);
            }
          }

          this.dirtySizeFlags = {};
        };

        FillRenderer.prototype.computeSegSizes = function (segs) {};

        FillRenderer.prototype.assignSegSizes = function (segs) {};

        return FillRenderer;
      }();

      var NamedTimeZoneImpl =
      /** @class */
      function () {
        function NamedTimeZoneImpl(timeZoneName) {
          this.timeZoneName = timeZoneName;
        }

        return NamedTimeZoneImpl;
      }();
      /*
      An abstraction for a dragging interaction originating on an event.
      Does higher-level things than PointerDragger, such as possibly:
      - a "mirror" that moves with the pointer
      - a minimum number of pixels or other criteria for a true drag to begin
      
      subclasses must emit:
      - pointerdown
      - dragstart
      - dragmove
      - pointerup
      - dragend
      */


      var ElementDragging =
      /** @class */
      function () {
        function ElementDragging(el) {
          this.emitter = new EmitterMixin();
        }

        ElementDragging.prototype.destroy = function () {};

        ElementDragging.prototype.setMirrorIsVisible = function (bool) {// optional if subclass doesn't want to support a mirror
        };

        ElementDragging.prototype.setMirrorNeedsRevert = function (bool) {// optional if subclass doesn't want to support a mirror
        };

        ElementDragging.prototype.setAutoScrollEnabled = function (bool) {// optional
        };

        return ElementDragging;
      }();

      function formatDate(dateInput, settings) {
        if (settings === void 0) {
          settings = {};
        }

        var dateEnv = buildDateEnv$1(settings);
        var formatter = createFormatter(settings);
        var dateMeta = dateEnv.createMarkerMeta(dateInput);

        if (!dateMeta) {
          // TODO: warning?
          return '';
        }

        return dateEnv.format(dateMeta.marker, formatter, {
          forcedTzo: dateMeta.forcedTzo
        });
      }

      function formatRange(startInput, endInput, settings // mixture of env and formatter settings
      ) {
        var dateEnv = buildDateEnv$1(typeof settings === 'object' && settings ? settings : {}); // pass in if non-null object

        var formatter = createFormatter(settings, globalDefaults.defaultRangeSeparator);
        var startMeta = dateEnv.createMarkerMeta(startInput);
        var endMeta = dateEnv.createMarkerMeta(endInput);

        if (!startMeta || !endMeta) {
          // TODO: warning?
          return '';
        }

        return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {
          forcedStartTzo: startMeta.forcedTzo,
          forcedEndTzo: endMeta.forcedTzo,
          isEndExclusive: settings.isEndExclusive
        });
      } // TODO: more DRY and optimized


      function buildDateEnv$1(settings) {
        var locale = buildLocale(settings.locale || 'en', parseRawLocales([]).map); // TODO: don't hardcode 'en' everywhere
        // ensure required settings

        settings = _assign({
          timeZone: globalDefaults.timeZone,
          calendarSystem: 'gregory'
        }, settings, {
          locale: locale
        });
        return new DateEnv(settings);
      }

      var DRAG_META_PROPS = {
        startTime: createDuration,
        duration: createDuration,
        create: Boolean,
        sourceId: String
      };
      var DRAG_META_DEFAULTS = {
        create: true
      };

      function parseDragMeta(raw) {
        var leftoverProps = {};
        var refined = refineProps(raw, DRAG_META_PROPS, DRAG_META_DEFAULTS, leftoverProps);
        refined.leftoverProps = leftoverProps;
        return refined;
      } // Computes a default column header formatting string if `colFormat` is not explicitly defined


      function computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {
        // if more than one week row, or if there are a lot of columns with not much space,
        // put just the day numbers will be in each cell
        if (!datesRepDistinctDays || dayCnt > 10) {
          return {
            weekday: 'short'
          }; // "Sat"
        } else if (dayCnt > 1) {
          return {
            weekday: 'short',
            month: 'numeric',
            day: 'numeric',
            omitCommas: true
          }; // "Sat 11/12"
        } else {
          return {
            weekday: 'long'
          }; // "Saturday"
        }
      }

      function renderDateCell(dateMarker, dateProfile, datesRepDistinctDays, colCnt, colHeadFormat, context, colspan, otherAttrs) {
        var dateEnv = context.dateEnv,
            theme = context.theme,
            options = context.options;
        var isDateValid = rangeContainsMarker(dateProfile.activeRange, dateMarker); // TODO: called too frequently. cache somehow.

        var classNames = ['fc-day-header', theme.getClass('widgetHeader')];
        var innerHtml;

        if (typeof options.columnHeaderHtml === 'function') {
          innerHtml = options.columnHeaderHtml(dateEnv.toDate(dateMarker));
        } else if (typeof options.columnHeaderText === 'function') {
          innerHtml = htmlEscape(options.columnHeaderText(dateEnv.toDate(dateMarker)));
        } else {
          innerHtml = htmlEscape(dateEnv.format(dateMarker, colHeadFormat));
        } // if only one row of days, the classNames on the header can represent the specific days beneath


        if (datesRepDistinctDays) {
          classNames = classNames.concat( // includes the day-of-week class
          // noThemeHighlight=true (don't highlight the header)
          getDayClasses(dateMarker, dateProfile, context, true));
        } else {
          classNames.push('fc-' + DAY_IDS[dateMarker.getUTCDay()]); // only add the day-of-week class
        }

        return '' + '<th class="' + classNames.join(' ') + '"' + (isDateValid && datesRepDistinctDays ? ' data-date="' + dateEnv.formatIso(dateMarker, {
          omitTime: true
        }) + '"' : '') + (colspan > 1 ? ' colspan="' + colspan + '"' : '') + (otherAttrs ? ' ' + otherAttrs : '') + '>' + (isDateValid ? // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)
        buildGotoAnchorHtml(options, dateEnv, {
          date: dateMarker,
          forceOff: !datesRepDistinctDays || colCnt === 1
        }, innerHtml) : // if not valid, display text, but no link
        innerHtml) + '</th>';
      }

      var DayHeader =
      /** @class */
      function (_super) {
        __extends(DayHeader, _super);

        function DayHeader(parentEl) {
          var _this = _super.call(this) || this;

          _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);
          _this.parentEl = parentEl;
          return _this;
        }

        DayHeader.prototype.render = function (props, context) {
          var dates = props.dates,
              datesRepDistinctDays = props.datesRepDistinctDays;
          var parts = [];
          this.renderSkeleton(context);

          if (props.renderIntroHtml) {
            parts.push(props.renderIntroHtml());
          }

          var colHeadFormat = createFormatter(context.options.columnHeaderFormat || computeFallbackHeaderFormat(datesRepDistinctDays, dates.length));

          for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {
            var date = dates_1[_i];
            parts.push(renderDateCell(date, props.dateProfile, datesRepDistinctDays, dates.length, colHeadFormat, context));
          }

          if (context.isRtl) {
            parts.reverse();
          }

          this.thead.innerHTML = '<tr>' + parts.join('') + '</tr>';
        };

        DayHeader.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.renderSkeleton.unrender();
        };

        DayHeader.prototype._renderSkeleton = function (context) {
          var theme = context.theme;
          var parentEl = this.parentEl;
          parentEl.innerHTML = ''; // because might be nbsp

          parentEl.appendChild(this.el = htmlToElement('<div class="fc-row ' + theme.getClass('headerRow') + '">' + '<table class="' + theme.getClass('tableGrid') + '">' + '<thead></thead>' + '</table>' + '</div>'));
          this.thead = this.el.querySelector('thead');
        };

        DayHeader.prototype._unrenderSkeleton = function () {
          removeElement(this.el);
        };

        return DayHeader;
      }(Component);

      var DaySeries =
      /** @class */
      function () {
        function DaySeries(range, dateProfileGenerator) {
          var date = range.start;
          var end = range.end;
          var indices = [];
          var dates = [];
          var dayIndex = -1;

          while (date < end) {
            // loop each day from start to end
            if (dateProfileGenerator.isHiddenDay(date)) {
              indices.push(dayIndex + 0.5); // mark that it's between indices
            } else {
              dayIndex++;
              indices.push(dayIndex);
              dates.push(date);
            }

            date = addDays(date, 1);
          }

          this.dates = dates;
          this.indices = indices;
          this.cnt = dates.length;
        }

        DaySeries.prototype.sliceRange = function (range) {
          var firstIndex = this.getDateDayIndex(range.start); // inclusive first index

          var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index

          var clippedFirstIndex = Math.max(0, firstIndex);
          var clippedLastIndex = Math.min(this.cnt - 1, lastIndex); // deal with in-between indices

          clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell

          clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell

          if (clippedFirstIndex <= clippedLastIndex) {
            return {
              firstIndex: clippedFirstIndex,
              lastIndex: clippedLastIndex,
              isStart: firstIndex === clippedFirstIndex,
              isEnd: lastIndex === clippedLastIndex
            };
          } else {
            return null;
          }
        }; // Given a date, returns its chronolocial cell-index from the first cell of the grid.
        // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
        // If before the first offset, returns a negative number.
        // If after the last offset, returns an offset past the last cell offset.
        // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.


        DaySeries.prototype.getDateDayIndex = function (date) {
          var indices = this.indices;
          var dayOffset = Math.floor(diffDays(this.dates[0], date));

          if (dayOffset < 0) {
            return indices[0] - 1;
          } else if (dayOffset >= indices.length) {
            return indices[indices.length - 1] + 1;
          } else {
            return indices[dayOffset];
          }
        };

        return DaySeries;
      }();

      var DayTable =
      /** @class */
      function () {
        function DayTable(daySeries, breakOnWeeks) {
          var dates = daySeries.dates;
          var daysPerRow;
          var firstDay;
          var rowCnt;

          if (breakOnWeeks) {
            // count columns until the day-of-week repeats
            firstDay = dates[0].getUTCDay();

            for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow++) {
              if (dates[daysPerRow].getUTCDay() === firstDay) {
                break;
              }
            }

            rowCnt = Math.ceil(dates.length / daysPerRow);
          } else {
            rowCnt = 1;
            daysPerRow = dates.length;
          }

          this.rowCnt = rowCnt;
          this.colCnt = daysPerRow;
          this.daySeries = daySeries;
          this.cells = this.buildCells();
          this.headerDates = this.buildHeaderDates();
        }

        DayTable.prototype.buildCells = function () {
          var rows = [];

          for (var row = 0; row < this.rowCnt; row++) {
            var cells = [];

            for (var col = 0; col < this.colCnt; col++) {
              cells.push(this.buildCell(row, col));
            }

            rows.push(cells);
          }

          return rows;
        };

        DayTable.prototype.buildCell = function (row, col) {
          return {
            date: this.daySeries.dates[row * this.colCnt + col]
          };
        };

        DayTable.prototype.buildHeaderDates = function () {
          var dates = [];

          for (var col = 0; col < this.colCnt; col++) {
            dates.push(this.cells[0][col].date);
          }

          return dates;
        };

        DayTable.prototype.sliceRange = function (range) {
          var colCnt = this.colCnt;
          var seriesSeg = this.daySeries.sliceRange(range);
          var segs = [];

          if (seriesSeg) {
            var firstIndex = seriesSeg.firstIndex,
                lastIndex = seriesSeg.lastIndex;
            var index = firstIndex;

            while (index <= lastIndex) {
              var row = Math.floor(index / colCnt);
              var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);
              segs.push({
                row: row,
                firstCol: index % colCnt,
                lastCol: (nextIndex - 1) % colCnt,
                isStart: seriesSeg.isStart && index === firstIndex,
                isEnd: seriesSeg.isEnd && nextIndex - 1 === lastIndex
              });
              index = nextIndex;
            }
          }

          return segs;
        };

        return DayTable;
      }();

      var Slicer =
      /** @class */
      function () {
        function Slicer() {
          this.sliceBusinessHours = memoize(this._sliceBusinessHours);
          this.sliceDateSelection = memoize(this._sliceDateSpan);
          this.sliceEventStore = memoize(this._sliceEventStore);
          this.sliceEventDrag = memoize(this._sliceInteraction);
          this.sliceEventResize = memoize(this._sliceInteraction);
        }

        Slicer.prototype.sliceProps = function (props, dateProfile, nextDayThreshold, calendar, component) {
          var extraArgs = [];

          for (var _i = 5; _i < arguments.length; _i++) {
            extraArgs[_i - 5] = arguments[_i];
          }

          var eventUiBases = props.eventUiBases;
          var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs));
          return {
            dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, eventUiBases, component].concat(extraArgs)),
            businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, calendar, component].concat(extraArgs)),
            fgEventSegs: eventSegs.fg,
            bgEventSegs: eventSegs.bg,
            eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
            eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),
            eventSelection: props.eventSelection
          }; // TODO: give interactionSegs?
        };

        Slicer.prototype.sliceNowDate = function ( // does not memoize
        date, component) {
          var extraArgs = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            extraArgs[_i - 2] = arguments[_i];
          }

          return this._sliceDateSpan.apply(this, [{
            range: {
              start: date,
              end: addMs(date, 1)
            },
            allDay: false
          }, {}, component].concat(extraArgs));
        };

        Slicer.prototype._sliceBusinessHours = function (businessHours, dateProfile, nextDayThreshold, calendar, component) {
          var extraArgs = [];

          for (var _i = 5; _i < arguments.length; _i++) {
            extraArgs[_i - 5] = arguments[_i];
          }

          if (!businessHours) {
            return [];
          }

          return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), calendar), {}, dateProfile, nextDayThreshold, component].concat(extraArgs)).bg;
        };

        Slicer.prototype._sliceEventStore = function (eventStore, eventUiBases, dateProfile, nextDayThreshold, component) {
          var extraArgs = [];

          for (var _i = 5; _i < arguments.length; _i++) {
            extraArgs[_i - 5] = arguments[_i];
          }

          if (eventStore) {
            var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
            return {
              bg: this.sliceEventRanges(rangeRes.bg, component, extraArgs),
              fg: this.sliceEventRanges(rangeRes.fg, component, extraArgs)
            };
          } else {
            return {
              bg: [],
              fg: []
            };
          }
        };

        Slicer.prototype._sliceInteraction = function (interaction, eventUiBases, dateProfile, nextDayThreshold, component) {
          var extraArgs = [];

          for (var _i = 5; _i < arguments.length; _i++) {
            extraArgs[_i - 5] = arguments[_i];
          }

          if (!interaction) {
            return null;
          }

          var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);
          return {
            segs: this.sliceEventRanges(rangeRes.fg, component, extraArgs),
            affectedInstances: interaction.affectedEvents.instances,
            isEvent: interaction.isEvent,
            sourceSeg: interaction.origSeg
          };
        };

        Slicer.prototype._sliceDateSpan = function (dateSpan, eventUiBases, component) {
          var extraArgs = [];

          for (var _i = 3; _i < arguments.length; _i++) {
            extraArgs[_i - 3] = arguments[_i];
          }

          if (!dateSpan) {
            return [];
          }

          var eventRange = fabricateEventRange(dateSpan, eventUiBases, component.context.calendar);
          var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));

          for (var _a = 0, segs_1 = segs; _a < segs_1.length; _a++) {
            var seg = segs_1[_a];
            seg.component = component;
            seg.eventRange = eventRange;
          }

          return segs;
        };
        /*
        "complete" seg means it has component and eventRange
        */


        Slicer.prototype.sliceEventRanges = function (eventRanges, component, // TODO: kill
        extraArgs) {
          var segs = [];

          for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {
            var eventRange = eventRanges_1[_i];
            segs.push.apply(segs, this.sliceEventRange(eventRange, component, extraArgs));
          }

          return segs;
        };
        /*
        "complete" seg means it has component and eventRange
        */


        Slicer.prototype.sliceEventRange = function (eventRange, component, // TODO: kill
        extraArgs) {
          var segs = this.sliceRange.apply(this, [eventRange.range].concat(extraArgs));

          for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
            var seg = segs_2[_i];
            seg.component = component;
            seg.eventRange = eventRange;
            seg.isStart = eventRange.isStart && seg.isStart;
            seg.isEnd = eventRange.isEnd && seg.isEnd;
          }

          return segs;
        };

        return Slicer;
      }();
      /*
      for incorporating minTime/maxTime if appropriate
      TODO: should be part of DateProfile!
      TimelineDateProfile already does this btw
      */


      function computeActiveRange(dateProfile, isComponentAllDay) {
        var range = dateProfile.activeRange;

        if (isComponentAllDay) {
          return range;
        }

        return {
          start: addMs(range.start, dateProfile.minTime.milliseconds),
          end: addMs(range.end, dateProfile.maxTime.milliseconds - 864e5) // 864e5 = ms in a day

        };
      } // exports
      // --------------------------------------------------------------------------------------------------


      var version = '4.4.2';
      /***/
    },

    /***/
    "./node_modules/@fullcalendar/daygrid/main.esm.js":
    /*!********************************************************!*\
      !*** ./node_modules/@fullcalendar/daygrid/main.esm.js ***!
      \********************************************************/

    /*! exports provided: default, AbstractDayGridView, DayBgRow, DayGrid, DayGridSlicer, DayGridView, SimpleDayGrid, buildBasicDayTable */

    /***/
    function node_modulesFullcalendarDaygridMainEsmJs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbstractDayGridView", function () {
        return AbstractDayGridView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DayBgRow", function () {
        return DayBgRow;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DayGrid", function () {
        return DayGrid;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DayGridSlicer", function () {
        return DayGridSlicer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DayGridView", function () {
        return DayGridView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SimpleDayGrid", function () {
        return SimpleDayGrid;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "buildBasicDayTable", function () {
        return buildDayTable;
      });
      /* harmony import */


      var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @fullcalendar/core */
      "./node_modules/@fullcalendar/core/main.esm.js");
      /*!
      FullCalendar Day Grid Plugin v4.4.2
      Docs & License: https://fullcalendar.io/
      (c) 2019 Adam Shaw
      */

      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation.
      
      Permission to use, copy, modify, and/or distribute this software for any
      purpose with or without fee is hereby granted.
      
      THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
      REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
      INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
      LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
      OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.
      ***************************************************************************** */

      /* global Reflect, Promise */


      var _extendStatics2 = function extendStatics(d, b) {
        _extendStatics2 = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return _extendStatics2(d, b);
      };

      function __extends(d, b) {
        _extendStatics2(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }

      var _assign2 = function __assign() {
        _assign2 = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }

          return t;
        };

        return _assign2.apply(this, arguments);
      };

      var DayGridDateProfileGenerator =
      /** @class */
      function (_super) {
        __extends(DayGridDateProfileGenerator, _super);

        function DayGridDateProfileGenerator() {
          return _super !== null && _super.apply(this, arguments) || this;
        } // Computes the date range that will be rendered.


        DayGridDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {
          var dateEnv = this.dateEnv;

          var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);

          var start = renderRange.start;
          var end = renderRange.end;
          var endOfWeek; // year and month views should be aligned with weeks. this is already done for week

          if (/^(year|month)$/.test(currentRangeUnit)) {
            start = dateEnv.startOfWeek(start); // make end-of-week if not already

            endOfWeek = dateEnv.startOfWeek(end);

            if (endOfWeek.valueOf() !== end.valueOf()) {
              end = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addWeeks"])(endOfWeek, 1);
            }
          } // ensure 6 weeks


          if (this.options.monthMode && this.options.fixedWeekCount) {
            var rowCnt = Math.ceil( // could be partial weeks due to hiddenDays
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffWeeks"])(start, end));
            end = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addWeeks"])(end, 6 - rowCnt);
          }

          return {
            start: start,
            end: end
          };
        };

        return DayGridDateProfileGenerator;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateProfileGenerator"]);
      /* A rectangular panel that is absolutely positioned over other content
      ------------------------------------------------------------------------------------------------------------------------
      Options:
        - className (string)
        - content (HTML string, element, or element array)
        - parentEl
        - top
        - left
        - right (the x coord of where the right edge should be. not a "CSS" right)
        - autoHide (boolean)
        - show (callback)
        - hide (callback)
      */


      var Popover =
      /** @class */
      function () {
        function Popover(options) {
          var _this = this;

          this.isHidden = true;
          this.margin = 10; // the space required between the popover and the edges of the scroll container
          // Triggered when the user clicks *anywhere* in the document, for the autoHide feature

          this.documentMousedown = function (ev) {
            // only hide the popover if the click happened outside the popover
            if (_this.el && !_this.el.contains(ev.target)) {
              _this.hide();
            }
          };

          this.options = options;
        } // Shows the popover on the specified position. Renders it if not already


        Popover.prototype.show = function () {
          if (this.isHidden) {
            if (!this.el) {
              this.render();
            }

            this.el.style.display = '';
            this.position();
            this.isHidden = false;
            this.trigger('show');
          }
        }; // Hides the popover, through CSS, but does not remove it from the DOM


        Popover.prototype.hide = function () {
          if (!this.isHidden) {
            this.el.style.display = 'none';
            this.isHidden = true;
            this.trigger('hide');
          }
        }; // Creates `this.el` and renders content inside of it


        Popover.prototype.render = function () {
          var _this = this;

          var options = this.options;
          var el = this.el = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
            className: 'fc-popover ' + (options.className || ''),
            style: {
              top: '0',
              left: '0'
            }
          });

          if (typeof options.content === 'function') {
            options.content(el);
          }

          options.parentEl.appendChild(el); // when a click happens on anything inside with a 'fc-close' className, hide the popover

          Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["listenBySelector"])(el, 'click', '.fc-close', function (ev) {
            _this.hide();
          });

          if (options.autoHide) {
            document.addEventListener('mousedown', this.documentMousedown);
          }
        }; // Hides and unregisters any handlers


        Popover.prototype.destroy = function () {
          this.hide();

          if (this.el) {
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.el);
            this.el = null;
          }

          document.removeEventListener('mousedown', this.documentMousedown);
        }; // Positions the popover optimally, using the top/left/right options


        Popover.prototype.position = function () {
          var options = this.options;
          var el = this.el;
          var elDims = el.getBoundingClientRect(); // only used for width,height

          var origin = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(el.offsetParent);
          var clippingRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeClippingRect"])(options.parentEl);
          var top; // the "position" (not "offset") values for the popover

          var left; //
          // compute top and left

          top = options.top || 0;

          if (options.left !== undefined) {
            left = options.left;
          } else if (options.right !== undefined) {
            left = options.right - elDims.width; // derive the left value from the right value
          } else {
            left = 0;
          } // constrain to the view port. if constrained by two edges, give precedence to top/left


          top = Math.min(top, clippingRect.bottom - elDims.height - this.margin);
          top = Math.max(top, clippingRect.top + this.margin);
          left = Math.min(left, clippingRect.right - elDims.width - this.margin);
          left = Math.max(left, clippingRect.left + this.margin);
          Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(el, {
            top: top - origin.top,
            left: left - origin.left
          });
        }; // Triggers a callback. Calls a function in the option hash of the same name.
        // Arguments beyond the first `name` are forwarded on.
        // TODO: better code reuse for this. Repeat code
        // can kill this???


        Popover.prototype.trigger = function (name) {
          if (this.options[name]) {
            this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));
          }
        };

        return Popover;
      }();
      /* Event-rendering methods for the DayGrid class
      ----------------------------------------------------------------------------------------------------------------------*/
      // "Simple" is bad a name. has nothing to do with SimpleDayGrid


      var SimpleDayGridEventRenderer =
      /** @class */
      function (_super) {
        __extends(SimpleDayGridEventRenderer, _super);

        function SimpleDayGridEventRenderer() {
          return _super !== null && _super.apply(this, arguments) || this;
        } // Builds the HTML to be used for the default element for an individual segment


        SimpleDayGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {
          var context = this.context;
          var eventRange = seg.eventRange;
          var eventDef = eventRange.def;
          var eventUi = eventRange.ui;
          var allDay = eventDef.allDay;
          var isDraggable = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventDraggable"])(context, eventDef, eventUi);
          var isResizableFromStart = allDay && seg.isStart && Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventStartResizable"])(context, eventDef, eventUi);
          var isResizableFromEnd = allDay && seg.isEnd && Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventEndResizable"])(context, eventDef, eventUi);
          var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);
          var skinCss = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["cssToStr"])(this.getSkinCss(eventUi));
          var timeHtml = '';
          var timeText;
          var titleHtml;
          classes.unshift('fc-day-grid-event', 'fc-h-event'); // Only display a timed events time if it is the starting segment

          if (seg.isStart) {
            timeText = this.getTimeText(eventRange);

            if (timeText) {
              timeHtml = '<span class="fc-time">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(timeText) + '</span>';
            }
          }

          titleHtml = '<span class="fc-title">' + (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.title || '') || '&nbsp;') + // we always want one line of height
          '</span>';
          return '<a class="' + classes.join(' ') + '"' + (eventDef.url ? ' href="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.url) + '"' : '') + (skinCss ? ' style="' + skinCss + '"' : '') + '>' + '<div class="fc-content">' + (context.options.dir === 'rtl' ? titleHtml + ' ' + timeHtml : // put a natural space in between
          timeHtml + ' ' + titleHtml //
          ) + '</div>' + (isResizableFromStart ? '<div class="fc-resizer fc-start-resizer"></div>' : '') + (isResizableFromEnd ? '<div class="fc-resizer fc-end-resizer"></div>' : '') + '</a>';
        }; // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined


        SimpleDayGridEventRenderer.prototype.computeEventTimeFormat = function () {
          return {
            hour: 'numeric',
            minute: '2-digit',
            omitZeroMinute: true,
            meridiem: 'narrow'
          };
        };

        SimpleDayGridEventRenderer.prototype.computeDisplayEventEnd = function () {
          return false; // TODO: somehow consider the originating DayGrid's column count
        };

        return SimpleDayGridEventRenderer;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FgEventRenderer"]);
      /* Event-rendering methods for the DayGrid class
      ----------------------------------------------------------------------------------------------------------------------*/


      var DayGridEventRenderer =
      /** @class */
      function (_super) {
        __extends(DayGridEventRenderer, _super);

        function DayGridEventRenderer(dayGrid) {
          var _this = _super.call(this) || this;

          _this.dayGrid = dayGrid;
          return _this;
        } // Renders the given foreground event segments onto the grid


        DayGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
          var rowStructs = this.rowStructs = this.renderSegRows(segs); // append to each row's content skeleton

          this.dayGrid.rowEls.forEach(function (rowNode, i) {
            rowNode.querySelector('.fc-content-skeleton > table').appendChild(rowStructs[i].tbodyEl);
          }); // removes the "more.." events popover

          if (!mirrorInfo) {
            this.dayGrid.removeSegPopover();
          }
        }; // Unrenders all currently rendered foreground event segments


        DayGridEventRenderer.prototype.detachSegs = function () {
          var rowStructs = this.rowStructs || [];
          var rowStruct;

          while (rowStruct = rowStructs.pop()) {
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(rowStruct.tbodyEl);
          }

          this.rowStructs = null;
        }; // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.
        // Returns an array of rowStruct objects (see the bottom of `renderSegRow`).
        // PRECONDITION: each segment shoud already have a rendered and assigned `.el`


        DayGridEventRenderer.prototype.renderSegRows = function (segs) {
          var rowStructs = [];
          var segRows;
          var row;
          segRows = this.groupSegRows(segs); // group into nested arrays
          // iterate each row of segment groupings

          for (row = 0; row < segRows.length; row++) {
            rowStructs.push(this.renderSegRow(row, segRows[row]));
          }

          return rowStructs;
        }; // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains
        // the segments. Returns object with a bunch of internal data about how the render was calculated.
        // NOTE: modifies rowSegs


        DayGridEventRenderer.prototype.renderSegRow = function (row, rowSegs) {
          var isRtl = this.context.isRtl;
          var dayGrid = this.dayGrid;
          var colCnt = dayGrid.colCnt;
          var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels

          var levelCnt = Math.max(1, segLevels.length); // ensure at least one level

          var tbody = document.createElement('tbody');
          var segMatrix = []; // lookup for which segments are rendered into which level+col cells

          var cellMatrix = []; // lookup for all <td> elements of the level+col matrix

          var loneCellMatrix = []; // lookup for <td> elements that only take up a single column

          var i;
          var levelSegs;
          var col;
          var tr;
          var j;
          var seg;
          var td; // populates empty cells from the current column (`col`) to `endCol`

          function emptyCellsUntil(endCol) {
            while (col < endCol) {
              // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell
              td = (loneCellMatrix[i - 1] || [])[col];

              if (td) {
                td.rowSpan = (td.rowSpan || 1) + 1;
              } else {
                td = document.createElement('td');
                tr.appendChild(td);
              }

              cellMatrix[i][col] = td;
              loneCellMatrix[i][col] = td;
              col++;
            }
          }

          for (i = 0; i < levelCnt; i++) {
            // iterate through all levels
            levelSegs = segLevels[i];
            col = 0;
            tr = document.createElement('tr');
            segMatrix.push([]);
            cellMatrix.push([]);
            loneCellMatrix.push([]); // levelCnt might be 1 even though there are no actual levels. protect against this.
            // this single empty row is useful for styling.

            if (levelSegs) {
              for (j = 0; j < levelSegs.length; j++) {
                // iterate through segments in level
                seg = levelSegs[j];
                var leftCol = isRtl ? colCnt - 1 - seg.lastCol : seg.firstCol;
                var rightCol = isRtl ? colCnt - 1 - seg.firstCol : seg.lastCol;
                emptyCellsUntil(leftCol); // create a container that occupies or more columns. append the event element.

                td = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
                  className: 'fc-event-container'
                }, seg.el);

                if (leftCol !== rightCol) {
                  td.colSpan = rightCol - leftCol + 1;
                } else {
                  // a single-column segment
                  loneCellMatrix[i][col] = td;
                }

                while (col <= rightCol) {
                  cellMatrix[i][col] = td;
                  segMatrix[i][col] = seg;
                  col++;
                }

                tr.appendChild(td);
              }
            }

            emptyCellsUntil(colCnt); // finish off the row

            var introHtml = dayGrid.renderProps.renderIntroHtml();

            if (introHtml) {
              if (isRtl) {
                Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["appendToElement"])(tr, introHtml);
              } else {
                Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["prependToElement"])(tr, introHtml);
              }
            }

            tbody.appendChild(tr);
          }

          return {
            row: row,
            tbodyEl: tbody,
            cellMatrix: cellMatrix,
            segMatrix: segMatrix,
            segLevels: segLevels,
            segs: rowSegs
          };
        }; // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.
        // NOTE: modifies segs


        DayGridEventRenderer.prototype.buildSegLevels = function (segs) {
          var isRtl = this.context.isRtl;
          var colCnt = this.dayGrid.colCnt;
          var levels = [];
          var i;
          var seg;
          var j; // Give preference to elements with certain criteria, so they have
          // a chance to be closer to the top.

          segs = this.sortEventSegs(segs);

          for (i = 0; i < segs.length; i++) {
            seg = segs[i]; // loop through levels, starting with the topmost, until the segment doesn't collide with other segments

            for (j = 0; j < levels.length; j++) {
              if (!isDaySegCollision(seg, levels[j])) {
                break;
              }
            } // `j` now holds the desired subrow index


            seg.level = j;
            seg.leftCol = isRtl ? colCnt - 1 - seg.lastCol : seg.firstCol; // for sorting only

            seg.rightCol = isRtl ? colCnt - 1 - seg.firstCol : seg.lastCol // for sorting only
            ;
            (levels[j] || (levels[j] = [])).push(seg);
          } // order segments left-to-right. very important if calendar is RTL


          for (j = 0; j < levels.length; j++) {
            levels[j].sort(compareDaySegCols);
          }

          return levels;
        }; // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row


        DayGridEventRenderer.prototype.groupSegRows = function (segs) {
          var segRows = [];
          var i;

          for (i = 0; i < this.dayGrid.rowCnt; i++) {
            segRows.push([]);
          }

          for (i = 0; i < segs.length; i++) {
            segRows[segs[i].row].push(segs[i]);
          }

          return segRows;
        }; // Computes a default `displayEventEnd` value if one is not expliclty defined


        DayGridEventRenderer.prototype.computeDisplayEventEnd = function () {
          return this.dayGrid.colCnt === 1; // we'll likely have space if there's only one day
        };

        return DayGridEventRenderer;
      }(SimpleDayGridEventRenderer); // Computes whether two segments' columns collide. They are assumed to be in the same row.


      function isDaySegCollision(seg, otherSegs) {
        var i;
        var otherSeg;

        for (i = 0; i < otherSegs.length; i++) {
          otherSeg = otherSegs[i];

          if (otherSeg.firstCol <= seg.lastCol && otherSeg.lastCol >= seg.firstCol) {
            return true;
          }
        }

        return false;
      } // A cmp function for determining the leftmost event


      function compareDaySegCols(a, b) {
        return a.leftCol - b.leftCol;
      }

      var DayGridMirrorRenderer =
      /** @class */
      function (_super) {
        __extends(DayGridMirrorRenderer, _super);

        function DayGridMirrorRenderer() {
          return _super !== null && _super.apply(this, arguments) || this;
        }

        DayGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
          var sourceSeg = mirrorInfo.sourceSeg;
          var rowStructs = this.rowStructs = this.renderSegRows(segs); // inject each new event skeleton into each associated row

          this.dayGrid.rowEls.forEach(function (rowNode, row) {
            var skeletonEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-mirror-skeleton"><table></table></div>'); // will be absolutely positioned

            var skeletonTopEl;
            var skeletonTop; // If there is an original segment, match the top position. Otherwise, put it at the row's top level

            if (sourceSeg && sourceSeg.row === row) {
              skeletonTopEl = sourceSeg.el;
            } else {
              skeletonTopEl = rowNode.querySelector('.fc-content-skeleton tbody');

              if (!skeletonTopEl) {
                // when no events
                skeletonTopEl = rowNode.querySelector('.fc-content-skeleton table');
              }
            }

            skeletonTop = skeletonTopEl.getBoundingClientRect().top - rowNode.getBoundingClientRect().top; // the offsetParent origin

            skeletonEl.style.top = skeletonTop + 'px';
            skeletonEl.querySelector('table').appendChild(rowStructs[row].tbodyEl);
            rowNode.appendChild(skeletonEl);
          });
        };

        return DayGridMirrorRenderer;
      }(DayGridEventRenderer);

      var EMPTY_CELL_HTML = '<td style="pointer-events:none"></td>';

      var DayGridFillRenderer =
      /** @class */
      function (_super) {
        __extends(DayGridFillRenderer, _super);

        function DayGridFillRenderer(dayGrid) {
          var _this = _super.call(this) || this;

          _this.fillSegTag = 'td'; // override the default tag name

          _this.dayGrid = dayGrid;
          return _this;
        }

        DayGridFillRenderer.prototype.renderSegs = function (type, context, segs) {
          // don't render timed background events
          if (type === 'bgEvent') {
            segs = segs.filter(function (seg) {
              return seg.eventRange.def.allDay;
            });
          }

          _super.prototype.renderSegs.call(this, type, context, segs);
        };

        DayGridFillRenderer.prototype.attachSegs = function (type, segs) {
          var els = [];
          var i;
          var seg;
          var skeletonEl;

          for (i = 0; i < segs.length; i++) {
            seg = segs[i];
            skeletonEl = this.renderFillRow(type, seg);
            this.dayGrid.rowEls[seg.row].appendChild(skeletonEl);
            els.push(skeletonEl);
          }

          return els;
        }; // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.


        DayGridFillRenderer.prototype.renderFillRow = function (type, seg) {
          var dayGrid = this.dayGrid;
          var isRtl = this.context.isRtl;
          var colCnt = dayGrid.colCnt;
          var leftCol = isRtl ? colCnt - 1 - seg.lastCol : seg.firstCol;
          var rightCol = isRtl ? colCnt - 1 - seg.firstCol : seg.lastCol;
          var startCol = leftCol;
          var endCol = rightCol + 1;
          var className;
          var skeletonEl;
          var trEl;

          if (type === 'businessHours') {
            className = 'bgevent';
          } else {
            className = type.toLowerCase();
          }

          skeletonEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-' + className + '-skeleton">' + '<table><tr></tr></table>' + '</div>');
          trEl = skeletonEl.getElementsByTagName('tr')[0];

          if (startCol > 0) {
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["appendToElement"])(trEl, // will create (startCol + 1) td's
            new Array(startCol + 1).join(EMPTY_CELL_HTML));
          }

          seg.el.colSpan = endCol - startCol;
          trEl.appendChild(seg.el);

          if (endCol < colCnt) {
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["appendToElement"])(trEl, // will create (colCnt - endCol) td's
            new Array(colCnt - endCol + 1).join(EMPTY_CELL_HTML));
          }

          var introHtml = dayGrid.renderProps.renderIntroHtml();

          if (introHtml) {
            if (isRtl) {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["appendToElement"])(trEl, introHtml);
            } else {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["prependToElement"])(trEl, introHtml);
            }
          }

          return skeletonEl;
        };

        return DayGridFillRenderer;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FillRenderer"]);

      var DayTile =
      /** @class */
      function (_super) {
        __extends(DayTile, _super);

        function DayTile(el) {
          var _this = _super.call(this, el) || this;

          var eventRenderer = _this.eventRenderer = new DayTileEventRenderer(_this);
          var renderFrame = _this.renderFrame = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderFrame);
          _this.renderFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderFrame]);
          _this.renderEventSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
          _this.renderEventDrag = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);
          _this.renderEventResize = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);
          return _this;
        }

        DayTile.prototype.firstContext = function (context) {
          context.calendar.registerInteractiveComponent(this, {
            el: this.el,
            useEventCenter: false
          });
        };

        DayTile.prototype.render = function (props, context) {
          this.renderFrame(props.date);
          this.renderFgEvents(context, props.fgSegs);
          this.renderEventSelection(props.eventSelection);
          this.renderEventDrag(props.eventDragInstances);
          this.renderEventResize(props.eventResizeInstances);
        };

        DayTile.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.renderFrame.unrender(); // should unrender everything else

          this.context.calendar.unregisterInteractiveComponent(this);
        };

        DayTile.prototype._renderFrame = function (date) {
          var _a = this.context,
              theme = _a.theme,
              dateEnv = _a.dateEnv,
              options = _a.options;
          var title = dateEnv.format(date, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(options.dayPopoverFormat) // TODO: cache
          );
          this.el.innerHTML = '<div class="fc-header ' + theme.getClass('popoverHeader') + '">' + '<span class="fc-title">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(title) + '</span>' + '<span class="fc-close ' + theme.getIconClass('close') + '"></span>' + '</div>' + '<div class="fc-body ' + theme.getClass('popoverContent') + '">' + '<div class="fc-event-container"></div>' + '</div>';
          this.segContainerEl = this.el.querySelector('.fc-event-container');
        };

        DayTile.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {
          var date = this.props.date; // HACK

          if (positionLeft < elWidth && positionTop < elHeight) {
            return {
              component: this,
              dateSpan: {
                allDay: true,
                range: {
                  start: date,
                  end: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(date, 1)
                }
              },
              dayEl: this.el,
              rect: {
                left: 0,
                top: 0,
                right: elWidth,
                bottom: elHeight
              },
              layer: 1
            };
          }
        };

        return DayTile;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateComponent"]);

      var DayTileEventRenderer =
      /** @class */
      function (_super) {
        __extends(DayTileEventRenderer, _super);

        function DayTileEventRenderer(dayTile) {
          var _this = _super.call(this) || this;

          _this.dayTile = dayTile;
          return _this;
        }

        DayTileEventRenderer.prototype.attachSegs = function (segs) {
          for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
            var seg = segs_1[_i];
            this.dayTile.segContainerEl.appendChild(seg.el);
          }
        };

        DayTileEventRenderer.prototype.detachSegs = function (segs) {
          for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {
            var seg = segs_2[_i];
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(seg.el);
          }
        };

        return DayTileEventRenderer;
      }(SimpleDayGridEventRenderer);

      var DayBgRow =
      /** @class */
      function () {
        function DayBgRow(context) {
          this.context = context;
        }

        DayBgRow.prototype.renderHtml = function (props) {
          var parts = [];

          if (props.renderIntroHtml) {
            parts.push(props.renderIntroHtml());
          }

          for (var _i = 0, _a = props.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            parts.push(renderCellHtml(cell.date, props.dateProfile, this.context, cell.htmlAttrs));
          }

          if (!props.cells.length) {
            parts.push('<td class="fc-day ' + this.context.theme.getClass('widgetContent') + '"></td>');
          }

          if (this.context.options.dir === 'rtl') {
            parts.reverse();
          }

          return '<tr>' + parts.join('') + '</tr>';
        };

        return DayBgRow;
      }();

      function renderCellHtml(date, dateProfile, context, otherAttrs) {
        var dateEnv = context.dateEnv,
            theme = context.theme;
        var isDateValid = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangeContainsMarker"])(dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.

        var classes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getDayClasses"])(date, dateProfile, context);
        classes.unshift('fc-day', theme.getClass('widgetContent'));
        return '<td class="' + classes.join(' ') + '"' + (isDateValid ? ' data-date="' + dateEnv.formatIso(date, {
          omitTime: true
        }) + '"' : '') + (otherAttrs ? ' ' + otherAttrs : '') + '></td>';
      }

      var DAY_NUM_FORMAT = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])({
        day: 'numeric'
      });
      var WEEK_NUM_FORMAT = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])({
        week: 'numeric'
      });

      var DayGrid =
      /** @class */
      function (_super) {
        __extends(DayGrid, _super);

        function DayGrid(el, renderProps) {
          var _this = _super.call(this, el) || this;

          _this.bottomCoordPadding = 0; // hack for extending the hit area for the last row of the coordinate grid

          _this.isCellSizesDirty = false;
          _this.renderProps = renderProps;
          var eventRenderer = _this.eventRenderer = new DayGridEventRenderer(_this);
          var fillRenderer = _this.fillRenderer = new DayGridFillRenderer(_this);
          _this.mirrorRenderer = new DayGridMirrorRenderer(_this);
          var renderCells = _this.renderCells = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderCells, _this._unrenderCells);
          _this.renderBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderCells]);
          _this.renderDateSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'), [renderCells]);
          _this.renderBgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderCells]);
          _this.renderFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderCells]);
          _this.renderEventSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
          _this.renderEventDrag = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventDrag, _this._unrenderEventDrag, [renderCells]);
          _this.renderEventResize = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventResize, _this._unrenderEventResize, [renderCells]);
          return _this;
        }

        DayGrid.prototype.render = function (props, context) {
          var cells = props.cells;
          this.rowCnt = cells.length;
          this.colCnt = cells[0].length;
          this.renderCells(cells, props.isRigid);
          this.renderBusinessHours(context, props.businessHourSegs);
          this.renderDateSelection(context, props.dateSelectionSegs);
          this.renderBgEvents(context, props.bgEventSegs);
          this.renderFgEvents(context, props.fgEventSegs);
          this.renderEventSelection(props.eventSelection);
          this.renderEventDrag(props.eventDrag);
          this.renderEventResize(props.eventResize);

          if (this.segPopoverTile) {
            this.updateSegPopoverTile();
          }
        };

        DayGrid.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.renderCells.unrender(); // will unrender everything else
        };

        DayGrid.prototype.getCellRange = function (row, col) {
          var start = this.props.cells[row][col].date;
          var end = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(start, 1);
          return {
            start: start,
            end: end
          };
        };

        DayGrid.prototype.updateSegPopoverTile = function (date, segs) {
          var ownProps = this.props;
          this.segPopoverTile.receiveProps({
            date: date || this.segPopoverTile.props.date,
            fgSegs: segs || this.segPopoverTile.props.fgSegs,
            eventSelection: ownProps.eventSelection,
            eventDragInstances: ownProps.eventDrag ? ownProps.eventDrag.affectedInstances : null,
            eventResizeInstances: ownProps.eventResize ? ownProps.eventResize.affectedInstances : null
          }, this.context);
        };
        /* Date Rendering
        ------------------------------------------------------------------------------------------------------------------*/


        DayGrid.prototype._renderCells = function (cells, isRigid) {
          var _a = this.context,
              calendar = _a.calendar,
              view = _a.view,
              isRtl = _a.isRtl,
              dateEnv = _a.dateEnv;

          var _b = this,
              rowCnt = _b.rowCnt,
              colCnt = _b.colCnt;

          var html = '';
          var row;
          var col;

          for (row = 0; row < rowCnt; row++) {
            html += this.renderDayRowHtml(row, isRigid);
          }

          this.el.innerHTML = html;
          this.rowEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, '.fc-row');
          this.cellEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, '.fc-day, .fc-disabled-day');

          if (isRtl) {
            this.cellEls.reverse();
          }

          this.rowPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, this.rowEls, false, true // vertical
          );
          this.colPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, this.cellEls.slice(0, colCnt), // only the first row
          true, false // horizontal
          ); // trigger dayRender with each cell's element

          for (row = 0; row < rowCnt; row++) {
            for (col = 0; col < colCnt; col++) {
              calendar.publiclyTrigger('dayRender', [{
                date: dateEnv.toDate(cells[row][col].date),
                el: this.getCellEl(row, col),
                view: view
              }]);
            }
          }

          this.isCellSizesDirty = true;
        };

        DayGrid.prototype._unrenderCells = function () {
          this.removeSegPopover();
        }; // Generates the HTML for a single row, which is a div that wraps a table.
        // `row` is the row number.


        DayGrid.prototype.renderDayRowHtml = function (row, isRigid) {
          var theme = this.context.theme;
          var classes = ['fc-row', 'fc-week', theme.getClass('dayRow')];

          if (isRigid) {
            classes.push('fc-rigid');
          }

          var bgRow = new DayBgRow(this.context);
          return '' + '<div class="' + classes.join(' ') + '">' + '<div class="fc-bg">' + '<table class="' + theme.getClass('tableGrid') + '">' + bgRow.renderHtml({
            cells: this.props.cells[row],
            dateProfile: this.props.dateProfile,
            renderIntroHtml: this.renderProps.renderBgIntroHtml
          }) + '</table>' + '</div>' + '<div class="fc-content-skeleton">' + '<table>' + (this.getIsNumbersVisible() ? '<thead>' + this.renderNumberTrHtml(row) + '</thead>' : '') + '</table>' + '</div>' + '</div>';
        };

        DayGrid.prototype.getIsNumbersVisible = function () {
          return this.getIsDayNumbersVisible() || this.renderProps.cellWeekNumbersVisible || this.renderProps.colWeekNumbersVisible;
        };

        DayGrid.prototype.getIsDayNumbersVisible = function () {
          return this.rowCnt > 1;
        };
        /* Grid Number Rendering
        ------------------------------------------------------------------------------------------------------------------*/


        DayGrid.prototype.renderNumberTrHtml = function (row) {
          var isRtl = this.context.isRtl;
          var intro = this.renderProps.renderNumberIntroHtml(row, this);
          return '' + '<tr>' + (isRtl ? '' : intro) + this.renderNumberCellsHtml(row) + (isRtl ? intro : '') + '</tr>';
        };

        DayGrid.prototype.renderNumberCellsHtml = function (row) {
          var htmls = [];
          var col;
          var date;

          for (col = 0; col < this.colCnt; col++) {
            date = this.props.cells[row][col].date;
            htmls.push(this.renderNumberCellHtml(date));
          }

          if (this.context.isRtl) {
            htmls.reverse();
          }

          return htmls.join('');
        }; // Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.
        // The number row will only exist if either day numbers or week numbers are turned on.


        DayGrid.prototype.renderNumberCellHtml = function (date) {
          var _a = this.context,
              dateEnv = _a.dateEnv,
              options = _a.options;
          var html = '';
          var isDateValid = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangeContainsMarker"])(this.props.dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.

          var isDayNumberVisible = this.getIsDayNumbersVisible() && isDateValid;
          var classes;
          var weekCalcFirstDow;

          if (!isDayNumberVisible && !this.renderProps.cellWeekNumbersVisible) {
            // no numbers in day cell (week number must be along the side)
            return '<td></td>'; //  will create an empty space above events :(
          }

          classes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getDayClasses"])(date, this.props.dateProfile, this.context);
          classes.unshift('fc-day-top');

          if (this.renderProps.cellWeekNumbersVisible) {
            weekCalcFirstDow = dateEnv.weekDow;
          }

          html += '<td class="' + classes.join(' ') + '"' + (isDateValid ? ' data-date="' + dateEnv.formatIso(date, {
            omitTime: true
          }) + '"' : '') + '>';

          if (this.renderProps.cellWeekNumbersVisible && date.getUTCDay() === weekCalcFirstDow) {
            html += Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])(options, dateEnv, {
              date: date,
              type: 'week'
            }, {
              'class': 'fc-week-number'
            }, dateEnv.format(date, WEEK_NUM_FORMAT) // inner HTML
            );
          }

          if (isDayNumberVisible) {
            html += Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])(options, dateEnv, date, {
              'class': 'fc-day-number'
            }, dateEnv.format(date, DAY_NUM_FORMAT) // inner HTML
            );
          }

          html += '</td>';
          return html;
        };
        /* Sizing
        ------------------------------------------------------------------------------------------------------------------*/


        DayGrid.prototype.updateSize = function (isResize) {
          var calendar = this.context.calendar;

          var _a = this,
              fillRenderer = _a.fillRenderer,
              eventRenderer = _a.eventRenderer,
              mirrorRenderer = _a.mirrorRenderer;

          if (isResize || this.isCellSizesDirty || calendar.isEventsUpdated // hack
          ) {
              this.buildPositionCaches();
              this.isCellSizesDirty = false;
            }

          fillRenderer.computeSizes(isResize);
          eventRenderer.computeSizes(isResize);
          mirrorRenderer.computeSizes(isResize);
          fillRenderer.assignSizes(isResize);
          eventRenderer.assignSizes(isResize);
          mirrorRenderer.assignSizes(isResize);
        };

        DayGrid.prototype.buildPositionCaches = function () {
          this.buildColPositions();
          this.buildRowPositions();
        };

        DayGrid.prototype.buildColPositions = function () {
          this.colPositions.build();
        };

        DayGrid.prototype.buildRowPositions = function () {
          this.rowPositions.build();
          this.rowPositions.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack
        };
        /* Hit System
        ------------------------------------------------------------------------------------------------------------------*/


        DayGrid.prototype.positionToHit = function (leftPosition, topPosition) {
          var _a = this,
              colPositions = _a.colPositions,
              rowPositions = _a.rowPositions;

          var col = colPositions.leftToIndex(leftPosition);
          var row = rowPositions.topToIndex(topPosition);

          if (row != null && col != null) {
            return {
              row: row,
              col: col,
              dateSpan: {
                range: this.getCellRange(row, col),
                allDay: true
              },
              dayEl: this.getCellEl(row, col),
              relativeRect: {
                left: colPositions.lefts[col],
                right: colPositions.rights[col],
                top: rowPositions.tops[row],
                bottom: rowPositions.bottoms[row]
              }
            };
          }
        };
        /* Cell System
        ------------------------------------------------------------------------------------------------------------------*/
        // FYI: the first column is the leftmost column, regardless of date


        DayGrid.prototype.getCellEl = function (row, col) {
          return this.cellEls[row * this.colCnt + col];
        };
        /* Event Drag Visualization
        ------------------------------------------------------------------------------------------------------------------*/


        DayGrid.prototype._renderEventDrag = function (state) {
          if (state) {
            this.eventRenderer.hideByHash(state.affectedInstances);
            this.fillRenderer.renderSegs('highlight', this.context, state.segs);
          }
        };

        DayGrid.prototype._unrenderEventDrag = function (state) {
          if (state) {
            this.eventRenderer.showByHash(state.affectedInstances);
            this.fillRenderer.unrender('highlight', this.context);
          }
        };
        /* Event Resize Visualization
        ------------------------------------------------------------------------------------------------------------------*/


        DayGrid.prototype._renderEventResize = function (state) {
          if (state) {
            this.eventRenderer.hideByHash(state.affectedInstances);
            this.fillRenderer.renderSegs('highlight', this.context, state.segs);
            this.mirrorRenderer.renderSegs(this.context, state.segs, {
              isResizing: true,
              sourceSeg: state.sourceSeg
            });
          }
        };

        DayGrid.prototype._unrenderEventResize = function (state) {
          if (state) {
            this.eventRenderer.showByHash(state.affectedInstances);
            this.fillRenderer.unrender('highlight', this.context);
            this.mirrorRenderer.unrender(this.context, state.segs, {
              isResizing: true,
              sourceSeg: state.sourceSeg
            });
          }
        };
        /* More+ Link Popover
        ------------------------------------------------------------------------------------------------------------------*/


        DayGrid.prototype.removeSegPopover = function () {
          if (this.segPopover) {
            this.segPopover.hide(); // in handler, will call segPopover's removeElement
          }
        }; // Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.
        // `levelLimit` can be false (don't limit), a number, or true (should be computed).


        DayGrid.prototype.limitRows = function (levelLimit) {
          var rowStructs = this.eventRenderer.rowStructs || [];
          var row; // row #

          var rowLevelLimit;

          for (row = 0; row < rowStructs.length; row++) {
            this.unlimitRow(row);

            if (!levelLimit) {
              rowLevelLimit = false;
            } else if (typeof levelLimit === 'number') {
              rowLevelLimit = levelLimit;
            } else {
              rowLevelLimit = this.computeRowLevelLimit(row);
            }

            if (rowLevelLimit !== false) {
              this.limitRow(row, rowLevelLimit);
            }
          }
        }; // Computes the number of levels a row will accomodate without going outside its bounds.
        // Assumes the row is "rigid" (maintains a constant height regardless of what is inside).
        // `row` is the row number.


        DayGrid.prototype.computeRowLevelLimit = function (row) {
          var rowEl = this.rowEls[row]; // the containing "fake" row div

          var rowBottom = rowEl.getBoundingClientRect().bottom; // relative to viewport!

          var trEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findChildren"])(this.eventRenderer.rowStructs[row].tbodyEl);
          var i;
          var trEl; // Reveal one level <tr> at a time and stop when we find one out of bounds

          for (i = 0; i < trEls.length; i++) {
            trEl = trEls[i];
            trEl.classList.remove('fc-limited'); // reset to original state (reveal)

            if (trEl.getBoundingClientRect().bottom > rowBottom) {
              return i;
            }
          }

          return false; // should not limit at all
        }; // Limits the given grid row to the maximum number of levels and injects "more" links if necessary.
        // `row` is the row number.
        // `levelLimit` is a number for the maximum (inclusive) number of levels allowed.


        DayGrid.prototype.limitRow = function (row, levelLimit) {
          var _this = this;

          var colCnt = this.colCnt;
          var isRtl = this.context.isRtl;
          var rowStruct = this.eventRenderer.rowStructs[row];
          var moreNodes = []; // array of "more" <a> links and <td> DOM nodes

          var col = 0; // col #, left-to-right (not chronologically)

          var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right

          var cellMatrix; // a matrix (by level, then column) of all <td> elements in the row

          var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes

          var i;
          var seg;
          var segsBelow; // array of segment objects below `seg` in the current `col`

          var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies

          var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)

          var td;
          var rowSpan;
          var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell

          var j;
          var moreTd;
          var moreWrap;
          var moreLink; // Iterates through empty level cells and places "more" links inside if need be

          var emptyCellsUntil = function emptyCellsUntil(endCol) {
            while (col < endCol) {
              segsBelow = _this.getCellSegs(row, col, levelLimit);

              if (segsBelow.length) {
                td = cellMatrix[levelLimit - 1][col];
                moreLink = _this.renderMoreLink(row, col, segsBelow);
                moreWrap = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', null, moreLink);
                td.appendChild(moreWrap);
                moreNodes.push(moreWrap);
              }

              col++;
            }
          };

          if (levelLimit && levelLimit < rowStruct.segLevels.length) {
            // is it actually over the limit?
            levelSegs = rowStruct.segLevels[levelLimit - 1];
            cellMatrix = rowStruct.cellMatrix;
            limitedNodes = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findChildren"])(rowStruct.tbodyEl).slice(levelLimit); // get level <tr> elements past the limit

            limitedNodes.forEach(function (node) {
              node.classList.add('fc-limited'); // hide elements and get a simple DOM-nodes array
            }); // iterate though segments in the last allowable level

            for (i = 0; i < levelSegs.length; i++) {
              seg = levelSegs[i];
              var leftCol = isRtl ? colCnt - 1 - seg.lastCol : seg.firstCol;
              var rightCol = isRtl ? colCnt - 1 - seg.firstCol : seg.lastCol;
              emptyCellsUntil(leftCol); // process empty cells before the segment
              // determine *all* segments below `seg` that occupy the same columns

              colSegsBelow = [];
              totalSegsBelow = 0;

              while (col <= rightCol) {
                segsBelow = this.getCellSegs(row, col, levelLimit);
                colSegsBelow.push(segsBelow);
                totalSegsBelow += segsBelow.length;
                col++;
              }

              if (totalSegsBelow) {
                // do we need to replace this segment with one or many "more" links?
                td = cellMatrix[levelLimit - 1][leftCol]; // the segment's parent cell

                rowSpan = td.rowSpan || 1;
                segMoreNodes = []; // make a replacement <td> for each column the segment occupies. will be one for each colspan

                for (j = 0; j < colSegsBelow.length; j++) {
                  moreTd = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('td', {
                    className: 'fc-more-cell',
                    rowSpan: rowSpan
                  });
                  segsBelow = colSegsBelow[j];
                  moreLink = this.renderMoreLink(row, leftCol + j, [seg].concat(segsBelow) // count seg as hidden too
                  );
                  moreWrap = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', null, moreLink);
                  moreTd.appendChild(moreWrap);
                  segMoreNodes.push(moreTd);
                  moreNodes.push(moreTd);
                }

                td.classList.add('fc-limited');
                Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["insertAfterElement"])(td, segMoreNodes);
                limitedNodes.push(td);
              }
            }

            emptyCellsUntil(this.colCnt); // finish off the level

            rowStruct.moreEls = moreNodes; // for easy undoing later

            rowStruct.limitedEls = limitedNodes; // for easy undoing later
          }
        }; // Reveals all levels and removes all "more"-related elements for a grid's row.
        // `row` is a row number.


        DayGrid.prototype.unlimitRow = function (row) {
          var rowStruct = this.eventRenderer.rowStructs[row];

          if (rowStruct.moreEls) {
            rowStruct.moreEls.forEach(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"]);
            rowStruct.moreEls = null;
          }

          if (rowStruct.limitedEls) {
            rowStruct.limitedEls.forEach(function (limitedEl) {
              limitedEl.classList.remove('fc-limited');
            });
            rowStruct.limitedEls = null;
          }
        }; // Renders an <a> element that represents hidden event element for a cell.
        // Responsible for attaching click handler as well.


        DayGrid.prototype.renderMoreLink = function (row, col, hiddenSegs) {
          var _this = this;

          var _a = this.context,
              calendar = _a.calendar,
              view = _a.view,
              dateEnv = _a.dateEnv,
              options = _a.options,
              isRtl = _a.isRtl;
          var a = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('a', {
            className: 'fc-more'
          });
          a.innerText = this.getMoreLinkText(hiddenSegs.length);
          a.addEventListener('click', function (ev) {
            var clickOption = options.eventLimitClick;

            var _col = isRtl ? _this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?


            var date = _this.props.cells[row][_col].date;
            var moreEl = ev.currentTarget;

            var dayEl = _this.getCellEl(row, col);

            var allSegs = _this.getCellSegs(row, col); // rescope the segments to be within the cell's date


            var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);

            var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);

            if (typeof clickOption === 'function') {
              // the returned value can be an atomic option
              clickOption = calendar.publiclyTrigger('eventLimitClick', [{
                date: dateEnv.toDate(date),
                allDay: true,
                dayEl: dayEl,
                moreEl: moreEl,
                segs: reslicedAllSegs,
                hiddenSegs: reslicedHiddenSegs,
                jsEvent: ev,
                view: view
              }]);
            }

            if (clickOption === 'popover') {
              _this.showSegPopover(row, col, moreEl, reslicedAllSegs);
            } else if (typeof clickOption === 'string') {
              // a view name
              calendar.zoomTo(date, clickOption);
            }
          });
          return a;
        }; // Reveals the popover that displays all events within a cell


        DayGrid.prototype.showSegPopover = function (row, col, moreLink, segs) {
          var _this = this;

          var _a = this.context,
              calendar = _a.calendar,
              view = _a.view,
              theme = _a.theme,
              isRtl = _a.isRtl;

          var _col = isRtl ? this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?


          var moreWrap = moreLink.parentNode; // the <div> wrapper around the <a>

          var topEl; // the element we want to match the top coordinate of

          var options;

          if (this.rowCnt === 1) {
            topEl = view.el; // will cause the popover to cover any sort of header
          } else {
            topEl = this.rowEls[row]; // will align with top of row
          }

          options = {
            className: 'fc-more-popover ' + theme.getClass('popover'),
            parentEl: view.el,
            top: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(topEl).top,
            autoHide: true,
            content: function content(el) {
              _this.segPopoverTile = new DayTile(el);

              _this.updateSegPopoverTile(_this.props.cells[row][_col].date, segs);
            },
            hide: function hide() {
              _this.segPopoverTile.destroy();

              _this.segPopoverTile = null;

              _this.segPopover.destroy();

              _this.segPopover = null;
            }
          }; // Determine horizontal coordinate.
          // We use the moreWrap instead of the <td> to avoid border confusion.

          if (isRtl) {
            options.right = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(moreWrap).right + 1; // +1 to be over cell border
          } else {
            options.left = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(moreWrap).left - 1; // -1 to be over cell border
          }

          this.segPopover = new Popover(options);
          this.segPopover.show();
          calendar.releaseAfterSizingTriggers(); // hack for eventPositioned
        }; // Given the events within an array of segment objects, reslice them to be in a single day


        DayGrid.prototype.resliceDaySegs = function (segs, dayDate) {
          var dayStart = dayDate;
          var dayEnd = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(dayStart, 1);
          var dayRange = {
            start: dayStart,
            end: dayEnd
          };
          var newSegs = [];

          for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
            var seg = segs_1[_i];
            var eventRange = seg.eventRange;
            var origRange = eventRange.range;
            var slicedRange = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRanges"])(origRange, dayRange);

            if (slicedRange) {
              newSegs.push(_assign2({}, seg, {
                eventRange: {
                  def: eventRange.def,
                  ui: _assign2({}, eventRange.ui, {
                    durationEditable: false
                  }),
                  instance: eventRange.instance,
                  range: slicedRange
                },
                isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),
                isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf()
              }));
            }
          }

          return newSegs;
        }; // Generates the text that should be inside a "more" link, given the number of events it represents


        DayGrid.prototype.getMoreLinkText = function (num) {
          var opt = this.context.options.eventLimitText;

          if (typeof opt === 'function') {
            return opt(num);
          } else {
            return '+' + num + ' ' + opt;
          }
        }; // Returns segments within a given cell.
        // If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.


        DayGrid.prototype.getCellSegs = function (row, col, startLevel) {
          var segMatrix = this.eventRenderer.rowStructs[row].segMatrix;
          var level = startLevel || 0;
          var segs = [];
          var seg;

          while (level < segMatrix.length) {
            seg = segMatrix[level][col];

            if (seg) {
              segs.push(seg);
            }

            level++;
          }

          return segs;
        };

        return DayGrid;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateComponent"]);

      var WEEK_NUM_FORMAT$1 = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])({
        week: 'numeric'
      });
      /* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.
      ----------------------------------------------------------------------------------------------------------------------*/
      // It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.
      // It is responsible for managing width/height.

      var AbstractDayGridView =
      /** @class */
      function (_super) {
        __extends(AbstractDayGridView, _super);

        function AbstractDayGridView() {
          var _this = _super !== null && _super.apply(this, arguments) || this;

          _this.processOptions = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(_this._processOptions);
          _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
          /* Header Rendering
          ------------------------------------------------------------------------------------------------------------------*/
          // Generates the HTML that will go before the day-of week header cells

          _this.renderHeadIntroHtml = function () {
            var _a = _this.context,
                theme = _a.theme,
                options = _a.options;

            if (_this.colWeekNumbersVisible) {
              return '' + '<th class="fc-week-number ' + theme.getClass('widgetHeader') + '" ' + _this.weekNumberStyleAttr() + '>' + '<span>' + // needed for matchCellWidths
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(options.weekLabel) + '</span>' + '</th>';
            }

            return '';
          };
          /* Day Grid Rendering
          ------------------------------------------------------------------------------------------------------------------*/
          // Generates the HTML that will go before content-skeleton cells that display the day/week numbers


          _this.renderDayGridNumberIntroHtml = function (row, dayGrid) {
            var _a = _this.context,
                options = _a.options,
                dateEnv = _a.dateEnv;
            var weekStart = dayGrid.props.cells[row][0].date;

            if (_this.colWeekNumbersVisible) {
              return '' + '<td class="fc-week-number" ' + _this.weekNumberStyleAttr() + '>' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])( // aside from link, important for matchCellWidths
              options, dateEnv, {
                date: weekStart,
                type: 'week',
                forceOff: dayGrid.colCnt === 1
              }, dateEnv.format(weekStart, WEEK_NUM_FORMAT$1) // inner HTML
              ) + '</td>';
            }

            return '';
          }; // Generates the HTML that goes before the day bg cells for each day-row


          _this.renderDayGridBgIntroHtml = function () {
            var theme = _this.context.theme;

            if (_this.colWeekNumbersVisible) {
              return '<td class="fc-week-number ' + theme.getClass('widgetContent') + '" ' + _this.weekNumberStyleAttr() + '></td>';
            }

            return '';
          }; // Generates the HTML that goes before every other type of row generated by DayGrid.
          // Affects mirror-skeleton and highlight-skeleton rows.


          _this.renderDayGridIntroHtml = function () {
            if (_this.colWeekNumbersVisible) {
              return '<td class="fc-week-number" ' + _this.weekNumberStyleAttr() + '></td>';
            }

            return '';
          };

          return _this;
        }

        AbstractDayGridView.prototype._processOptions = function (options) {
          if (options.weekNumbers) {
            if (options.weekNumbersWithinDays) {
              this.cellWeekNumbersVisible = true;
              this.colWeekNumbersVisible = false;
            } else {
              this.cellWeekNumbersVisible = false;
              this.colWeekNumbersVisible = true;
            }
          } else {
            this.colWeekNumbersVisible = false;
            this.cellWeekNumbersVisible = false;
          }
        };

        AbstractDayGridView.prototype.render = function (props, context) {
          _super.prototype.render.call(this, props, context);

          this.processOptions(context.options);
          this.renderSkeleton(context);
        };

        AbstractDayGridView.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.renderSkeleton.unrender();
        };

        AbstractDayGridView.prototype._renderSkeleton = function (context) {
          this.el.classList.add('fc-dayGrid-view');
          this.el.innerHTML = this.renderSkeletonHtml();
          this.scroller = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollComponent"]('hidden', // overflow x
          'auto' // overflow y
          );
          var dayGridContainerEl = this.scroller.el;
          this.el.querySelector('.fc-body > tr > td').appendChild(dayGridContainerEl);
          dayGridContainerEl.classList.add('fc-day-grid-container');
          var dayGridEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
            className: 'fc-day-grid'
          });
          dayGridContainerEl.appendChild(dayGridEl);
          this.dayGrid = new DayGrid(dayGridEl, {
            renderNumberIntroHtml: this.renderDayGridNumberIntroHtml,
            renderBgIntroHtml: this.renderDayGridBgIntroHtml,
            renderIntroHtml: this.renderDayGridIntroHtml,
            colWeekNumbersVisible: this.colWeekNumbersVisible,
            cellWeekNumbersVisible: this.cellWeekNumbersVisible
          });
        };

        AbstractDayGridView.prototype._unrenderSkeleton = function () {
          this.el.classList.remove('fc-dayGrid-view');
          this.dayGrid.destroy();
          this.scroller.destroy();
        }; // Builds the HTML skeleton for the view.
        // The day-grid component will render inside of a container defined by this HTML.


        AbstractDayGridView.prototype.renderSkeletonHtml = function () {
          var _a = this.context,
              theme = _a.theme,
              options = _a.options;
          return '' + '<table class="' + theme.getClass('tableGrid') + '">' + (options.columnHeader ? '<thead class="fc-head">' + '<tr>' + '<td class="fc-head-container ' + theme.getClass('widgetHeader') + '">&nbsp;</td>' + '</tr>' + '</thead>' : '') + '<tbody class="fc-body">' + '<tr>' + '<td class="' + theme.getClass('widgetContent') + '"></td>' + '</tr>' + '</tbody>' + '</table>';
        }; // Generates an HTML attribute string for setting the width of the week number column, if it is known


        AbstractDayGridView.prototype.weekNumberStyleAttr = function () {
          if (this.weekNumberWidth != null) {
            return 'style="width:' + this.weekNumberWidth + 'px"';
          }

          return '';
        }; // Determines whether each row should have a constant height


        AbstractDayGridView.prototype.hasRigidRows = function () {
          var eventLimit = this.context.options.eventLimit;
          return eventLimit && typeof eventLimit !== 'number';
        };
        /* Dimensions
        ------------------------------------------------------------------------------------------------------------------*/


        AbstractDayGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
          _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first


          this.dayGrid.updateSize(isResize);
        }; // Refreshes the horizontal dimensions of the view


        AbstractDayGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {
          var dayGrid = this.dayGrid;
          var eventLimit = this.context.options.eventLimit;
          var headRowEl = this.header ? this.header.el : null; // HACK

          var scrollerHeight;
          var scrollbarWidths; // hack to give the view some height prior to dayGrid's columns being rendered
          // TODO: separate setting height from scroller VS dayGrid.

          if (!dayGrid.rowEls) {
            if (!isAuto) {
              scrollerHeight = this.computeScrollerHeight(viewHeight);
              this.scroller.setHeight(scrollerHeight);
            }

            return;
          }

          if (this.colWeekNumbersVisible) {
            // Make sure all week number cells running down the side have the same width.
            this.weekNumberWidth = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["matchCellWidths"])(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, '.fc-week-number'));
          } // reset all heights to be natural


          this.scroller.clear();

          if (headRowEl) {
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["uncompensateScroll"])(headRowEl);
          }

          dayGrid.removeSegPopover(); // kill the "more" popover if displayed
          // is the event limit a constant level number?

          if (eventLimit && typeof eventLimit === 'number') {
            dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after
          } // distribute the height to the rows
          // (viewHeight is a "recommended" value if isAuto)


          scrollerHeight = this.computeScrollerHeight(viewHeight);
          this.setGridHeight(scrollerHeight, isAuto); // is the event limit dynamically calculated?

          if (eventLimit && typeof eventLimit !== 'number') {
            dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set
          }

          if (!isAuto) {
            // should we force dimensions of the scroll container?
            this.scroller.setHeight(scrollerHeight);
            scrollbarWidths = this.scroller.getScrollbarWidths();

            if (scrollbarWidths.left || scrollbarWidths.right) {
              // using scrollbars?
              if (headRowEl) {
                Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compensateScroll"])(headRowEl, scrollbarWidths);
              } // doing the scrollbar compensation might have created text overflow which created more height. redo


              scrollerHeight = this.computeScrollerHeight(viewHeight);
              this.scroller.setHeight(scrollerHeight);
            } // guarantees the same scrollbar widths


            this.scroller.lockOverflow(scrollbarWidths);
          }
        }; // given a desired total height of the view, returns what the height of the scroller should be


        AbstractDayGridView.prototype.computeScrollerHeight = function (viewHeight) {
          return viewHeight - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["subtractInnerElHeight"])(this.el, this.scroller.el); // everything that's NOT the scroller
        }; // Sets the height of just the DayGrid component in this view


        AbstractDayGridView.prototype.setGridHeight = function (height, isAuto) {
          if (this.context.options.monthMode) {
            // if auto, make the height of each row the height that it would be if there were 6 weeks
            if (isAuto) {
              height *= this.dayGrid.rowCnt / 6;
            }

            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["distributeHeight"])(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows
          } else {
            if (isAuto) {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["undistributeHeight"])(this.dayGrid.rowEls); // let the rows be their natural height with no expanding
            } else {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["distributeHeight"])(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows
            }
          }
        };
        /* Scroll
        ------------------------------------------------------------------------------------------------------------------*/


        AbstractDayGridView.prototype.computeDateScroll = function (duration) {
          return {
            top: 0
          };
        };

        AbstractDayGridView.prototype.queryDateScroll = function () {
          return {
            top: this.scroller.getScrollTop()
          };
        };

        AbstractDayGridView.prototype.applyDateScroll = function (scroll) {
          if (scroll.top !== undefined) {
            this.scroller.setScrollTop(scroll.top);
          }
        };

        return AbstractDayGridView;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

      AbstractDayGridView.prototype.dateProfileGeneratorClass = DayGridDateProfileGenerator;

      var SimpleDayGrid =
      /** @class */
      function (_super) {
        __extends(SimpleDayGrid, _super);

        function SimpleDayGrid(dayGrid) {
          var _this = _super.call(this, dayGrid.el) || this;

          _this.slicer = new DayGridSlicer();
          _this.dayGrid = dayGrid;
          return _this;
        }

        SimpleDayGrid.prototype.firstContext = function (context) {
          context.calendar.registerInteractiveComponent(this, {
            el: this.dayGrid.el
          });
        };

        SimpleDayGrid.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.context.calendar.unregisterInteractiveComponent(this);
        };

        SimpleDayGrid.prototype.render = function (props, context) {
          var dayGrid = this.dayGrid;
          var dateProfile = props.dateProfile,
              dayTable = props.dayTable;
          dayGrid.receiveContext(context); // hack because context is used in sliceProps

          dayGrid.receiveProps(_assign2({}, this.slicer.sliceProps(props, dateProfile, props.nextDayThreshold, context.calendar, dayGrid, dayTable), {
            dateProfile: dateProfile,
            cells: dayTable.cells,
            isRigid: props.isRigid
          }), context);
        };

        SimpleDayGrid.prototype.buildPositionCaches = function () {
          this.dayGrid.buildPositionCaches();
        };

        SimpleDayGrid.prototype.queryHit = function (positionLeft, positionTop) {
          var rawHit = this.dayGrid.positionToHit(positionLeft, positionTop);

          if (rawHit) {
            return {
              component: this.dayGrid,
              dateSpan: rawHit.dateSpan,
              dayEl: rawHit.dayEl,
              rect: {
                left: rawHit.relativeRect.left,
                right: rawHit.relativeRect.right,
                top: rawHit.relativeRect.top,
                bottom: rawHit.relativeRect.bottom
              },
              layer: 0
            };
          }
        };

        return SimpleDayGrid;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateComponent"]);

      var DayGridSlicer =
      /** @class */
      function (_super) {
        __extends(DayGridSlicer, _super);

        function DayGridSlicer() {
          return _super !== null && _super.apply(this, arguments) || this;
        }

        DayGridSlicer.prototype.sliceRange = function (dateRange, dayTable) {
          return dayTable.sliceRange(dateRange);
        };

        return DayGridSlicer;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Slicer"]);

      var DayGridView =
      /** @class */
      function (_super) {
        __extends(DayGridView, _super);

        function DayGridView() {
          var _this = _super !== null && _super.apply(this, arguments) || this;

          _this.buildDayTable = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(buildDayTable);
          return _this;
        }

        DayGridView.prototype.render = function (props, context) {
          _super.prototype.render.call(this, props, context); // will call _renderSkeleton/_unrenderSkeleton


          var dateProfile = this.props.dateProfile;
          var dayTable = this.dayTable = this.buildDayTable(dateProfile, props.dateProfileGenerator);

          if (this.header) {
            this.header.receiveProps({
              dateProfile: dateProfile,
              dates: dayTable.headerDates,
              datesRepDistinctDays: dayTable.rowCnt === 1,
              renderIntroHtml: this.renderHeadIntroHtml
            }, context);
          }

          this.simpleDayGrid.receiveProps({
            dateProfile: dateProfile,
            dayTable: dayTable,
            businessHours: props.businessHours,
            dateSelection: props.dateSelection,
            eventStore: props.eventStore,
            eventUiBases: props.eventUiBases,
            eventSelection: props.eventSelection,
            eventDrag: props.eventDrag,
            eventResize: props.eventResize,
            isRigid: this.hasRigidRows(),
            nextDayThreshold: this.context.nextDayThreshold
          }, context);
        };

        DayGridView.prototype._renderSkeleton = function (context) {
          _super.prototype._renderSkeleton.call(this, context);

          if (context.options.columnHeader) {
            this.header = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DayHeader"](this.el.querySelector('.fc-head-container'));
          }

          this.simpleDayGrid = new SimpleDayGrid(this.dayGrid);
        };

        DayGridView.prototype._unrenderSkeleton = function () {
          _super.prototype._unrenderSkeleton.call(this);

          if (this.header) {
            this.header.destroy();
          }

          this.simpleDayGrid.destroy();
        };

        return DayGridView;
      }(AbstractDayGridView);

      function buildDayTable(dateProfile, dateProfileGenerator) {
        var daySeries = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DaySeries"](dateProfile.renderRange, dateProfileGenerator);
        return new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DayTable"](daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));
      }

      var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
        defaultView: 'dayGridMonth',
        views: {
          dayGrid: DayGridView,
          dayGridDay: {
            type: 'dayGrid',
            duration: {
              days: 1
            }
          },
          dayGridWeek: {
            type: 'dayGrid',
            duration: {
              weeks: 1
            }
          },
          dayGridMonth: {
            type: 'dayGrid',
            duration: {
              months: 1
            },
            monthMode: true,
            fixedWeekCount: true
          }
        }
      });
      /* harmony default export */

      __webpack_exports__["default"] = main;
      /***/
    },

    /***/
    "./node_modules/@fullcalendar/interaction/main.esm.js":
    /*!************************************************************!*\
      !*** ./node_modules/@fullcalendar/interaction/main.esm.js ***!
      \************************************************************/

    /*! exports provided: default, Draggable, FeaturefulElementDragging, PointerDragging, ThirdPartyDraggable */

    /***/
    function node_modulesFullcalendarInteractionMainEsmJs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Draggable", function () {
        return ExternalDraggable;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FeaturefulElementDragging", function () {
        return FeaturefulElementDragging;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PointerDragging", function () {
        return PointerDragging;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ThirdPartyDraggable", function () {
        return ThirdPartyDraggable;
      });
      /* harmony import */


      var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @fullcalendar/core */
      "./node_modules/@fullcalendar/core/main.esm.js");
      /*!
      FullCalendar Interaction Plugin v4.4.2
      Docs & License: https://fullcalendar.io/
      (c) 2019 Adam Shaw
      */

      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation.
      
      Permission to use, copy, modify, and/or distribute this software for any
      purpose with or without fee is hereby granted.
      
      THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
      REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
      INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
      LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
      OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.
      ***************************************************************************** */

      /* global Reflect, Promise */


      var _extendStatics3 = function extendStatics(d, b) {
        _extendStatics3 = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return _extendStatics3(d, b);
      };

      function __extends(d, b) {
        _extendStatics3(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }

      var _assign3 = function __assign() {
        _assign3 = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }

          return t;
        };

        return _assign3.apply(this, arguments);
      };

      _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].touchMouseIgnoreWait = 500;
      var ignoreMouseDepth = 0;
      var listenerCnt = 0;
      var isWindowTouchMoveCancelled = false;
      /*
      Uses a "pointer" abstraction, which monitors UI events for both mouse and touch.
      Tracks when the pointer "drags" on a certain element, meaning down+move+up.
      
      Also, tracks if there was touch-scrolling.
      Also, can prevent touch-scrolling from happening.
      Also, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.
      
      emits:
      - pointerdown
      - pointermove
      - pointerup
      */

      var PointerDragging =
      /** @class */
      function () {
        function PointerDragging(containerEl) {
          var _this = this;

          this.subjectEl = null;
          this.downEl = null; // options that can be directly assigned by caller

          this.selector = ''; // will cause subjectEl in all emitted events to be this element

          this.handleSelector = '';
          this.shouldIgnoreMove = false;
          this.shouldWatchScroll = true; // for simulating pointermove on scroll
          // internal states

          this.isDragging = false;
          this.isTouchDragging = false;
          this.wasTouchScroll = false; // Mouse
          // ----------------------------------------------------------------------------------------------------

          this.handleMouseDown = function (ev) {
            if (!_this.shouldIgnoreMouse() && isPrimaryMouseButton(ev) && _this.tryStart(ev)) {
              var pev = _this.createEventFromMouse(ev, true);

              _this.emitter.trigger('pointerdown', pev);

              _this.initScrollWatch(pev);

              if (!_this.shouldIgnoreMove) {
                document.addEventListener('mousemove', _this.handleMouseMove);
              }

              document.addEventListener('mouseup', _this.handleMouseUp);
            }
          };

          this.handleMouseMove = function (ev) {
            var pev = _this.createEventFromMouse(ev);

            _this.recordCoords(pev);

            _this.emitter.trigger('pointermove', pev);
          };

          this.handleMouseUp = function (ev) {
            document.removeEventListener('mousemove', _this.handleMouseMove);
            document.removeEventListener('mouseup', _this.handleMouseUp);

            _this.emitter.trigger('pointerup', _this.createEventFromMouse(ev));

            _this.cleanup(); // call last so that pointerup has access to props

          }; // Touch
          // ----------------------------------------------------------------------------------------------------


          this.handleTouchStart = function (ev) {
            if (_this.tryStart(ev)) {
              _this.isTouchDragging = true;

              var pev = _this.createEventFromTouch(ev, true);

              _this.emitter.trigger('pointerdown', pev);

              _this.initScrollWatch(pev); // unlike mouse, need to attach to target, not document
              // https://stackoverflow.com/a/45760014


              var target = ev.target;

              if (!_this.shouldIgnoreMove) {
                target.addEventListener('touchmove', _this.handleTouchMove);
              }

              target.addEventListener('touchend', _this.handleTouchEnd);
              target.addEventListener('touchcancel', _this.handleTouchEnd); // treat it as a touch end
              // attach a handler to get called when ANY scroll action happens on the page.
              // this was impossible to do with normal on/off because 'scroll' doesn't bubble.
              // http://stackoverflow.com/a/32954565/96342

              window.addEventListener('scroll', _this.handleTouchScroll, true // useCapture
              );
            }
          };

          this.handleTouchMove = function (ev) {
            var pev = _this.createEventFromTouch(ev);

            _this.recordCoords(pev);

            _this.emitter.trigger('pointermove', pev);
          };

          this.handleTouchEnd = function (ev) {
            if (_this.isDragging) {
              // done to guard against touchend followed by touchcancel
              var target = ev.target;
              target.removeEventListener('touchmove', _this.handleTouchMove);
              target.removeEventListener('touchend', _this.handleTouchEnd);
              target.removeEventListener('touchcancel', _this.handleTouchEnd);
              window.removeEventListener('scroll', _this.handleTouchScroll, true); // useCaptured=true

              _this.emitter.trigger('pointerup', _this.createEventFromTouch(ev));

              _this.cleanup(); // call last so that pointerup has access to props


              _this.isTouchDragging = false;
              startIgnoringMouse();
            }
          };

          this.handleTouchScroll = function () {
            _this.wasTouchScroll = true;
          };

          this.handleScroll = function (ev) {
            if (!_this.shouldIgnoreMove) {
              var pageX = window.pageXOffset - _this.prevScrollX + _this.prevPageX;
              var pageY = window.pageYOffset - _this.prevScrollY + _this.prevPageY;

              _this.emitter.trigger('pointermove', {
                origEvent: ev,
                isTouch: _this.isTouchDragging,
                subjectEl: _this.subjectEl,
                pageX: pageX,
                pageY: pageY,
                deltaX: pageX - _this.origPageX,
                deltaY: pageY - _this.origPageY
              });
            }
          };

          this.containerEl = containerEl;
          this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
          containerEl.addEventListener('mousedown', this.handleMouseDown);
          containerEl.addEventListener('touchstart', this.handleTouchStart, {
            passive: true
          });
          listenerCreated();
        }

        PointerDragging.prototype.destroy = function () {
          this.containerEl.removeEventListener('mousedown', this.handleMouseDown);
          this.containerEl.removeEventListener('touchstart', this.handleTouchStart, {
            passive: true
          });
          listenerDestroyed();
        };

        PointerDragging.prototype.tryStart = function (ev) {
          var subjectEl = this.querySubjectEl(ev);
          var downEl = ev.target;

          if (subjectEl && (!this.handleSelector || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(downEl, this.handleSelector))) {
            this.subjectEl = subjectEl;
            this.downEl = downEl;
            this.isDragging = true; // do this first so cancelTouchScroll will work

            this.wasTouchScroll = false;
            return true;
          }

          return false;
        };

        PointerDragging.prototype.cleanup = function () {
          isWindowTouchMoveCancelled = false;
          this.isDragging = false;
          this.subjectEl = null;
          this.downEl = null; // keep wasTouchScroll around for later access

          this.destroyScrollWatch();
        };

        PointerDragging.prototype.querySubjectEl = function (ev) {
          if (this.selector) {
            return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(ev.target, this.selector);
          } else {
            return this.containerEl;
          }
        };

        PointerDragging.prototype.shouldIgnoreMouse = function () {
          return ignoreMouseDepth || this.isTouchDragging;
        }; // can be called by user of this class, to cancel touch-based scrolling for the current drag


        PointerDragging.prototype.cancelTouchScroll = function () {
          if (this.isDragging) {
            isWindowTouchMoveCancelled = true;
          }
        }; // Scrolling that simulates pointermoves
        // ----------------------------------------------------------------------------------------------------


        PointerDragging.prototype.initScrollWatch = function (ev) {
          if (this.shouldWatchScroll) {
            this.recordCoords(ev);
            window.addEventListener('scroll', this.handleScroll, true); // useCapture=true
          }
        };

        PointerDragging.prototype.recordCoords = function (ev) {
          if (this.shouldWatchScroll) {
            this.prevPageX = ev.pageX;
            this.prevPageY = ev.pageY;
            this.prevScrollX = window.pageXOffset;
            this.prevScrollY = window.pageYOffset;
          }
        };

        PointerDragging.prototype.destroyScrollWatch = function () {
          if (this.shouldWatchScroll) {
            window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true
          }
        }; // Event Normalization
        // ----------------------------------------------------------------------------------------------------


        PointerDragging.prototype.createEventFromMouse = function (ev, isFirst) {
          var deltaX = 0;
          var deltaY = 0; // TODO: repeat code

          if (isFirst) {
            this.origPageX = ev.pageX;
            this.origPageY = ev.pageY;
          } else {
            deltaX = ev.pageX - this.origPageX;
            deltaY = ev.pageY - this.origPageY;
          }

          return {
            origEvent: ev,
            isTouch: false,
            subjectEl: this.subjectEl,
            pageX: ev.pageX,
            pageY: ev.pageY,
            deltaX: deltaX,
            deltaY: deltaY
          };
        };

        PointerDragging.prototype.createEventFromTouch = function (ev, isFirst) {
          var touches = ev.touches;
          var pageX;
          var pageY;
          var deltaX = 0;
          var deltaY = 0; // if touch coords available, prefer,
          // because FF would give bad ev.pageX ev.pageY

          if (touches && touches.length) {
            pageX = touches[0].pageX;
            pageY = touches[0].pageY;
          } else {
            pageX = ev.pageX;
            pageY = ev.pageY;
          } // TODO: repeat code


          if (isFirst) {
            this.origPageX = pageX;
            this.origPageY = pageY;
          } else {
            deltaX = pageX - this.origPageX;
            deltaY = pageY - this.origPageY;
          }

          return {
            origEvent: ev,
            isTouch: true,
            subjectEl: this.subjectEl,
            pageX: pageX,
            pageY: pageY,
            deltaX: deltaX,
            deltaY: deltaY
          };
        };

        return PointerDragging;
      }(); // Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)


      function isPrimaryMouseButton(ev) {
        return ev.button === 0 && !ev.ctrlKey;
      } // Ignoring fake mouse events generated by touch
      // ----------------------------------------------------------------------------------------------------


      function startIgnoringMouse() {
        ignoreMouseDepth++;
        setTimeout(function () {
          ignoreMouseDepth--;
        }, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].touchMouseIgnoreWait);
      } // We want to attach touchmove as early as possible for Safari
      // ----------------------------------------------------------------------------------------------------


      function listenerCreated() {
        if (!listenerCnt++) {
          window.addEventListener('touchmove', onWindowTouchMove, {
            passive: false
          });
        }
      }

      function listenerDestroyed() {
        if (! --listenerCnt) {
          window.removeEventListener('touchmove', onWindowTouchMove, {
            passive: false
          });
        }
      }

      function onWindowTouchMove(ev) {
        if (isWindowTouchMoveCancelled) {
          ev.preventDefault();
        }
      }
      /*
      An effect in which an element follows the movement of a pointer across the screen.
      The moving element is a clone of some other element.
      Must call start + handleMove + stop.
      */


      var ElementMirror =
      /** @class */
      function () {
        function ElementMirror() {
          this.isVisible = false; // must be explicitly enabled

          this.sourceEl = null;
          this.mirrorEl = null;
          this.sourceElRect = null; // screen coords relative to viewport
          // options that can be set directly by caller

          this.parentNode = document.body;
          this.zIndex = 9999;
          this.revertDuration = 0;
        }

        ElementMirror.prototype.start = function (sourceEl, pageX, pageY) {
          this.sourceEl = sourceEl;
          this.sourceElRect = this.sourceEl.getBoundingClientRect();
          this.origScreenX = pageX - window.pageXOffset;
          this.origScreenY = pageY - window.pageYOffset;
          this.deltaX = 0;
          this.deltaY = 0;
          this.updateElPosition();
        };

        ElementMirror.prototype.handleMove = function (pageX, pageY) {
          this.deltaX = pageX - window.pageXOffset - this.origScreenX;
          this.deltaY = pageY - window.pageYOffset - this.origScreenY;
          this.updateElPosition();
        }; // can be called before start


        ElementMirror.prototype.setIsVisible = function (bool) {
          if (bool) {
            if (!this.isVisible) {
              if (this.mirrorEl) {
                this.mirrorEl.style.display = '';
              }

              this.isVisible = bool; // needs to happen before updateElPosition

              this.updateElPosition(); // because was not updating the position while invisible
            }
          } else {
            if (this.isVisible) {
              if (this.mirrorEl) {
                this.mirrorEl.style.display = 'none';
              }

              this.isVisible = bool;
            }
          }
        }; // always async


        ElementMirror.prototype.stop = function (needsRevertAnimation, callback) {
          var _this = this;

          var done = function done() {
            _this.cleanup();

            callback();
          };

          if (needsRevertAnimation && this.mirrorEl && this.isVisible && this.revertDuration && ( // if 0, transition won't work
          this.deltaX || this.deltaY) // if same coords, transition won't work
          ) {
              this.doRevertAnimation(done, this.revertDuration);
            } else {
            setTimeout(done, 0);
          }
        };

        ElementMirror.prototype.doRevertAnimation = function (callback, revertDuration) {
          var mirrorEl = this.mirrorEl;
          var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened

          mirrorEl.style.transition = 'top ' + revertDuration + 'ms,' + 'left ' + revertDuration + 'ms';
          Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(mirrorEl, {
            left: finalSourceElRect.left,
            top: finalSourceElRect.top
          });
          Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["whenTransitionDone"])(mirrorEl, function () {
            mirrorEl.style.transition = '';
            callback();
          });
        };

        ElementMirror.prototype.cleanup = function () {
          if (this.mirrorEl) {
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.mirrorEl);
            this.mirrorEl = null;
          }

          this.sourceEl = null;
        };

        ElementMirror.prototype.updateElPosition = function () {
          if (this.sourceEl && this.isVisible) {
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(this.getMirrorEl(), {
              left: this.sourceElRect.left + this.deltaX,
              top: this.sourceElRect.top + this.deltaY
            });
          }
        };

        ElementMirror.prototype.getMirrorEl = function () {
          var sourceElRect = this.sourceElRect;
          var mirrorEl = this.mirrorEl;

          if (!mirrorEl) {
            mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true
            // we don't want long taps or any mouse interaction causing selection/menus.
            // would use preventSelection(), but that prevents selectstart, causing problems.

            mirrorEl.classList.add('fc-unselectable');
            mirrorEl.classList.add('fc-dragging');
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(mirrorEl, {
              position: 'fixed',
              zIndex: this.zIndex,
              visibility: '',
              boxSizing: 'border-box',
              width: sourceElRect.right - sourceElRect.left,
              height: sourceElRect.bottom - sourceElRect.top,
              right: 'auto',
              bottom: 'auto',
              margin: 0
            });
            this.parentNode.appendChild(mirrorEl);
          }

          return mirrorEl;
        };

        return ElementMirror;
      }();
      /*
      Is a cache for a given element's scroll information (all the info that ScrollController stores)
      in addition the "client rectangle" of the element.. the area within the scrollbars.
      
      The cache can be in one of two modes:
      - doesListening:false - ignores when the container is scrolled by someone else
      - doesListening:true - watch for scrolling and update the cache
      */


      var ScrollGeomCache =
      /** @class */
      function (_super) {
        __extends(ScrollGeomCache, _super);

        function ScrollGeomCache(scrollController, doesListening) {
          var _this = _super.call(this) || this;

          _this.handleScroll = function () {
            _this.scrollTop = _this.scrollController.getScrollTop();
            _this.scrollLeft = _this.scrollController.getScrollLeft();

            _this.handleScrollChange();
          };

          _this.scrollController = scrollController;
          _this.doesListening = doesListening;
          _this.scrollTop = _this.origScrollTop = scrollController.getScrollTop();
          _this.scrollLeft = _this.origScrollLeft = scrollController.getScrollLeft();
          _this.scrollWidth = scrollController.getScrollWidth();
          _this.scrollHeight = scrollController.getScrollHeight();
          _this.clientWidth = scrollController.getClientWidth();
          _this.clientHeight = scrollController.getClientHeight();
          _this.clientRect = _this.computeClientRect(); // do last in case it needs cached values

          if (_this.doesListening) {
            _this.getEventTarget().addEventListener('scroll', _this.handleScroll);
          }

          return _this;
        }

        ScrollGeomCache.prototype.destroy = function () {
          if (this.doesListening) {
            this.getEventTarget().removeEventListener('scroll', this.handleScroll);
          }
        };

        ScrollGeomCache.prototype.getScrollTop = function () {
          return this.scrollTop;
        };

        ScrollGeomCache.prototype.getScrollLeft = function () {
          return this.scrollLeft;
        };

        ScrollGeomCache.prototype.setScrollTop = function (top) {
          this.scrollController.setScrollTop(top);

          if (!this.doesListening) {
            // we are not relying on the element to normalize out-of-bounds scroll values
            // so we need to sanitize ourselves
            this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);
            this.handleScrollChange();
          }
        };

        ScrollGeomCache.prototype.setScrollLeft = function (top) {
          this.scrollController.setScrollLeft(top);

          if (!this.doesListening) {
            // we are not relying on the element to normalize out-of-bounds scroll values
            // so we need to sanitize ourselves
            this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);
            this.handleScrollChange();
          }
        };

        ScrollGeomCache.prototype.getClientWidth = function () {
          return this.clientWidth;
        };

        ScrollGeomCache.prototype.getClientHeight = function () {
          return this.clientHeight;
        };

        ScrollGeomCache.prototype.getScrollWidth = function () {
          return this.scrollWidth;
        };

        ScrollGeomCache.prototype.getScrollHeight = function () {
          return this.scrollHeight;
        };

        ScrollGeomCache.prototype.handleScrollChange = function () {};

        return ScrollGeomCache;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollController"]);

      var ElementScrollGeomCache =
      /** @class */
      function (_super) {
        __extends(ElementScrollGeomCache, _super);

        function ElementScrollGeomCache(el, doesListening) {
          return _super.call(this, new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementScrollController"](el), doesListening) || this;
        }

        ElementScrollGeomCache.prototype.getEventTarget = function () {
          return this.scrollController.el;
        };

        ElementScrollGeomCache.prototype.computeClientRect = function () {
          return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeInnerRect"])(this.scrollController.el);
        };

        return ElementScrollGeomCache;
      }(ScrollGeomCache);

      var WindowScrollGeomCache =
      /** @class */
      function (_super) {
        __extends(WindowScrollGeomCache, _super);

        function WindowScrollGeomCache(doesListening) {
          return _super.call(this, new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["WindowScrollController"](), doesListening) || this;
        }

        WindowScrollGeomCache.prototype.getEventTarget = function () {
          return window;
        };

        WindowScrollGeomCache.prototype.computeClientRect = function () {
          return {
            left: this.scrollLeft,
            right: this.scrollLeft + this.clientWidth,
            top: this.scrollTop,
            bottom: this.scrollTop + this.clientHeight
          };
        }; // the window is the only scroll object that changes it's rectangle relative
        // to the document's topleft as it scrolls


        WindowScrollGeomCache.prototype.handleScrollChange = function () {
          this.clientRect = this.computeClientRect();
        };

        return WindowScrollGeomCache;
      }(ScrollGeomCache); // If available we are using native "performance" API instead of "Date"
      // Read more about it on MDN:
      // https://developer.mozilla.org/en-US/docs/Web/API/Performance


      var getTime = typeof performance === 'function' ? performance.now : Date.now;
      /*
      For a pointer interaction, automatically scrolls certain scroll containers when the pointer
      approaches the edge.
      
      The caller must call start + handleMove + stop.
      */

      var AutoScroller =
      /** @class */
      function () {
        function AutoScroller() {
          var _this = this; // options that can be set by caller


          this.isEnabled = true;
          this.scrollQuery = [window, '.fc-scroller'];
          this.edgeThreshold = 50; // pixels

          this.maxVelocity = 300; // pixels per second
          // internal state

          this.pointerScreenX = null;
          this.pointerScreenY = null;
          this.isAnimating = false;
          this.scrollCaches = null; // protect against the initial pointerdown being too close to an edge and starting the scroll

          this.everMovedUp = false;
          this.everMovedDown = false;
          this.everMovedLeft = false;
          this.everMovedRight = false;

          this.animate = function () {
            if (_this.isAnimating) {
              // wasn't cancelled between animation calls
              var edge = _this.computeBestEdge(_this.pointerScreenX + window.pageXOffset, _this.pointerScreenY + window.pageYOffset);

              if (edge) {
                var now = getTime();

                _this.handleSide(edge, (now - _this.msSinceRequest) / 1000);

                _this.requestAnimation(now);
              } else {
                _this.isAnimating = false; // will stop animation
              }
            }
          };
        }

        AutoScroller.prototype.start = function (pageX, pageY) {
          if (this.isEnabled) {
            this.scrollCaches = this.buildCaches();
            this.pointerScreenX = null;
            this.pointerScreenY = null;
            this.everMovedUp = false;
            this.everMovedDown = false;
            this.everMovedLeft = false;
            this.everMovedRight = false;
            this.handleMove(pageX, pageY);
          }
        };

        AutoScroller.prototype.handleMove = function (pageX, pageY) {
          if (this.isEnabled) {
            var pointerScreenX = pageX - window.pageXOffset;
            var pointerScreenY = pageY - window.pageYOffset;
            var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;
            var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;

            if (yDelta < 0) {
              this.everMovedUp = true;
            } else if (yDelta > 0) {
              this.everMovedDown = true;
            }

            if (xDelta < 0) {
              this.everMovedLeft = true;
            } else if (xDelta > 0) {
              this.everMovedRight = true;
            }

            this.pointerScreenX = pointerScreenX;
            this.pointerScreenY = pointerScreenY;

            if (!this.isAnimating) {
              this.isAnimating = true;
              this.requestAnimation(getTime());
            }
          }
        };

        AutoScroller.prototype.stop = function () {
          if (this.isEnabled) {
            this.isAnimating = false; // will stop animation

            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
              var scrollCache = _a[_i];
              scrollCache.destroy();
            }

            this.scrollCaches = null;
          }
        };

        AutoScroller.prototype.requestAnimation = function (now) {
          this.msSinceRequest = now;
          requestAnimationFrame(this.animate);
        };

        AutoScroller.prototype.handleSide = function (edge, seconds) {
          var scrollCache = edge.scrollCache;
          var edgeThreshold = this.edgeThreshold;
          var invDistance = edgeThreshold - edge.distance;
          var velocity = // the closer to the edge, the faster we scroll
          invDistance * invDistance / (edgeThreshold * edgeThreshold) * // quadratic
          this.maxVelocity * seconds;
          var sign = 1;

          switch (edge.name) {
            case 'left':
              sign = -1;
            // falls through

            case 'right':
              scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);
              break;

            case 'top':
              sign = -1;
            // falls through

            case 'bottom':
              scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);
              break;
          }
        }; // left/top are relative to document topleft


        AutoScroller.prototype.computeBestEdge = function (left, top) {
          var edgeThreshold = this.edgeThreshold;
          var bestSide = null;

          for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
            var scrollCache = _a[_i];
            var rect = scrollCache.clientRect;
            var leftDist = left - rect.left;
            var rightDist = rect.right - left;
            var topDist = top - rect.top;
            var bottomDist = rect.bottom - top; // completely within the rect?

            if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {
              if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() && (!bestSide || bestSide.distance > topDist)) {
                bestSide = {
                  scrollCache: scrollCache,
                  name: 'top',
                  distance: topDist
                };
              }

              if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() && (!bestSide || bestSide.distance > bottomDist)) {
                bestSide = {
                  scrollCache: scrollCache,
                  name: 'bottom',
                  distance: bottomDist
                };
              }

              if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() && (!bestSide || bestSide.distance > leftDist)) {
                bestSide = {
                  scrollCache: scrollCache,
                  name: 'left',
                  distance: leftDist
                };
              }

              if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() && (!bestSide || bestSide.distance > rightDist)) {
                bestSide = {
                  scrollCache: scrollCache,
                  name: 'right',
                  distance: rightDist
                };
              }
            }
          }

          return bestSide;
        };

        AutoScroller.prototype.buildCaches = function () {
          return this.queryScrollEls().map(function (el) {
            if (el === window) {
              return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls
            } else {
              return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls
            }
          });
        };

        AutoScroller.prototype.queryScrollEls = function () {
          var els = [];

          for (var _i = 0, _a = this.scrollQuery; _i < _a.length; _i++) {
            var query = _a[_i];

            if (typeof query === 'object') {
              els.push(query);
            } else {
              els.push.apply(els, Array.prototype.slice.call(document.querySelectorAll(query)));
            }
          }

          return els;
        };

        return AutoScroller;
      }();
      /*
      Monitors dragging on an element. Has a number of high-level features:
      - minimum distance required before dragging
      - minimum wait time ("delay") before dragging
      - a mirror element that follows the pointer
      */


      var FeaturefulElementDragging =
      /** @class */
      function (_super) {
        __extends(FeaturefulElementDragging, _super);

        function FeaturefulElementDragging(containerEl) {
          var _this = _super.call(this, containerEl) || this; // options that can be directly set by caller
          // the caller can also set the PointerDragging's options as well


          _this.delay = null;
          _this.minDistance = 0;
          _this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag

          _this.mirrorNeedsRevert = false;
          _this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup

          _this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation

          _this.isDelayEnded = false;
          _this.isDistanceSurpassed = false;
          _this.delayTimeoutId = null;

          _this.onPointerDown = function (ev) {
            if (!_this.isDragging) {
              // so new drag doesn't happen while revert animation is going
              _this.isInteracting = true;
              _this.isDelayEnded = false;
              _this.isDistanceSurpassed = false;
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventSelection"])(document.body);
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["preventContextMenu"])(document.body); // prevent links from being visited if there's an eventual drag.
              // also prevents selection in older browsers (maybe?).
              // not necessary for touch, besides, browser would complain about passiveness.

              if (!ev.isTouch) {
                ev.origEvent.preventDefault();
              }

              _this.emitter.trigger('pointerdown', ev);

              if (!_this.pointer.shouldIgnoreMove) {
                // actions related to initiating dragstart+dragmove+dragend...
                _this.mirror.setIsVisible(false); // reset. caller must set-visible


                _this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down


                _this.startDelay(ev);

                if (!_this.minDistance) {
                  _this.handleDistanceSurpassed(ev);
                }
              }
            }
          };

          _this.onPointerMove = function (ev) {
            if (_this.isInteracting) {
              // if false, still waiting for previous drag's revert
              _this.emitter.trigger('pointermove', ev);

              if (!_this.isDistanceSurpassed) {
                var minDistance = _this.minDistance;
                var distanceSq = void 0; // current distance from the origin, squared

                var deltaX = ev.deltaX,
                    deltaY = ev.deltaY;
                distanceSq = deltaX * deltaX + deltaY * deltaY;

                if (distanceSq >= minDistance * minDistance) {
                  // use pythagorean theorem
                  _this.handleDistanceSurpassed(ev);
                }
              }

              if (_this.isDragging) {
                // a real pointer move? (not one simulated by scrolling)
                if (ev.origEvent.type !== 'scroll') {
                  _this.mirror.handleMove(ev.pageX, ev.pageY);

                  _this.autoScroller.handleMove(ev.pageX, ev.pageY);
                }

                _this.emitter.trigger('dragmove', ev);
              }
            }
          };

          _this.onPointerUp = function (ev) {
            if (_this.isInteracting) {
              // if false, still waiting for previous drag's revert
              _this.isInteracting = false;
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["allowSelection"])(document.body);
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["allowContextMenu"])(document.body);

              _this.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert


              if (_this.isDragging) {
                _this.autoScroller.stop();

                _this.tryStopDrag(ev); // which will stop the mirror

              }

              if (_this.delayTimeoutId) {
                clearTimeout(_this.delayTimeoutId);
                _this.delayTimeoutId = null;
              }
            }
          };

          var pointer = _this.pointer = new PointerDragging(containerEl);
          pointer.emitter.on('pointerdown', _this.onPointerDown);
          pointer.emitter.on('pointermove', _this.onPointerMove);
          pointer.emitter.on('pointerup', _this.onPointerUp);
          _this.mirror = new ElementMirror();
          _this.autoScroller = new AutoScroller();
          return _this;
        }

        FeaturefulElementDragging.prototype.destroy = function () {
          this.pointer.destroy();
        };

        FeaturefulElementDragging.prototype.startDelay = function (ev) {
          var _this = this;

          if (typeof this.delay === 'number') {
            this.delayTimeoutId = setTimeout(function () {
              _this.delayTimeoutId = null;

              _this.handleDelayEnd(ev);
            }, this.delay); // not assignable to number!
          } else {
            this.handleDelayEnd(ev);
          }
        };

        FeaturefulElementDragging.prototype.handleDelayEnd = function (ev) {
          this.isDelayEnded = true;
          this.tryStartDrag(ev);
        };

        FeaturefulElementDragging.prototype.handleDistanceSurpassed = function (ev) {
          this.isDistanceSurpassed = true;
          this.tryStartDrag(ev);
        };

        FeaturefulElementDragging.prototype.tryStartDrag = function (ev) {
          if (this.isDelayEnded && this.isDistanceSurpassed) {
            if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {
              this.isDragging = true;
              this.mirrorNeedsRevert = false;
              this.autoScroller.start(ev.pageX, ev.pageY);
              this.emitter.trigger('dragstart', ev);

              if (this.touchScrollAllowed === false) {
                this.pointer.cancelTouchScroll();
              }
            }
          }
        };

        FeaturefulElementDragging.prototype.tryStopDrag = function (ev) {
          // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events
          // that come from the document to fire beforehand. much more convenient this way.
          this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev) // bound with args
          );
        };

        FeaturefulElementDragging.prototype.stopDrag = function (ev) {
          this.isDragging = false;
          this.emitter.trigger('dragend', ev);
        }; // fill in the implementations...


        FeaturefulElementDragging.prototype.setIgnoreMove = function (bool) {
          this.pointer.shouldIgnoreMove = bool;
        };

        FeaturefulElementDragging.prototype.setMirrorIsVisible = function (bool) {
          this.mirror.setIsVisible(bool);
        };

        FeaturefulElementDragging.prototype.setMirrorNeedsRevert = function (bool) {
          this.mirrorNeedsRevert = bool;
        };

        FeaturefulElementDragging.prototype.setAutoScrollEnabled = function (bool) {
          this.autoScroller.isEnabled = bool;
        };

        return FeaturefulElementDragging;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementDragging"]);
      /*
      When this class is instantiated, it records the offset of an element (relative to the document topleft),
      and continues to monitor scrolling, updating the cached coordinates if it needs to.
      Does not access the DOM after instantiation, so highly performant.
      
      Also keeps track of all scrolling/overflow:hidden containers that are parents of the given element
      and an determine if a given point is inside the combined clipping rectangle.
      */


      var OffsetTracker =
      /** @class */
      function () {
        function OffsetTracker(el) {
          this.origRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(el); // will work fine for divs that have overflow:hidden

          this.scrollCaches = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getClippingParents"])(el).map(function (el) {
            return new ElementScrollGeomCache(el, true); // listen=true
          });
        }

        OffsetTracker.prototype.destroy = function () {
          for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
            var scrollCache = _a[_i];
            scrollCache.destroy();
          }
        };

        OffsetTracker.prototype.computeLeft = function () {
          var left = this.origRect.left;

          for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
            var scrollCache = _a[_i];
            left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();
          }

          return left;
        };

        OffsetTracker.prototype.computeTop = function () {
          var top = this.origRect.top;

          for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
            var scrollCache = _a[_i];
            top += scrollCache.origScrollTop - scrollCache.getScrollTop();
          }

          return top;
        };

        OffsetTracker.prototype.isWithinClipping = function (pageX, pageY) {
          var point = {
            left: pageX,
            top: pageY
          };

          for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {
            var scrollCache = _a[_i];

            if (!isIgnoredClipping(scrollCache.getEventTarget()) && !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["pointInsideRect"])(point, scrollCache.clientRect)) {
              return false;
            }
          }

          return true;
        };

        return OffsetTracker;
      }(); // certain clipping containers should never constrain interactions, like <html> and <body>
      // https://github.com/fullcalendar/fullcalendar/issues/3615


      function isIgnoredClipping(node) {
        var tagName = node.tagName;
        return tagName === 'HTML' || tagName === 'BODY';
      }
      /*
      Tracks movement over multiple droppable areas (aka "hits")
      that exist in one or more DateComponents.
      Relies on an existing draggable.
      
      emits:
      - pointerdown
      - dragstart
      - hitchange - fires initially, even if not over a hit
      - pointerup
      - (hitchange - again, to null, if ended over a hit)
      - dragend
      */


      var HitDragging =
      /** @class */
      function () {
        function HitDragging(dragging, droppableStore) {
          var _this = this; // options that can be set by caller


          this.useSubjectCenter = false;
          this.requireInitial = true; // if doesn't start out on a hit, won't emit any events

          this.initialHit = null;
          this.movingHit = null;
          this.finalHit = null; // won't ever be populated if shouldIgnoreMove

          this.handlePointerDown = function (ev) {
            var dragging = _this.dragging;
            _this.initialHit = null;
            _this.movingHit = null;
            _this.finalHit = null;

            _this.prepareHits();

            _this.processFirstCoord(ev);

            if (_this.initialHit || !_this.requireInitial) {
              dragging.setIgnoreMove(false);

              _this.emitter.trigger('pointerdown', ev); // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(

            } else {
              dragging.setIgnoreMove(true);
            }
          };

          this.handleDragStart = function (ev) {
            _this.emitter.trigger('dragstart', ev);

            _this.handleMove(ev, true); // force = fire even if initially null

          };

          this.handleDragMove = function (ev) {
            _this.emitter.trigger('dragmove', ev);

            _this.handleMove(ev);
          };

          this.handlePointerUp = function (ev) {
            _this.releaseHits();

            _this.emitter.trigger('pointerup', ev);
          };

          this.handleDragEnd = function (ev) {
            if (_this.movingHit) {
              _this.emitter.trigger('hitupdate', null, true, ev);
            }

            _this.finalHit = _this.movingHit;
            _this.movingHit = null;

            _this.emitter.trigger('dragend', ev);
          };

          this.droppableStore = droppableStore;
          dragging.emitter.on('pointerdown', this.handlePointerDown);
          dragging.emitter.on('dragstart', this.handleDragStart);
          dragging.emitter.on('dragmove', this.handleDragMove);
          dragging.emitter.on('pointerup', this.handlePointerUp);
          dragging.emitter.on('dragend', this.handleDragEnd);
          this.dragging = dragging;
          this.emitter = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EmitterMixin"]();
        } // sets initialHit
        // sets coordAdjust


        HitDragging.prototype.processFirstCoord = function (ev) {
          var origPoint = {
            left: ev.pageX,
            top: ev.pageY
          };
          var adjustedPoint = origPoint;
          var subjectEl = ev.subjectEl;
          var subjectRect;

          if (subjectEl !== document) {
            subjectRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeRect"])(subjectEl);
            adjustedPoint = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["constrainPoint"])(adjustedPoint, subjectRect);
          }

          var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);

          if (initialHit) {
            if (this.useSubjectCenter && subjectRect) {
              var slicedSubjectRect = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRects"])(subjectRect, initialHit.rect);

              if (slicedSubjectRect) {
                adjustedPoint = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRectCenter"])(slicedSubjectRect);
              }
            }

            this.coordAdjust = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffPoints"])(adjustedPoint, origPoint);
          } else {
            this.coordAdjust = {
              left: 0,
              top: 0
            };
          }
        };

        HitDragging.prototype.handleMove = function (ev, forceHandle) {
          var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);

          if (forceHandle || !isHitsEqual(this.movingHit, hit)) {
            this.movingHit = hit;
            this.emitter.trigger('hitupdate', hit, false, ev);
          }
        };

        HitDragging.prototype.prepareHits = function () {
          this.offsetTrackers = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["mapHash"])(this.droppableStore, function (interactionSettings) {
            interactionSettings.component.buildPositionCaches();
            return new OffsetTracker(interactionSettings.el);
          });
        };

        HitDragging.prototype.releaseHits = function () {
          var offsetTrackers = this.offsetTrackers;

          for (var id in offsetTrackers) {
            offsetTrackers[id].destroy();
          }

          this.offsetTrackers = {};
        };

        HitDragging.prototype.queryHitForOffset = function (offsetLeft, offsetTop) {
          var _a = this,
              droppableStore = _a.droppableStore,
              offsetTrackers = _a.offsetTrackers;

          var bestHit = null;

          for (var id in droppableStore) {
            var component = droppableStore[id].component;
            var offsetTracker = offsetTrackers[id];

            if (offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {
              var originLeft = offsetTracker.computeLeft();
              var originTop = offsetTracker.computeTop();
              var positionLeft = offsetLeft - originLeft;
              var positionTop = offsetTop - originTop;
              var origRect = offsetTracker.origRect;
              var width = origRect.right - origRect.left;
              var height = origRect.bottom - origRect.top;

              if ( // must be within the element's bounds
              positionLeft >= 0 && positionLeft < width && positionTop >= 0 && positionTop < height) {
                var hit = component.queryHit(positionLeft, positionTop, width, height);

                if (hit && ( // make sure the hit is within activeRange, meaning it's not a deal cell
                !component.props.dateProfile || // hack for DayTile
                Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["rangeContainsRange"])(component.props.dateProfile.activeRange, hit.dateSpan.range)) && (!bestHit || hit.layer > bestHit.layer)) {
                  // TODO: better way to re-orient rectangle
                  hit.rect.left += originLeft;
                  hit.rect.right += originLeft;
                  hit.rect.top += originTop;
                  hit.rect.bottom += originTop;
                  bestHit = hit;
                }
              }
            }
          }

          return bestHit;
        };

        return HitDragging;
      }();

      function isHitsEqual(hit0, hit1) {
        if (!hit0 && !hit1) {
          return true;
        }

        if (Boolean(hit0) !== Boolean(hit1)) {
          return false;
        }

        return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isDateSpansEqual"])(hit0.dateSpan, hit1.dateSpan);
      }
      /*
      Monitors when the user clicks on a specific date/time of a component.
      A pointerdown+pointerup on the same "hit" constitutes a click.
      */


      var DateClicking =
      /** @class */
      function (_super) {
        __extends(DateClicking, _super);

        function DateClicking(settings) {
          var _this = _super.call(this, settings) || this;

          _this.handlePointerDown = function (ev) {
            var dragging = _this.dragging; // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired

            dragging.setIgnoreMove(!_this.component.isValidDateDownEl(dragging.pointer.downEl));
          }; // won't even fire if moving was ignored


          _this.handleDragEnd = function (ev) {
            var component = _this.component;
            var _a = component.context,
                calendar = _a.calendar,
                view = _a.view;
            var pointer = _this.dragging.pointer;

            if (!pointer.wasTouchScroll) {
              var _b = _this.hitDragging,
                  initialHit = _b.initialHit,
                  finalHit = _b.finalHit;

              if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {
                calendar.triggerDateClick(initialHit.dateSpan, initialHit.dayEl, view, ev.origEvent);
              }
            }
          };

          var component = settings.component; // we DO want to watch pointer moves because otherwise finalHit won't get populated

          _this.dragging = new FeaturefulElementDragging(component.el);
          _this.dragging.autoScroller.isEnabled = false;
          var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
          hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
          hitDragging.emitter.on('dragend', _this.handleDragEnd);
          return _this;
        }

        DateClicking.prototype.destroy = function () {
          this.dragging.destroy();
        };

        return DateClicking;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);
      /*
      Tracks when the user selects a portion of time of a component,
      constituted by a drag over date cells, with a possible delay at the beginning of the drag.
      */


      var DateSelecting =
      /** @class */
      function (_super) {
        __extends(DateSelecting, _super);

        function DateSelecting(settings) {
          var _this = _super.call(this, settings) || this;

          _this.dragSelection = null;

          _this.handlePointerDown = function (ev) {
            var _a = _this,
                component = _a.component,
                dragging = _a.dragging;
            var options = component.context.options;
            var canSelect = options.selectable && component.isValidDateDownEl(ev.origEvent.target); // don't bother to watch expensive moves if component won't do selection

            dragging.setIgnoreMove(!canSelect); // if touch, require user to hold down

            dragging.delay = ev.isTouch ? getComponentTouchDelay(component) : null;
          };

          _this.handleDragStart = function (ev) {
            _this.component.context.calendar.unselect(ev); // unselect previous selections

          };

          _this.handleHitUpdate = function (hit, isFinal) {
            var calendar = _this.component.context.calendar;
            var dragSelection = null;
            var isInvalid = false;

            if (hit) {
              dragSelection = joinHitsIntoSelection(_this.hitDragging.initialHit, hit, calendar.pluginSystem.hooks.dateSelectionTransformers);

              if (!dragSelection || !_this.component.isDateSelectionValid(dragSelection)) {
                isInvalid = true;
                dragSelection = null;
              }
            }

            if (dragSelection) {
              calendar.dispatch({
                type: 'SELECT_DATES',
                selection: dragSelection
              });
            } else if (!isFinal) {
              // only unselect if moved away while dragging
              calendar.dispatch({
                type: 'UNSELECT_DATES'
              });
            }

            if (!isInvalid) {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
            } else {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
            }

            if (!isFinal) {
              _this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging
            }
          };

          _this.handlePointerUp = function (pev) {
            if (_this.dragSelection) {
              // selection is already rendered, so just need to report selection
              _this.component.context.calendar.triggerDateSelect(_this.dragSelection, pev);

              _this.dragSelection = null;
            }
          };

          var component = settings.component;
          var options = component.context.options;
          var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
          dragging.touchScrollAllowed = false;
          dragging.minDistance = options.selectMinDistance || 0;
          dragging.autoScroller.isEnabled = options.dragScroll;
          var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
          hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
          hitDragging.emitter.on('dragstart', _this.handleDragStart);
          hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
          hitDragging.emitter.on('pointerup', _this.handlePointerUp);
          return _this;
        }

        DateSelecting.prototype.destroy = function () {
          this.dragging.destroy();
        };

        return DateSelecting;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

      function getComponentTouchDelay(component) {
        var options = component.context.options;
        var delay = options.selectLongPressDelay;

        if (delay == null) {
          delay = options.longPressDelay;
        }

        return delay;
      }

      function joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {
        var dateSpan0 = hit0.dateSpan;
        var dateSpan1 = hit1.dateSpan;
        var ms = [dateSpan0.range.start, dateSpan0.range.end, dateSpan1.range.start, dateSpan1.range.end];
        ms.sort(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compareNumbers"]);
        var props = {};

        for (var _i = 0, dateSelectionTransformers_1 = dateSelectionTransformers; _i < dateSelectionTransformers_1.length; _i++) {
          var transformer = dateSelectionTransformers_1[_i];
          var res = transformer(hit0, hit1);

          if (res === false) {
            return null;
          } else if (res) {
            _assign3(props, res);
          }
        }

        props.range = {
          start: ms[0],
          end: ms[3]
        };
        props.allDay = dateSpan0.allDay;
        return props;
      }

      var EventDragging =
      /** @class */
      function (_super) {
        __extends(EventDragging, _super);

        function EventDragging(settings) {
          var _this = _super.call(this, settings) || this; // internal state


          _this.subjectSeg = null; // the seg being selected/dragged

          _this.isDragging = false;
          _this.eventRange = null;
          _this.relevantEvents = null; // the events being dragged

          _this.receivingCalendar = null;
          _this.validMutation = null;
          _this.mutatedRelevantEvents = null;

          _this.handlePointerDown = function (ev) {
            var origTarget = ev.origEvent.target;
            var _a = _this,
                component = _a.component,
                dragging = _a.dragging;
            var mirror = dragging.mirror;
            var options = component.context.options;
            var initialCalendar = component.context.calendar;
            var subjectSeg = _this.subjectSeg = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getElSeg"])(ev.subjectEl);
            var eventRange = _this.eventRange = subjectSeg.eventRange;
            var eventInstanceId = eventRange.instance.instanceId;
            _this.relevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRelevantEvents"])(initialCalendar.state.eventStore, eventInstanceId);
            dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;
            dragging.delay = // only do a touch delay if touch and this event hasn't been selected yet
            ev.isTouch && eventInstanceId !== component.props.eventSelection ? getComponentTouchDelay$1(component) : null;
            mirror.parentNode = initialCalendar.el;
            mirror.revertDuration = options.dragRevertDuration;
            var isValid = component.isValidSegDownEl(origTarget) && !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(origTarget, '.fc-resizer'); // NOT on a resizer

            dragging.setIgnoreMove(!isValid); // disable dragging for elements that are resizable (ie, selectable)
            // but are not draggable

            _this.isDragging = isValid && ev.subjectEl.classList.contains('fc-draggable');
          };

          _this.handleDragStart = function (ev) {
            var context = _this.component.context;
            var initialCalendar = context.calendar;
            var eventRange = _this.eventRange;
            var eventInstanceId = eventRange.instance.instanceId;

            if (ev.isTouch) {
              // need to select a different event?
              if (eventInstanceId !== _this.component.props.eventSelection) {
                initialCalendar.dispatch({
                  type: 'SELECT_EVENT',
                  eventInstanceId: eventInstanceId
                });
              }
            } else {
              // if now using mouse, but was previous touch interaction, clear selected event
              initialCalendar.dispatch({
                type: 'UNSELECT_EVENT'
              });
            }

            if (_this.isDragging) {
              initialCalendar.unselect(ev); // unselect *date* selection

              initialCalendar.publiclyTrigger('eventDragStart', [{
                el: _this.subjectSeg.el,
                event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](initialCalendar, eventRange.def, eventRange.instance),
                jsEvent: ev.origEvent,
                view: context.view
              }]);
            }
          };

          _this.handleHitUpdate = function (hit, isFinal) {
            if (!_this.isDragging) {
              return;
            }

            var relevantEvents = _this.relevantEvents;
            var initialHit = _this.hitDragging.initialHit;
            var initialCalendar = _this.component.context.calendar; // states based on new hit

            var receivingCalendar = null;
            var mutation = null;
            var mutatedRelevantEvents = null;
            var isInvalid = false;
            var interaction = {
              affectedEvents: relevantEvents,
              mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
              isEvent: true,
              origSeg: _this.subjectSeg
            };

            if (hit) {
              var receivingComponent = hit.component;
              receivingCalendar = receivingComponent.context.calendar;
              var receivingOptions = receivingComponent.context.options;

              if (initialCalendar === receivingCalendar || receivingOptions.editable && receivingOptions.droppable) {
                mutation = computeEventMutation(initialHit, hit, receivingCalendar.pluginSystem.hooks.eventDragMutationMassagers);

                if (mutation) {
                  mutatedRelevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyMutationToEventStore"])(relevantEvents, receivingCalendar.eventUiBases, mutation, receivingCalendar);
                  interaction.mutatedEvents = mutatedRelevantEvents;

                  if (!receivingComponent.isInteractionValid(interaction)) {
                    isInvalid = true;
                    mutation = null;
                    mutatedRelevantEvents = null;
                    interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])();
                  }
                }
              } else {
                receivingCalendar = null;
              }
            }

            _this.displayDrag(receivingCalendar, interaction);

            if (!isInvalid) {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
            } else {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
            }

            if (!isFinal) {
              if (initialCalendar === receivingCalendar && // TODO: write test for this
              isHitsEqual(initialHit, hit)) {
                mutation = null;
              }

              _this.dragging.setMirrorNeedsRevert(!mutation); // render the mirror if no already-rendered mirror
              // TODO: wish we could somehow wait for dispatch to guarantee render


              _this.dragging.setMirrorIsVisible(!hit || !document.querySelector('.fc-mirror')); // assign states based on new hit


              _this.receivingCalendar = receivingCalendar;
              _this.validMutation = mutation;
              _this.mutatedRelevantEvents = mutatedRelevantEvents;
            }
          };

          _this.handlePointerUp = function () {
            if (!_this.isDragging) {
              _this.cleanup(); // because handleDragEnd won't fire

            }
          };

          _this.handleDragEnd = function (ev) {
            if (_this.isDragging) {
              var context = _this.component.context;
              var initialCalendar_1 = context.calendar;
              var initialView = context.view;
              var _a = _this,
                  receivingCalendar = _a.receivingCalendar,
                  validMutation = _a.validMutation;
              var eventDef = _this.eventRange.def;
              var eventInstance = _this.eventRange.instance;
              var eventApi = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](initialCalendar_1, eventDef, eventInstance);
              var relevantEvents_1 = _this.relevantEvents;
              var mutatedRelevantEvents = _this.mutatedRelevantEvents;
              var finalHit = _this.hitDragging.finalHit;

              _this.clearDrag(); // must happen after revert animation


              initialCalendar_1.publiclyTrigger('eventDragStop', [{
                el: _this.subjectSeg.el,
                event: eventApi,
                jsEvent: ev.origEvent,
                view: initialView
              }]);

              if (validMutation) {
                // dropped within same calendar
                if (receivingCalendar === initialCalendar_1) {
                  initialCalendar_1.dispatch({
                    type: 'MERGE_EVENTS',
                    eventStore: mutatedRelevantEvents
                  });
                  var transformed = {};

                  for (var _i = 0, _b = initialCalendar_1.pluginSystem.hooks.eventDropTransformers; _i < _b.length; _i++) {
                    var transformer = _b[_i];

                    _assign3(transformed, transformer(validMutation, initialCalendar_1));
                  }

                  var eventDropArg = _assign3({}, transformed, {
                    el: ev.subjectEl,
                    delta: validMutation.datesDelta,
                    oldEvent: eventApi,
                    event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
                    initialCalendar_1, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null),
                    revert: function revert() {
                      initialCalendar_1.dispatch({
                        type: 'MERGE_EVENTS',
                        eventStore: relevantEvents_1
                      });
                    },
                    jsEvent: ev.origEvent,
                    view: initialView
                  });

                  initialCalendar_1.publiclyTrigger('eventDrop', [eventDropArg]); // dropped in different calendar
                } else if (receivingCalendar) {
                  initialCalendar_1.publiclyTrigger('eventLeave', [{
                    draggedEl: ev.subjectEl,
                    event: eventApi,
                    view: initialView
                  }]);
                  initialCalendar_1.dispatch({
                    type: 'REMOVE_EVENT_INSTANCES',
                    instances: _this.mutatedRelevantEvents.instances
                  });
                  receivingCalendar.dispatch({
                    type: 'MERGE_EVENTS',
                    eventStore: _this.mutatedRelevantEvents
                  });

                  if (ev.isTouch) {
                    receivingCalendar.dispatch({
                      type: 'SELECT_EVENT',
                      eventInstanceId: eventInstance.instanceId
                    });
                  }

                  var dropArg = _assign3({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), {
                    draggedEl: ev.subjectEl,
                    jsEvent: ev.origEvent,
                    view: finalHit.component // should this be finalHit.component.view? See #4644

                  });

                  receivingCalendar.publiclyTrigger('drop', [dropArg]);
                  receivingCalendar.publiclyTrigger('eventReceive', [{
                    draggedEl: ev.subjectEl,
                    event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
                    receivingCalendar, mutatedRelevantEvents.defs[eventDef.defId], mutatedRelevantEvents.instances[eventInstance.instanceId]),
                    view: finalHit.component // should this be finalHit.component.view? See #4644

                  }]);
                }
              } else {
                initialCalendar_1.publiclyTrigger('_noEventDrop');
              }
            }

            _this.cleanup();
          };

          var component = _this.component;
          var options = component.context.options;
          var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
          dragging.pointer.selector = EventDragging.SELECTOR;
          dragging.touchScrollAllowed = false;
          dragging.autoScroller.isEnabled = options.dragScroll;
          var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsStore"]);
          hitDragging.useSubjectCenter = settings.useEventCenter;
          hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
          hitDragging.emitter.on('dragstart', _this.handleDragStart);
          hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
          hitDragging.emitter.on('pointerup', _this.handlePointerUp);
          hitDragging.emitter.on('dragend', _this.handleDragEnd);
          return _this;
        }

        EventDragging.prototype.destroy = function () {
          this.dragging.destroy();
        }; // render a drag state on the next receivingCalendar


        EventDragging.prototype.displayDrag = function (nextCalendar, state) {
          var initialCalendar = this.component.context.calendar;
          var prevCalendar = this.receivingCalendar; // does the previous calendar need to be cleared?

          if (prevCalendar && prevCalendar !== nextCalendar) {
            // does the initial calendar need to be cleared?
            // if so, don't clear all the way. we still need to to hide the affectedEvents
            if (prevCalendar === initialCalendar) {
              prevCalendar.dispatch({
                type: 'SET_EVENT_DRAG',
                state: {
                  affectedEvents: state.affectedEvents,
                  mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
                  isEvent: true,
                  origSeg: state.origSeg
                }
              }); // completely clear the old calendar if it wasn't the initial
            } else {
              prevCalendar.dispatch({
                type: 'UNSET_EVENT_DRAG'
              });
            }
          }

          if (nextCalendar) {
            nextCalendar.dispatch({
              type: 'SET_EVENT_DRAG',
              state: state
            });
          }
        };

        EventDragging.prototype.clearDrag = function () {
          var initialCalendar = this.component.context.calendar;
          var receivingCalendar = this.receivingCalendar;

          if (receivingCalendar) {
            receivingCalendar.dispatch({
              type: 'UNSET_EVENT_DRAG'
            });
          } // the initial calendar might have an dummy drag state from displayDrag


          if (initialCalendar !== receivingCalendar) {
            initialCalendar.dispatch({
              type: 'UNSET_EVENT_DRAG'
            });
          }
        };

        EventDragging.prototype.cleanup = function () {
          this.subjectSeg = null;
          this.isDragging = false;
          this.eventRange = null;
          this.relevantEvents = null;
          this.receivingCalendar = null;
          this.validMutation = null;
          this.mutatedRelevantEvents = null;
        };

        EventDragging.SELECTOR = '.fc-draggable, .fc-resizable'; // TODO: test this in IE11

        return EventDragging;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

      function computeEventMutation(hit0, hit1, massagers) {
        var dateSpan0 = hit0.dateSpan;
        var dateSpan1 = hit1.dateSpan;
        var date0 = dateSpan0.range.start;
        var date1 = dateSpan1.range.start;
        var standardProps = {};

        if (dateSpan0.allDay !== dateSpan1.allDay) {
          standardProps.allDay = dateSpan1.allDay;
          standardProps.hasEnd = hit1.component.context.options.allDayMaintainDuration;

          if (dateSpan1.allDay) {
            // means date1 is already start-of-day,
            // but date0 needs to be converted
            date0 = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(date0);
          }
        }

        var delta = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffDates"])(date0, date1, hit0.component.context.dateEnv, hit0.component === hit1.component ? hit0.component.largeUnit : null);

        if (delta.milliseconds) {
          // has hours/minutes/seconds
          standardProps.allDay = false;
        }

        var mutation = {
          datesDelta: delta,
          standardProps: standardProps
        };

        for (var _i = 0, massagers_1 = massagers; _i < massagers_1.length; _i++) {
          var massager = massagers_1[_i];
          massager(mutation, hit0, hit1);
        }

        return mutation;
      }

      function getComponentTouchDelay$1(component) {
        var options = component.context.options;
        var delay = options.eventLongPressDelay;

        if (delay == null) {
          delay = options.longPressDelay;
        }

        return delay;
      }

      var EventDragging$1 =
      /** @class */
      function (_super) {
        __extends(EventDragging, _super);

        function EventDragging(settings) {
          var _this = _super.call(this, settings) || this; // internal state


          _this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?

          _this.eventRange = null;
          _this.relevantEvents = null;
          _this.validMutation = null;
          _this.mutatedRelevantEvents = null;

          _this.handlePointerDown = function (ev) {
            var component = _this.component;

            var seg = _this.querySeg(ev);

            var eventRange = _this.eventRange = seg.eventRange;
            _this.dragging.minDistance = component.context.options.eventDragMinDistance; // if touch, need to be working with a selected event

            _this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target) || ev.isTouch && _this.component.props.eventSelection !== eventRange.instance.instanceId);
          };

          _this.handleDragStart = function (ev) {
            var _a = _this.component.context,
                calendar = _a.calendar,
                view = _a.view;
            var eventRange = _this.eventRange;
            _this.relevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getRelevantEvents"])(calendar.state.eventStore, _this.eventRange.instance.instanceId);
            _this.draggingSeg = _this.querySeg(ev);
            calendar.unselect();
            calendar.publiclyTrigger('eventResizeStart', [{
              el: _this.draggingSeg.el,
              event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, eventRange.def, eventRange.instance),
              jsEvent: ev.origEvent,
              view: view
            }]);
          };

          _this.handleHitUpdate = function (hit, isFinal, ev) {
            var calendar = _this.component.context.calendar;
            var relevantEvents = _this.relevantEvents;
            var initialHit = _this.hitDragging.initialHit;
            var eventInstance = _this.eventRange.instance;
            var mutation = null;
            var mutatedRelevantEvents = null;
            var isInvalid = false;
            var interaction = {
              affectedEvents: relevantEvents,
              mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
              isEvent: true,
              origSeg: _this.draggingSeg
            };

            if (hit) {
              mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-start-resizer'), eventInstance.range, calendar.pluginSystem.hooks.eventResizeJoinTransforms);
            }

            if (mutation) {
              mutatedRelevantEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyMutationToEventStore"])(relevantEvents, calendar.eventUiBases, mutation, calendar);
              interaction.mutatedEvents = mutatedRelevantEvents;

              if (!_this.component.isInteractionValid(interaction)) {
                isInvalid = true;
                mutation = null;
                mutatedRelevantEvents = null;
                interaction.mutatedEvents = null;
              }
            }

            if (mutatedRelevantEvents) {
              calendar.dispatch({
                type: 'SET_EVENT_RESIZE',
                state: interaction
              });
            } else {
              calendar.dispatch({
                type: 'UNSET_EVENT_RESIZE'
              });
            }

            if (!isInvalid) {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
            } else {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
            }

            if (!isFinal) {
              if (mutation && isHitsEqual(initialHit, hit)) {
                mutation = null;
              }

              _this.validMutation = mutation;
              _this.mutatedRelevantEvents = mutatedRelevantEvents;
            }
          };

          _this.handleDragEnd = function (ev) {
            var _a = _this.component.context,
                calendar = _a.calendar,
                view = _a.view;
            var eventDef = _this.eventRange.def;
            var eventInstance = _this.eventRange.instance;
            var eventApi = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](calendar, eventDef, eventInstance);
            var relevantEvents = _this.relevantEvents;
            var mutatedRelevantEvents = _this.mutatedRelevantEvents;
            calendar.publiclyTrigger('eventResizeStop', [{
              el: _this.draggingSeg.el,
              event: eventApi,
              jsEvent: ev.origEvent,
              view: view
            }]);

            if (_this.validMutation) {
              calendar.dispatch({
                type: 'MERGE_EVENTS',
                eventStore: mutatedRelevantEvents
              });
              calendar.publiclyTrigger('eventResize', [{
                el: _this.draggingSeg.el,
                startDelta: _this.validMutation.startDelta || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(0),
                endDelta: _this.validMutation.endDelta || Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(0),
                prevEvent: eventApi,
                event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"]( // the data AFTER the mutation
                calendar, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null),
                revert: function revert() {
                  calendar.dispatch({
                    type: 'MERGE_EVENTS',
                    eventStore: relevantEvents
                  });
                },
                jsEvent: ev.origEvent,
                view: view
              }]);
            } else {
              calendar.publiclyTrigger('_noEventResize');
            } // reset all internal state


            _this.draggingSeg = null;
            _this.relevantEvents = null;
            _this.validMutation = null; // okay to keep eventInstance around. useful to set it in handlePointerDown
          };

          var component = settings.component;
          var dragging = _this.dragging = new FeaturefulElementDragging(component.el);
          dragging.pointer.selector = '.fc-resizer';
          dragging.touchScrollAllowed = false;
          dragging.autoScroller.isEnabled = component.context.options.dragScroll;
          var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsToStore"])(settings));
          hitDragging.emitter.on('pointerdown', _this.handlePointerDown);
          hitDragging.emitter.on('dragstart', _this.handleDragStart);
          hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);
          hitDragging.emitter.on('dragend', _this.handleDragEnd);
          return _this;
        }

        EventDragging.prototype.destroy = function () {
          this.dragging.destroy();
        };

        EventDragging.prototype.querySeg = function (ev) {
          return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getElSeg"])(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(ev.subjectEl, this.component.fgSegSelector));
        };

        return EventDragging;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Interaction"]);

      function computeMutation(hit0, hit1, isFromStart, instanceRange, transforms) {
        var dateEnv = hit0.component.context.dateEnv;
        var date0 = hit0.dateSpan.range.start;
        var date1 = hit1.dateSpan.range.start;
        var delta = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffDates"])(date0, date1, dateEnv, hit0.component.largeUnit);
        var props = {};

        for (var _i = 0, transforms_1 = transforms; _i < transforms_1.length; _i++) {
          var transform = transforms_1[_i];
          var res = transform(hit0, hit1);

          if (res === false) {
            return null;
          } else if (res) {
            _assign3(props, res);
          }
        }

        if (isFromStart) {
          if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {
            props.startDelta = delta;
            return props;
          }
        } else {
          if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {
            props.endDelta = delta;
            return props;
          }
        }

        return null;
      }

      var UnselectAuto =
      /** @class */
      function () {
        function UnselectAuto(calendar) {
          var _this = this;

          this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system

          this.onSelect = function (selectInfo) {
            if (selectInfo.jsEvent) {
              _this.isRecentPointerDateSelect = true;
            }
          };

          this.onDocumentPointerUp = function (pev) {
            var _a = _this,
                calendar = _a.calendar,
                documentPointer = _a.documentPointer;
            var state = calendar.state; // touch-scrolling should never unfocus any type of selection

            if (!documentPointer.wasTouchScroll) {
              if (state.dateSelection && // an existing date selection?
              !_this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?
              ) {
                  var unselectAuto = calendar.viewOpt('unselectAuto');
                  var unselectCancel = calendar.viewOpt('unselectCancel');

                  if (unselectAuto && (!unselectAuto || !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(documentPointer.downEl, unselectCancel))) {
                    calendar.unselect(pev);
                  }
                }

              if (state.eventSelection && // an existing event selected?
              !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementClosest"])(documentPointer.downEl, EventDragging.SELECTOR) // interaction DIDN'T start on an event
              ) {
                  calendar.dispatch({
                    type: 'UNSELECT_EVENT'
                  });
                }
            }

            _this.isRecentPointerDateSelect = false;
          };

          this.calendar = calendar;
          var documentPointer = this.documentPointer = new PointerDragging(document);
          documentPointer.shouldIgnoreMove = true;
          documentPointer.shouldWatchScroll = false;
          documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);
          /*
          TODO: better way to know about whether there was a selection with the pointer
          */

          calendar.on('select', this.onSelect);
        }

        UnselectAuto.prototype.destroy = function () {
          this.calendar.off('select', this.onSelect);
          this.documentPointer.destroy();
        };

        return UnselectAuto;
      }();
      /*
      Given an already instantiated draggable object for one-or-more elements,
      Interprets any dragging as an attempt to drag an events that lives outside
      of a calendar onto a calendar.
      */


      var ExternalElementDragging =
      /** @class */
      function () {
        function ExternalElementDragging(dragging, suppliedDragMeta) {
          var _this = this;

          this.receivingCalendar = null;
          this.droppableEvent = null; // will exist for all drags, even if create:false

          this.suppliedDragMeta = null;
          this.dragMeta = null;

          this.handleDragStart = function (ev) {
            _this.dragMeta = _this.buildDragMeta(ev.subjectEl);
          };

          this.handleHitUpdate = function (hit, isFinal, ev) {
            var dragging = _this.hitDragging.dragging;
            var receivingCalendar = null;
            var droppableEvent = null;
            var isInvalid = false;
            var interaction = {
              affectedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
              mutatedEvents: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])(),
              isEvent: _this.dragMeta.create,
              origSeg: null
            };

            if (hit) {
              receivingCalendar = hit.component.context.calendar;

              if (_this.canDropElOnCalendar(ev.subjectEl, receivingCalendar)) {
                droppableEvent = computeEventForDateSpan(hit.dateSpan, _this.dragMeta, receivingCalendar);
                interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["eventTupleToStore"])(droppableEvent);
                isInvalid = !Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isInteractionValid"])(interaction, receivingCalendar);

                if (isInvalid) {
                  interaction.mutatedEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEmptyEventStore"])();
                  droppableEvent = null;
                }
              }
            }

            _this.displayDrag(receivingCalendar, interaction); // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)
            // TODO: wish we could somehow wait for dispatch to guarantee render


            dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector('.fc-mirror'));

            if (!isInvalid) {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["enableCursor"])();
            } else {
              Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["disableCursor"])();
            }

            if (!isFinal) {
              dragging.setMirrorNeedsRevert(!droppableEvent);
              _this.receivingCalendar = receivingCalendar;
              _this.droppableEvent = droppableEvent;
            }
          };

          this.handleDragEnd = function (pev) {
            var _a = _this,
                receivingCalendar = _a.receivingCalendar,
                droppableEvent = _a.droppableEvent;

            _this.clearDrag();

            if (receivingCalendar && droppableEvent) {
              var finalHit = _this.hitDragging.finalHit;
              var finalView = finalHit.component.context.view;
              var dragMeta = _this.dragMeta;

              var arg = _assign3({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), {
                draggedEl: pev.subjectEl,
                jsEvent: pev.origEvent,
                view: finalView
              });

              receivingCalendar.publiclyTrigger('drop', [arg]);

              if (dragMeta.create) {
                receivingCalendar.dispatch({
                  type: 'MERGE_EVENTS',
                  eventStore: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["eventTupleToStore"])(droppableEvent)
                });

                if (pev.isTouch) {
                  receivingCalendar.dispatch({
                    type: 'SELECT_EVENT',
                    eventInstanceId: droppableEvent.instance.instanceId
                  });
                } // signal that an external event landed


                receivingCalendar.publiclyTrigger('eventReceive', [{
                  draggedEl: pev.subjectEl,
                  event: new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["EventApi"](receivingCalendar, droppableEvent.def, droppableEvent.instance),
                  view: finalView
                }]);
              }
            }

            _this.receivingCalendar = null;
            _this.droppableEvent = null;
          };

          var hitDragging = this.hitDragging = new HitDragging(dragging, _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["interactionSettingsStore"]);
          hitDragging.requireInitial = false; // will start outside of a component

          hitDragging.emitter.on('dragstart', this.handleDragStart);
          hitDragging.emitter.on('hitupdate', this.handleHitUpdate);
          hitDragging.emitter.on('dragend', this.handleDragEnd);
          this.suppliedDragMeta = suppliedDragMeta;
        }

        ExternalElementDragging.prototype.buildDragMeta = function (subjectEl) {
          if (typeof this.suppliedDragMeta === 'object') {
            return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(this.suppliedDragMeta);
          } else if (typeof this.suppliedDragMeta === 'function') {
            return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(this.suppliedDragMeta(subjectEl));
          } else {
            return getDragMetaFromEl(subjectEl);
          }
        };

        ExternalElementDragging.prototype.displayDrag = function (nextCalendar, state) {
          var prevCalendar = this.receivingCalendar;

          if (prevCalendar && prevCalendar !== nextCalendar) {
            prevCalendar.dispatch({
              type: 'UNSET_EVENT_DRAG'
            });
          }

          if (nextCalendar) {
            nextCalendar.dispatch({
              type: 'SET_EVENT_DRAG',
              state: state
            });
          }
        };

        ExternalElementDragging.prototype.clearDrag = function () {
          if (this.receivingCalendar) {
            this.receivingCalendar.dispatch({
              type: 'UNSET_EVENT_DRAG'
            });
          }
        };

        ExternalElementDragging.prototype.canDropElOnCalendar = function (el, receivingCalendar) {
          var dropAccept = receivingCalendar.opt('dropAccept');

          if (typeof dropAccept === 'function') {
            return dropAccept(el);
          } else if (typeof dropAccept === 'string' && dropAccept) {
            return Boolean(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["elementMatches"])(el, dropAccept));
          }

          return true;
        };

        return ExternalElementDragging;
      }(); // Utils for computing event store from the DragMeta
      // ----------------------------------------------------------------------------------------------------


      function computeEventForDateSpan(dateSpan, dragMeta, calendar) {
        var defProps = _assign3({}, dragMeta.leftoverProps);

        for (var _i = 0, _a = calendar.pluginSystem.hooks.externalDefTransforms; _i < _a.length; _i++) {
          var transform = _a[_i];

          _assign3(defProps, transform(dateSpan, dragMeta));
        }

        var def = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseEventDef"])(defProps, dragMeta.sourceId, dateSpan.allDay, calendar.opt('forceEventDuration') || Boolean(dragMeta.duration), // hasEnd
        calendar);
        var start = dateSpan.range.start; // only rely on time info if drop zone is all-day,
        // otherwise, we already know the time

        if (dateSpan.allDay && dragMeta.startTime) {
          start = calendar.dateEnv.add(start, dragMeta.startTime);
        }

        var end = dragMeta.duration ? calendar.dateEnv.add(start, dragMeta.duration) : calendar.getDefaultEventEnd(dateSpan.allDay, start);
        var instance = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createEventInstance"])(def.defId, {
          start: start,
          end: end
        });
        return {
          def: def,
          instance: instance
        };
      } // Utils for extracting data from element
      // ----------------------------------------------------------------------------------------------------


      function getDragMetaFromEl(el) {
        var str = getEmbeddedElData(el, 'event');
        var obj = str ? JSON.parse(str) : {
          create: false
        }; // if no embedded data, assume no event creation

        return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["parseDragMeta"])(obj);
      }

      _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].dataAttrPrefix = '';

      function getEmbeddedElData(el, name) {
        var prefix = _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["config"].dataAttrPrefix;
        var prefixedName = (prefix ? prefix + '-' : '') + name;
        return el.getAttribute('data-' + prefixedName) || '';
      }
      /*
      Makes an element (that is *external* to any calendar) draggable.
      Can pass in data that determines how an event will be created when dropped onto a calendar.
      Leverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.
      */


      var ExternalDraggable =
      /** @class */
      function () {
        function ExternalDraggable(el, settings) {
          var _this = this;

          if (settings === void 0) {
            settings = {};
          }

          this.handlePointerDown = function (ev) {
            var dragging = _this.dragging;
            var _a = _this.settings,
                minDistance = _a.minDistance,
                longPressDelay = _a.longPressDelay;
            dragging.minDistance = minDistance != null ? minDistance : ev.isTouch ? 0 : _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["globalDefaults"].eventDragMinDistance;
            dragging.delay = ev.isTouch ? // TODO: eventually read eventLongPressDelay instead vvv
            longPressDelay != null ? longPressDelay : _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["globalDefaults"].longPressDelay : 0;
          };

          this.handleDragStart = function (ev) {
            if (ev.isTouch && _this.dragging.delay && ev.subjectEl.classList.contains('fc-event')) {
              _this.dragging.mirror.getMirrorEl().classList.add('fc-selected');
            }
          };

          this.settings = settings;
          var dragging = this.dragging = new FeaturefulElementDragging(el);
          dragging.touchScrollAllowed = false;

          if (settings.itemSelector != null) {
            dragging.pointer.selector = settings.itemSelector;
          }

          if (settings.appendTo != null) {
            dragging.mirror.parentNode = settings.appendTo; // TODO: write tests
          }

          dragging.emitter.on('pointerdown', this.handlePointerDown);
          dragging.emitter.on('dragstart', this.handleDragStart);
          new ExternalElementDragging(dragging, settings.eventData);
        }

        ExternalDraggable.prototype.destroy = function () {
          this.dragging.destroy();
        };

        return ExternalDraggable;
      }();
      /*
      Detects when a *THIRD-PARTY* drag-n-drop system interacts with elements.
      The third-party system is responsible for drawing the visuals effects of the drag.
      This class simply monitors for pointer movements and fires events.
      It also has the ability to hide the moving element (the "mirror") during the drag.
      */


      var InferredElementDragging =
      /** @class */
      function (_super) {
        __extends(InferredElementDragging, _super);

        function InferredElementDragging(containerEl) {
          var _this = _super.call(this, containerEl) || this;

          _this.shouldIgnoreMove = false;
          _this.mirrorSelector = '';
          _this.currentMirrorEl = null;

          _this.handlePointerDown = function (ev) {
            _this.emitter.trigger('pointerdown', ev);

            if (!_this.shouldIgnoreMove) {
              // fire dragstart right away. does not support delay or min-distance
              _this.emitter.trigger('dragstart', ev);
            }
          };

          _this.handlePointerMove = function (ev) {
            if (!_this.shouldIgnoreMove) {
              _this.emitter.trigger('dragmove', ev);
            }
          };

          _this.handlePointerUp = function (ev) {
            _this.emitter.trigger('pointerup', ev);

            if (!_this.shouldIgnoreMove) {
              // fire dragend right away. does not support a revert animation
              _this.emitter.trigger('dragend', ev);
            }
          };

          var pointer = _this.pointer = new PointerDragging(containerEl);
          pointer.emitter.on('pointerdown', _this.handlePointerDown);
          pointer.emitter.on('pointermove', _this.handlePointerMove);
          pointer.emitter.on('pointerup', _this.handlePointerUp);
          return _this;
        }

        InferredElementDragging.prototype.destroy = function () {
          this.pointer.destroy();
        };

        InferredElementDragging.prototype.setIgnoreMove = function (bool) {
          this.shouldIgnoreMove = bool;
        };

        InferredElementDragging.prototype.setMirrorIsVisible = function (bool) {
          if (bool) {
            // restore a previously hidden element.
            // use the reference in case the selector class has already been removed.
            if (this.currentMirrorEl) {
              this.currentMirrorEl.style.visibility = '';
              this.currentMirrorEl = null;
            }
          } else {
            var mirrorEl = this.mirrorSelector ? document.querySelector(this.mirrorSelector) : null;

            if (mirrorEl) {
              this.currentMirrorEl = mirrorEl;
              mirrorEl.style.visibility = 'hidden';
            }
          }
        };

        return InferredElementDragging;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ElementDragging"]);
      /*
      Bridges third-party drag-n-drop systems with FullCalendar.
      Must be instantiated and destroyed by caller.
      */


      var ThirdPartyDraggable =
      /** @class */
      function () {
        function ThirdPartyDraggable(containerOrSettings, settings) {
          var containerEl = document;

          if ( // wish we could just test instanceof EventTarget, but doesn't work in IE11
          containerOrSettings === document || containerOrSettings instanceof Element) {
            containerEl = containerOrSettings;
            settings = settings || {};
          } else {
            settings = containerOrSettings || {};
          }

          var dragging = this.dragging = new InferredElementDragging(containerEl);

          if (typeof settings.itemSelector === 'string') {
            dragging.pointer.selector = settings.itemSelector;
          } else if (containerEl === document) {
            dragging.pointer.selector = '[data-event]';
          }

          if (typeof settings.mirrorSelector === 'string') {
            dragging.mirrorSelector = settings.mirrorSelector;
          }

          new ExternalElementDragging(dragging, settings.eventData);
        }

        ThirdPartyDraggable.prototype.destroy = function () {
          this.dragging.destroy();
        };

        return ThirdPartyDraggable;
      }();

      var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
        componentInteractions: [DateClicking, DateSelecting, EventDragging, EventDragging$1],
        calendarInteractions: [UnselectAuto],
        elementDraggingImpl: FeaturefulElementDragging
      });
      /* harmony default export */

      __webpack_exports__["default"] = main;
      /***/
    },

    /***/
    "./node_modules/@fullcalendar/list/main.esm.js":
    /*!*****************************************************!*\
      !*** ./node_modules/@fullcalendar/list/main.esm.js ***!
      \*****************************************************/

    /*! exports provided: default, ListView */

    /***/
    function node_modulesFullcalendarListMainEsmJs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ListView", function () {
        return ListView;
      });
      /* harmony import */


      var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @fullcalendar/core */
      "./node_modules/@fullcalendar/core/main.esm.js");
      /*!
      FullCalendar List View Plugin v4.4.2
      Docs & License: https://fullcalendar.io/
      (c) 2019 Adam Shaw
      */

      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation.
      
      Permission to use, copy, modify, and/or distribute this software for any
      purpose with or without fee is hereby granted.
      
      THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
      REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
      INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
      LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
      OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.
      ***************************************************************************** */

      /* global Reflect, Promise */


      var _extendStatics4 = function extendStatics(d, b) {
        _extendStatics4 = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return _extendStatics4(d, b);
      };

      function __extends(d, b) {
        _extendStatics4(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }

      var ListEventRenderer =
      /** @class */
      function (_super) {
        __extends(ListEventRenderer, _super);

        function ListEventRenderer(listView) {
          var _this = _super.call(this) || this;

          _this.listView = listView;
          return _this;
        }

        ListEventRenderer.prototype.attachSegs = function (segs) {
          if (!segs.length) {
            this.listView.renderEmptyMessage();
          } else {
            this.listView.renderSegList(segs);
          }
        };

        ListEventRenderer.prototype.detachSegs = function () {}; // generates the HTML for a single event row


        ListEventRenderer.prototype.renderSegHtml = function (seg) {
          var _a = this.context,
              theme = _a.theme,
              options = _a.options;
          var eventRange = seg.eventRange;
          var eventDef = eventRange.def;
          var eventInstance = eventRange.instance;
          var eventUi = eventRange.ui;
          var url = eventDef.url;
          var classes = ['fc-list-item'].concat(eventUi.classNames);
          var bgColor = eventUi.backgroundColor;
          var timeHtml;

          if (eventDef.allDay) {
            timeHtml = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getAllDayHtml"])(options);
          } else if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isMultiDayRange"])(eventRange.range)) {
            if (seg.isStart) {
              timeHtml = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(this._getTimeText(eventInstance.range.start, seg.end, false // allDay
              ));
            } else if (seg.isEnd) {
              timeHtml = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(this._getTimeText(seg.start, eventInstance.range.end, false // allDay
              ));
            } else {
              // inner segment that lasts the whole day
              timeHtml = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getAllDayHtml"])(options);
            }
          } else {
            // Display the normal time text for the *event's* times
            timeHtml = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(this.getTimeText(eventRange));
          }

          if (url) {
            classes.push('fc-has-url');
          }

          return '<tr class="' + classes.join(' ') + '">' + (this.displayEventTime ? '<td class="fc-list-item-time ' + theme.getClass('widgetContent') + '">' + (timeHtml || '') + '</td>' : '') + '<td class="fc-list-item-marker ' + theme.getClass('widgetContent') + '">' + '<span class="fc-event-dot"' + (bgColor ? ' style="background-color:' + bgColor + '"' : '') + '></span>' + '</td>' + '<td class="fc-list-item-title ' + theme.getClass('widgetContent') + '">' + '<a' + (url ? ' href="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(url) + '"' : '') + '>' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.title || '') + '</a>' + '</td>' + '</tr>';
        }; // like "4:00am"


        ListEventRenderer.prototype.computeEventTimeFormat = function () {
          return {
            hour: 'numeric',
            minute: '2-digit',
            meridiem: 'short'
          };
        };

        return ListEventRenderer;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FgEventRenderer"]);
      /*
      Responsible for the scroller, and forwarding event-related actions into the "grid".
      */


      var ListView =
      /** @class */
      function (_super) {
        __extends(ListView, _super);

        function ListView(viewSpec, parentEl) {
          var _this = _super.call(this, viewSpec, parentEl) || this;

          _this.computeDateVars = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(computeDateVars);
          _this.eventStoreToSegs = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(_this._eventStoreToSegs);
          _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
          var eventRenderer = _this.eventRenderer = new ListEventRenderer(_this);
          _this.renderContent = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [_this.renderSkeleton]);
          return _this;
        }

        ListView.prototype.firstContext = function (context) {
          context.calendar.registerInteractiveComponent(this, {
            el: this.el // TODO: make aware that it doesn't do Hits

          });
        };

        ListView.prototype.render = function (props, context) {
          _super.prototype.render.call(this, props, context);

          var _a = this.computeDateVars(props.dateProfile),
              dayDates = _a.dayDates,
              dayRanges = _a.dayRanges;

          this.dayDates = dayDates;
          this.renderSkeleton(context);
          this.renderContent(context, this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges));
        };

        ListView.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.renderSkeleton.unrender();
          this.renderContent.unrender();
          this.context.calendar.unregisterInteractiveComponent(this);
        };

        ListView.prototype._renderSkeleton = function (context) {
          var theme = context.theme;
          this.el.classList.add('fc-list-view');
          var listViewClassNames = (theme.getClass('listView') || '').split(' '); // wish we didn't have to do this

          for (var _i = 0, listViewClassNames_1 = listViewClassNames; _i < listViewClassNames_1.length; _i++) {
            var listViewClassName = listViewClassNames_1[_i];

            if (listViewClassName) {
              // in case input was empty string
              this.el.classList.add(listViewClassName);
            }
          }

          this.scroller = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollComponent"]('hidden', // overflow x
          'auto' // overflow y
          );
          this.el.appendChild(this.scroller.el);
          this.contentEl = this.scroller.el; // shortcut
        };

        ListView.prototype._unrenderSkeleton = function () {
          // TODO: remove classNames
          this.scroller.destroy(); // will remove the Grid too
        };

        ListView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
          _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto);

          this.eventRenderer.computeSizes(isResize);
          this.eventRenderer.assignSizes(isResize);
          this.scroller.clear(); // sets height to 'auto' and clears overflow

          if (!isAuto) {
            this.scroller.setHeight(this.computeScrollerHeight(viewHeight));
          }
        };

        ListView.prototype.computeScrollerHeight = function (viewHeight) {
          return viewHeight - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["subtractInnerElHeight"])(this.el, this.scroller.el); // everything that's NOT the scroller
        };

        ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {
          return this.eventRangesToSegs(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["sliceEventStore"])(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.nextDayThreshold).fg, dayRanges);
        };

        ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {
          var segs = [];

          for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {
            var eventRange = eventRanges_1[_i];
            segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));
          }

          return segs;
        };

        ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {
          var _a = this.context,
              dateEnv = _a.dateEnv,
              nextDayThreshold = _a.nextDayThreshold;
          var range = eventRange.range;
          var allDay = eventRange.def.allDay;
          var dayIndex;
          var segRange;
          var seg;
          var segs = [];

          for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex++) {
            segRange = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRanges"])(range, dayRanges[dayIndex]);

            if (segRange) {
              seg = {
                component: this,
                eventRange: eventRange,
                start: segRange.start,
                end: segRange.end,
                isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),
                isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),
                dayIndex: dayIndex
              };
              segs.push(seg); // detect when range won't go fully into the next day,
              // and mutate the latest seg to the be the end.

              if (!seg.isEnd && !allDay && dayIndex + 1 < dayRanges.length && range.end < dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {
                seg.end = range.end;
                seg.isEnd = true;
                break;
              }
            }
          }

          return segs;
        };

        ListView.prototype.renderEmptyMessage = function () {
          this.contentEl.innerHTML = '<div class="fc-list-empty-wrap2">' + // TODO: try less wraps
          '<div class="fc-list-empty-wrap1">' + '<div class="fc-list-empty">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(this.context.options.noEventsMessage) + '</div>' + '</div>' + '</div>';
        }; // called by ListEventRenderer


        ListView.prototype.renderSegList = function (allSegs) {
          var theme = this.context.theme;
          var segsByDay = this.groupSegsByDay(allSegs); // sparse array

          var dayIndex;
          var daySegs;
          var i;
          var tableEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<table class="fc-list-table ' + theme.getClass('tableList') + '"><tbody></tbody></table>');
          var tbodyEl = tableEl.querySelector('tbody');

          for (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {
            daySegs = segsByDay[dayIndex];

            if (daySegs) {
              // sparse array, so might be undefined
              // append a day header
              tbodyEl.appendChild(this.buildDayHeaderRow(this.dayDates[dayIndex]));
              daySegs = this.eventRenderer.sortEventSegs(daySegs);

              for (i = 0; i < daySegs.length; i++) {
                tbodyEl.appendChild(daySegs[i].el); // append event row
              }
            }
          }

          this.contentEl.innerHTML = '';
          this.contentEl.appendChild(tableEl);
        }; // Returns a sparse array of arrays, segs grouped by their dayIndex


        ListView.prototype.groupSegsByDay = function (segs) {
          var segsByDay = []; // sparse array

          var i;
          var seg;

          for (i = 0; i < segs.length; i++) {
            seg = segs[i];
            (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);
          }

          return segsByDay;
        }; // generates the HTML for the day headers that live amongst the event rows


        ListView.prototype.buildDayHeaderRow = function (dayDate) {
          var _a = this.context,
              theme = _a.theme,
              dateEnv = _a.dateEnv,
              options = _a.options;
          var mainFormat = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(options.listDayFormat); // TODO: cache

          var altFormat = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(options.listDayAltFormat); // TODO: cache

          return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('tr', {
            className: 'fc-list-heading',
            'data-date': dateEnv.formatIso(dayDate, {
              omitTime: true
            })
          }, '<td class="' + (theme.getClass('tableListHeading') || theme.getClass('widgetHeader')) + '" colspan="3">' + (mainFormat ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])(options, dateEnv, dayDate, {
            'class': 'fc-list-heading-main'
          }, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(dateEnv.format(dayDate, mainFormat)) // inner HTML
          ) : '') + (altFormat ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])(options, dateEnv, dayDate, {
            'class': 'fc-list-heading-alt'
          }, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(dateEnv.format(dayDate, altFormat)) // inner HTML
          ) : '') + '</td>');
        };

        return ListView;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

      ListView.prototype.fgSegSelector = '.fc-list-item'; // which elements accept event actions

      function computeDateVars(dateProfile) {
        var dayStart = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(dateProfile.renderRange.start);
        var viewEnd = dateProfile.renderRange.end;
        var dayDates = [];
        var dayRanges = [];

        while (dayStart < viewEnd) {
          dayDates.push(dayStart);
          dayRanges.push({
            start: dayStart,
            end: Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(dayStart, 1)
          });
          dayStart = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDays"])(dayStart, 1);
        }

        return {
          dayDates: dayDates,
          dayRanges: dayRanges
        };
      }

      var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
        views: {
          list: {
            "class": ListView,
            buttonTextKey: 'list',
            listDayFormat: {
              month: 'long',
              day: 'numeric',
              year: 'numeric'
            } // like "January 1, 2016"

          },
          listDay: {
            type: 'list',
            duration: {
              days: 1
            },
            listDayFormat: {
              weekday: 'long'
            } // day-of-week is all we need. full date is probably in header

          },
          listWeek: {
            type: 'list',
            duration: {
              weeks: 1
            },
            listDayFormat: {
              weekday: 'long'
            },
            listDayAltFormat: {
              month: 'long',
              day: 'numeric',
              year: 'numeric'
            }
          },
          listMonth: {
            type: 'list',
            duration: {
              month: 1
            },
            listDayAltFormat: {
              weekday: 'long'
            } // day-of-week is nice-to-have

          },
          listYear: {
            type: 'list',
            duration: {
              year: 1
            },
            listDayAltFormat: {
              weekday: 'long'
            } // day-of-week is nice-to-have

          }
        }
      });
      /* harmony default export */

      __webpack_exports__["default"] = main;
      /***/
    },

    /***/
    "./node_modules/@fullcalendar/timegrid/main.esm.js":
    /*!*********************************************************!*\
      !*** ./node_modules/@fullcalendar/timegrid/main.esm.js ***!
      \*********************************************************/

    /*! exports provided: default, AbstractTimeGridView, TimeGrid, TimeGridSlicer, TimeGridView, buildDayRanges, buildDayTable */

    /***/
    function node_modulesFullcalendarTimegridMainEsmJs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AbstractTimeGridView", function () {
        return AbstractTimeGridView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeGrid", function () {
        return TimeGrid;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeGridSlicer", function () {
        return TimeGridSlicer;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeGridView", function () {
        return TimeGridView;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "buildDayRanges", function () {
        return buildDayRanges;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "buildDayTable", function () {
        return buildDayTable;
      });
      /* harmony import */


      var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @fullcalendar/core */
      "./node_modules/@fullcalendar/core/main.esm.js");
      /* harmony import */


      var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @fullcalendar/daygrid */
      "./node_modules/@fullcalendar/daygrid/main.esm.js");
      /*!
      FullCalendar Time Grid Plugin v4.4.2
      Docs & License: https://fullcalendar.io/
      (c) 2019 Adam Shaw
      */

      /*! *****************************************************************************
      Copyright (c) Microsoft Corporation.
      
      Permission to use, copy, modify, and/or distribute this software for any
      purpose with or without fee is hereby granted.
      
      THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
      REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
      AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
      INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
      LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
      OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
      PERFORMANCE OF THIS SOFTWARE.
      ***************************************************************************** */

      /* global Reflect, Promise */


      var _extendStatics5 = function extendStatics(d, b) {
        _extendStatics5 = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return _extendStatics5(d, b);
      };

      function __extends(d, b) {
        _extendStatics5(d, b);

        function __() {
          this.constructor = d;
        }

        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      }

      var _assign4 = function __assign() {
        _assign4 = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }

          return t;
        };

        return _assign4.apply(this, arguments);
      };
      /*
      Only handles foreground segs.
      Does not own rendering. Use for low-level util methods by TimeGrid.
      */


      var TimeGridEventRenderer =
      /** @class */
      function (_super) {
        __extends(TimeGridEventRenderer, _super);

        function TimeGridEventRenderer(timeGrid) {
          var _this = _super.call(this) || this;

          _this.timeGrid = timeGrid;
          return _this;
        }

        TimeGridEventRenderer.prototype.renderSegs = function (context, segs, mirrorInfo) {
          _super.prototype.renderSegs.call(this, context, segs, mirrorInfo); // TODO: dont do every time. memoize


          this.fullTimeFormat = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])({
            hour: 'numeric',
            minute: '2-digit',
            separator: this.context.options.defaultRangeSeparator
          });
        }; // Given an array of foreground segments, render a DOM element for each, computes position,
        // and attaches to the column inner-container elements.


        TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
          var segsByCol = this.timeGrid.groupSegsByCol(segs); // order the segs within each column
          // TODO: have groupSegsByCol do this?

          for (var col = 0; col < segsByCol.length; col++) {
            segsByCol[col] = this.sortEventSegs(segsByCol[col]);
          }

          this.segsByCol = segsByCol;
          this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);
        };

        TimeGridEventRenderer.prototype.detachSegs = function (segs) {
          segs.forEach(function (seg) {
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(seg.el);
          });
          this.segsByCol = null;
        };

        TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {
          var _a = this,
              timeGrid = _a.timeGrid,
              segsByCol = _a.segsByCol;

          var colCnt = timeGrid.colCnt;
          timeGrid.computeSegVerticals(allSegs); // horizontals relies on this

          if (segsByCol) {
            for (var col = 0; col < colCnt; col++) {
              this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array
            }
          }
        };

        TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {
          var _a = this,
              timeGrid = _a.timeGrid,
              segsByCol = _a.segsByCol;

          var colCnt = timeGrid.colCnt;
          timeGrid.assignSegVerticals(allSegs); // horizontals relies on this

          if (segsByCol) {
            for (var col = 0; col < colCnt; col++) {
              this.assignSegCss(segsByCol[col]);
            }
          }
        }; // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined


        TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {
          return {
            hour: 'numeric',
            minute: '2-digit',
            meridiem: false
          };
        }; // Computes a default `displayEventEnd` value if one is not expliclty defined


        TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {
          return true;
        }; // Renders the HTML for a single event segment's default rendering


        TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {
          var eventRange = seg.eventRange;
          var eventDef = eventRange.def;
          var eventUi = eventRange.ui;
          var allDay = eventDef.allDay;
          var isDraggable = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventDraggable"])(this.context, eventDef, eventUi);
          var isResizableFromStart = seg.isStart && Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventStartResizable"])(this.context, eventDef, eventUi);
          var isResizableFromEnd = seg.isEnd && Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["computeEventEndResizable"])(this.context, eventDef, eventUi);
          var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);
          var skinCss = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["cssToStr"])(this.getSkinCss(eventUi));
          var timeText;
          var fullTimeText; // more verbose time text. for the print stylesheet

          var startTimeText; // just the start time text

          classes.unshift('fc-time-grid-event'); // if the event appears to span more than one day...

          if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["isMultiDayRange"])(eventRange.range)) {
            // Don't display time text on segments that run entirely through a day.
            // That would appear as midnight-midnight and would look dumb.
            // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)
            if (seg.isStart || seg.isEnd) {
              var unzonedStart = seg.start;
              var unzonedEnd = seg.end;
              timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones

              fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);
              startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false
            }
          } else {
            // Display the normal time text for the *event's* times
            timeText = this.getTimeText(eventRange);
            fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);
            startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false
          }

          return '<a class="' + classes.join(' ') + '"' + (eventDef.url ? ' href="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.url) + '"' : '') + (skinCss ? ' style="' + skinCss + '"' : '') + '>' + '<div class="fc-content">' + (timeText ? '<div class="fc-time"' + ' data-start="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(startTimeText) + '"' + ' data-full="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(fullTimeText) + '"' + '>' + '<span>' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(timeText) + '</span>' + '</div>' : '') + (eventDef.title ? '<div class="fc-title">' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(eventDef.title) + '</div>' : '') + '</div>' + (
          /* TODO: write CSS for this
          (isResizableFromStart ?
            '<div class="fc-resizer fc-start-resizer"></div>' :
            ''
            ) +
          */
          isResizableFromEnd ? '<div class="fc-resizer fc-end-resizer"></div>' : '') + '</a>';
        }; // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.
        // Assumed the segs are already ordered.
        // NOTE: Also reorders the given array by date!


        TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {
          var levels;
          var level0;
          var i;
          levels = buildSlotSegLevels(segs);
          computeForwardSlotSegs(levels);

          if (level0 = levels[0]) {
            for (i = 0; i < level0.length; i++) {
              computeSlotSegPressures(level0[i]);
            }

            for (i = 0; i < level0.length; i++) {
              this.computeSegForwardBack(level0[i], 0, 0);
            }
          }
        }; // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range
        // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and
        // seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.
        //
        // The segment might be part of a "series", which means consecutive segments with the same pressure
        // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of
        // segments behind this one in the current series, and `seriesBackwardCoord` is the starting
        // coordinate of the first segment in the series.


        TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {
          var forwardSegs = seg.forwardSegs;
          var i;

          if (seg.forwardCoord === undefined) {
            // not already computed
            if (!forwardSegs.length) {
              // if there are no forward segments, this segment should butt up against the edge
              seg.forwardCoord = 1;
            } else {
              // sort highest pressure first
              this.sortForwardSegs(forwardSegs); // this segment's forwardCoord will be calculated from the backwardCoord of the
              // highest-pressure forward segment.

              this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);
              seg.forwardCoord = forwardSegs[0].backwardCoord;
            } // calculate the backwardCoord from the forwardCoord. consider the series


            seg.backwardCoord = seg.forwardCoord - (seg.forwardCoord - seriesBackwardCoord) / ( // available width for series
            seriesBackwardPressure + 1); // # of segments in the series
            // use this segment's coordinates to computed the coordinates of the less-pressurized
            // forward segments

            for (i = 0; i < forwardSegs.length; i++) {
              this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);
            }
          }
        };

        TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {
          var objs = forwardSegs.map(buildTimeGridSegCompareObj);
          var specs = [// put higher-pressure first
          {
            field: 'forwardPressure',
            order: -1
          }, // put segments that are closer to initial edge first (and favor ones with no coords yet)
          {
            field: 'backwardCoord',
            order: 1
          }].concat(this.context.eventOrderSpecs);
          objs.sort(function (obj0, obj1) {
            return Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compareByFieldSpecs"])(obj0, obj1, specs);
          });
          return objs.map(function (c) {
            return c._seg;
          });
        }; // Given foreground event segments that have already had their position coordinates computed,
        // assigns position-related CSS values to their elements.


        TimeGridEventRenderer.prototype.assignSegCss = function (segs) {
          for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {
            var seg = segs_1[_i];
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(seg.el, this.generateSegCss(seg));

            if (seg.level > 0) {
              seg.el.classList.add('fc-time-grid-event-inset');
            } // if the event is short that the title will be cut off,
            // attach a className that condenses the title into the time area.


            if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {
              seg.el.classList.add('fc-short'); // TODO: "condensed" is a better name
            }
          }
        }; // Generates an object with CSS properties/values that should be applied to an event segment element.
        // Contains important positioning-related properties that should be applied to any event element, customized or not.


        TimeGridEventRenderer.prototype.generateSegCss = function (seg) {
          var shouldOverlap = this.context.options.slotEventOverlap;
          var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point

          var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point

          var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first

          var isRtl = this.context.isRtl;
          var left; // amount of space from left edge, a fraction of the total width

          var right; // amount of space from right edge, a fraction of the total width

          if (shouldOverlap) {
            // double the width, but don't go beyond the maximum forward coordinate (1.0)
            forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);
          }

          if (isRtl) {
            left = 1 - forwardCoord;
            right = backwardCoord;
          } else {
            left = backwardCoord;
            right = 1 - forwardCoord;
          }

          props.zIndex = seg.level + 1; // convert from 0-base to 1-based

          props.left = left * 100 + '%';
          props.right = right * 100 + '%';

          if (shouldOverlap && seg.forwardPressure) {
            // add padding to the edge so that forward stacked events don't cover the resizer's icon
            props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width
          }

          return props;
        };

        return TimeGridEventRenderer;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FgEventRenderer"]); // Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is
      // left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.


      function buildSlotSegLevels(segs) {
        var levels = [];
        var i;
        var seg;
        var j;

        for (i = 0; i < segs.length; i++) {
          seg = segs[i]; // go through all the levels and stop on the first level where there are no collisions

          for (j = 0; j < levels.length; j++) {
            if (!computeSlotSegCollisions(seg, levels[j]).length) {
              break;
            }
          }

          seg.level = j;
          (levels[j] || (levels[j] = [])).push(seg);
        }

        return levels;
      } // For every segment, figure out the other segments that are in subsequent
      // levels that also occupy the same vertical space. Accumulate in seg.forwardSegs


      function computeForwardSlotSegs(levels) {
        var i;
        var level;
        var j;
        var seg;
        var k;

        for (i = 0; i < levels.length; i++) {
          level = levels[i];

          for (j = 0; j < level.length; j++) {
            seg = level[j];
            seg.forwardSegs = [];

            for (k = i + 1; k < levels.length; k++) {
              computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);
            }
          }
        }
      } // Figure out which path forward (via seg.forwardSegs) results in the longest path until
      // the furthest edge is reached. The number of segments in this path will be seg.forwardPressure


      function computeSlotSegPressures(seg) {
        var forwardSegs = seg.forwardSegs;
        var forwardPressure = 0;
        var i;
        var forwardSeg;

        if (seg.forwardPressure === undefined) {
          // not already computed
          for (i = 0; i < forwardSegs.length; i++) {
            forwardSeg = forwardSegs[i]; // figure out the child's maximum forward path

            computeSlotSegPressures(forwardSeg); // either use the existing maximum, or use the child's forward pressure
            // plus one (for the forwardSeg itself)

            forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);
          }

          seg.forwardPressure = forwardPressure;
        }
      } // Find all the segments in `otherSegs` that vertically collide with `seg`.
      // Append into an optionally-supplied `results` array and return.


      function computeSlotSegCollisions(seg, otherSegs, results) {
        if (results === void 0) {
          results = [];
        }

        for (var i = 0; i < otherSegs.length; i++) {
          if (isSlotSegCollision(seg, otherSegs[i])) {
            results.push(otherSegs[i]);
          }
        }

        return results;
      } // Do these segments occupy the same vertical space?


      function isSlotSegCollision(seg1, seg2) {
        return seg1.bottom > seg2.top && seg1.top < seg2.bottom;
      }

      function buildTimeGridSegCompareObj(seg) {
        var obj = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildSegCompareObj"])(seg);
        obj.forwardPressure = seg.forwardPressure;
        obj.backwardCoord = seg.backwardCoord;
        return obj;
      }

      var TimeGridMirrorRenderer =
      /** @class */
      function (_super) {
        __extends(TimeGridMirrorRenderer, _super);

        function TimeGridMirrorRenderer() {
          return _super !== null && _super.apply(this, arguments) || this;
        }

        TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {
          this.segsByCol = this.timeGrid.groupSegsByCol(segs);
          this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);
          this.sourceSeg = mirrorInfo.sourceSeg;
        };

        TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {
          var props = _super.prototype.generateSegCss.call(this, seg);

          var sourceSeg = this.sourceSeg;

          if (sourceSeg && sourceSeg.col === seg.col) {
            var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);

            props.left = sourceSegProps.left;
            props.right = sourceSegProps.right;
            props.marginLeft = sourceSegProps.marginLeft;
            props.marginRight = sourceSegProps.marginRight;
          }

          return props;
        };

        return TimeGridMirrorRenderer;
      }(TimeGridEventRenderer);

      var TimeGridFillRenderer =
      /** @class */
      function (_super) {
        __extends(TimeGridFillRenderer, _super);

        function TimeGridFillRenderer(timeGrid) {
          var _this = _super.call(this) || this;

          _this.timeGrid = timeGrid;
          return _this;
        }

        TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {
          var timeGrid = this.timeGrid;
          var containerEls; // TODO: more efficient lookup

          if (type === 'bgEvent') {
            containerEls = timeGrid.bgContainerEls;
          } else if (type === 'businessHours') {
            containerEls = timeGrid.businessContainerEls;
          } else if (type === 'highlight') {
            containerEls = timeGrid.highlightContainerEls;
          }

          timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);
          return segs.map(function (seg) {
            return seg.el;
          });
        };

        TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {
          this.timeGrid.computeSegVerticals(segs);
        };

        TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {
          this.timeGrid.assignSegVerticals(segs);
        };

        return TimeGridFillRenderer;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["FillRenderer"]);
      /* A component that renders one or more columns of vertical time slots
      ----------------------------------------------------------------------------------------------------------------------*/
      // potential nice values for the slot-duration and interval-duration
      // from largest to smallest


      var AGENDA_STOCK_SUB_DURATIONS = [{
        hours: 1
      }, {
        minutes: 30
      }, {
        minutes: 15
      }, {
        seconds: 30
      }, {
        seconds: 15
      }];

      var TimeGrid =
      /** @class */
      function (_super) {
        __extends(TimeGrid, _super);

        function TimeGrid(el, renderProps) {
          var _this = _super.call(this, el) || this;

          _this.isSlatSizesDirty = false;
          _this.isColSizesDirty = false;
          _this.processOptions = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(_this._processOptions);
          _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton);
          _this.renderSlats = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSlats, null, [_this.renderSkeleton]);
          _this.renderColumns = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderColumns, _this._unrenderColumns, [_this.renderSkeleton]);
          _this.renderProps = renderProps;
          var renderColumns = _this.renderColumns;
          var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);
          var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);
          _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);
          _this.renderBusinessHours = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);
          _this.renderDateSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);
          _this.renderFgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);
          _this.renderBgEvents = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);
          _this.renderEventSelection = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);
          _this.renderEventDrag = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);
          _this.renderEventResize = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);
          return _this;
        }
        /* Options
        ------------------------------------------------------------------------------------------------------------------*/
        // Parses various options into properties of this object
        // MUST have context already set


        TimeGrid.prototype._processOptions = function (options) {
          var slotDuration = options.slotDuration,
              snapDuration = options.snapDuration;
          var snapsPerSlot;
          var input;
          slotDuration = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(slotDuration);
          snapDuration = snapDuration ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(snapDuration) : slotDuration;
          snapsPerSlot = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(slotDuration, snapDuration);

          if (snapsPerSlot === null) {
            snapDuration = slotDuration;
            snapsPerSlot = 1; // TODO: say warning?
          }

          this.slotDuration = slotDuration;
          this.snapDuration = snapDuration;
          this.snapsPerSlot = snapsPerSlot; // might be an array value (for TimelineView).
          // if so, getting the most granular entry (the last one probably).

          input = options.slotLabelFormat;

          if (Array.isArray(input)) {
            input = input[input.length - 1];
          }

          this.labelFormat = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])(input || {
            hour: 'numeric',
            minute: '2-digit',
            omitZeroMinute: true,
            meridiem: 'short'
          });
          input = options.slotLabelInterval;
          this.labelInterval = input ? Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(input) : this.computeLabelInterval(slotDuration);
        }; // Computes an automatic value for slotLabelInterval


        TimeGrid.prototype.computeLabelInterval = function (slotDuration) {
          var i;
          var labelInterval;
          var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label

          for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {
            labelInterval = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(AGENDA_STOCK_SUB_DURATIONS[i]);
            slotsPerLabel = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(labelInterval, slotDuration);

            if (slotsPerLabel !== null && slotsPerLabel > 1) {
              return labelInterval;
            }
          }

          return slotDuration; // fall back
        };
        /* Rendering
        ------------------------------------------------------------------------------------------------------------------*/


        TimeGrid.prototype.render = function (props, context) {
          this.processOptions(context.options);
          var cells = props.cells;
          this.colCnt = cells.length;
          this.renderSkeleton(context.theme);
          this.renderSlats(props.dateProfile);
          this.renderColumns(props.cells, props.dateProfile);
          this.renderBusinessHours(context, props.businessHourSegs);
          this.renderDateSelection(props.dateSelectionSegs);
          this.renderFgEvents(context, props.fgEventSegs);
          this.renderBgEvents(context, props.bgEventSegs);
          this.renderEventSelection(props.eventSelection);
          this.renderEventDrag(props.eventDrag);
          this.renderEventResize(props.eventResize);
        };

        TimeGrid.prototype.destroy = function () {
          _super.prototype.destroy.call(this); // should unrender everything else too


          this.renderSlats.unrender();
          this.renderColumns.unrender();
          this.renderSkeleton.unrender();
        };

        TimeGrid.prototype.updateSize = function (isResize) {
          var _a = this,
              fillRenderer = _a.fillRenderer,
              eventRenderer = _a.eventRenderer,
              mirrorRenderer = _a.mirrorRenderer;

          if (isResize || this.isSlatSizesDirty) {
            this.buildSlatPositions();
            this.isSlatSizesDirty = false;
          }

          if (isResize || this.isColSizesDirty) {
            this.buildColPositions();
            this.isColSizesDirty = false;
          }

          fillRenderer.computeSizes(isResize);
          eventRenderer.computeSizes(isResize);
          mirrorRenderer.computeSizes(isResize);
          fillRenderer.assignSizes(isResize);
          eventRenderer.assignSizes(isResize);
          mirrorRenderer.assignSizes(isResize);
        };

        TimeGrid.prototype._renderSkeleton = function (theme) {
          var el = this.el;
          el.innerHTML = '<div class="fc-bg"></div>' + '<div class="fc-slats"></div>' + '<hr class="fc-divider ' + theme.getClass('widgetHeader') + '" style="display:none" />';
          this.rootBgContainerEl = el.querySelector('.fc-bg');
          this.slatContainerEl = el.querySelector('.fc-slats');
          this.bottomRuleEl = el.querySelector('.fc-divider');
        };

        TimeGrid.prototype._renderSlats = function (dateProfile) {
          var theme = this.context.theme;
          this.slatContainerEl.innerHTML = '<table class="' + theme.getClass('tableGrid') + '">' + this.renderSlatRowHtml(dateProfile) + '</table>';
          this.slatEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.slatContainerEl, 'tr');
          this.slatPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, this.slatEls, false, true // vertical
          );
          this.isSlatSizesDirty = true;
        }; // Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.


        TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {
          var _a = this.context,
              dateEnv = _a.dateEnv,
              theme = _a.theme,
              isRtl = _a.isRtl;
          var html = '';
          var dayStart = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(dateProfile.renderRange.start);
          var slotTime = dateProfile.minTime;
          var slotIterator = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(0);
          var slotDate; // will be on the view's first day, but we only care about its time

          var isLabeled;
          var axisHtml; // Calculate the time for each slot

          while (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(slotTime) < Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.maxTime)) {
            slotDate = dateEnv.add(dayStart, slotTime);
            isLabeled = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["wholeDivideDurations"])(slotIterator, this.labelInterval) !== null;
            axisHtml = '<td class="fc-axis fc-time ' + theme.getClass('widgetContent') + '">' + (isLabeled ? '<span>' + // for matchCellWidths
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(dateEnv.format(slotDate, this.labelFormat)) + '</span>' : '') + '</td>';
            html += '<tr data-time="' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["formatIsoTimeString"])(slotDate) + '"' + (isLabeled ? '' : ' class="fc-minor"') + '>' + (!isRtl ? axisHtml : '') + '<td class="' + theme.getClass('widgetContent') + '"></td>' + (isRtl ? axisHtml : '') + '</tr>';
            slotTime = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDurations"])(slotTime, this.slotDuration);
            slotIterator = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDurations"])(slotIterator, this.slotDuration);
          }

          return html;
        };

        TimeGrid.prototype._renderColumns = function (cells, dateProfile) {
          var _a = this.context,
              calendar = _a.calendar,
              view = _a.view,
              isRtl = _a.isRtl,
              theme = _a.theme,
              dateEnv = _a.dateEnv;
          var bgRow = new _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_1__["DayBgRow"](this.context);
          this.rootBgContainerEl.innerHTML = '<table class="' + theme.getClass('tableGrid') + '">' + bgRow.renderHtml({
            cells: cells,
            dateProfile: dateProfile,
            renderIntroHtml: this.renderProps.renderBgIntroHtml
          }) + '</table>';
          this.colEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, '.fc-day, .fc-disabled-day');

          for (var col = 0; col < this.colCnt; col++) {
            calendar.publiclyTrigger('dayRender', [{
              date: dateEnv.toDate(cells[col].date),
              el: this.colEls[col],
              view: view
            }]);
          }

          if (isRtl) {
            this.colEls.reverse();
          }

          this.colPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["PositionCache"](this.el, this.colEls, true, // horizontal
          false);
          this.renderContentSkeleton();
          this.isColSizesDirty = true;
        };

        TimeGrid.prototype._unrenderColumns = function () {
          this.unrenderContentSkeleton();
        };
        /* Content Skeleton
        ------------------------------------------------------------------------------------------------------------------*/
        // Renders the DOM that the view's content will live in


        TimeGrid.prototype.renderContentSkeleton = function () {
          var isRtl = this.context.isRtl;
          var parts = [];
          var skeletonEl;
          parts.push(this.renderProps.renderIntroHtml());

          for (var i = 0; i < this.colCnt; i++) {
            parts.push('<td>' + '<div class="fc-content-col">' + '<div class="fc-event-container fc-mirror-container"></div>' + '<div class="fc-event-container"></div>' + '<div class="fc-highlight-container"></div>' + '<div class="fc-bgevent-container"></div>' + '<div class="fc-business-container"></div>' + '</div>' + '</td>');
          }

          if (isRtl) {
            parts.reverse();
          }

          skeletonEl = this.contentSkeletonEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlToElement"])('<div class="fc-content-skeleton">' + '<table>' + '<tr>' + parts.join('') + '</tr>' + '</table>' + '</div>');
          this.colContainerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(skeletonEl, '.fc-content-col');
          this.mirrorContainerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(skeletonEl, '.fc-mirror-container');
          this.fgContainerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');
          this.bgContainerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(skeletonEl, '.fc-bgevent-container');
          this.highlightContainerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(skeletonEl, '.fc-highlight-container');
          this.businessContainerEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(skeletonEl, '.fc-business-container');

          if (isRtl) {
            this.colContainerEls.reverse();
            this.mirrorContainerEls.reverse();
            this.fgContainerEls.reverse();
            this.bgContainerEls.reverse();
            this.highlightContainerEls.reverse();
            this.businessContainerEls.reverse();
          }

          this.el.appendChild(skeletonEl);
        };

        TimeGrid.prototype.unrenderContentSkeleton = function () {
          Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"])(this.contentSkeletonEl);
        }; // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col


        TimeGrid.prototype.groupSegsByCol = function (segs) {
          var segsByCol = [];
          var i;

          for (i = 0; i < this.colCnt; i++) {
            segsByCol.push([]);
          }

          for (i = 0; i < segs.length; i++) {
            segsByCol[segs[i].col].push(segs[i]);
          }

          return segsByCol;
        }; // Given segments grouped by column, insert the segments' elements into a parallel array of container
        // elements, each living within a column.


        TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {
          var col;
          var segs;
          var i;

          for (col = 0; col < this.colCnt; col++) {
            // iterate each column grouping
            segs = segsByCol[col];

            for (i = 0; i < segs.length; i++) {
              containerEls[col].appendChild(segs[i].el);
            }
          }
        };
        /* Now Indicator
        ------------------------------------------------------------------------------------------------------------------*/


        TimeGrid.prototype.getNowIndicatorUnit = function () {
          return 'minute'; // will refresh on the minute
        };

        TimeGrid.prototype.renderNowIndicator = function (segs, date) {
          // HACK: if date columns not ready for some reason (scheduler)
          if (!this.colContainerEls) {
            return;
          }

          var top = this.computeDateTop(date);
          var nodes = [];
          var i; // render lines within the columns

          for (i = 0; i < segs.length; i++) {
            var lineEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: 'fc-now-indicator fc-now-indicator-line'
            });
            lineEl.style.top = top + 'px';
            this.colContainerEls[segs[i].col].appendChild(lineEl);
            nodes.push(lineEl);
          } // render an arrow over the axis


          if (segs.length > 0) {
            // is the current time in view?
            var arrowEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
              className: 'fc-now-indicator fc-now-indicator-arrow'
            });
            arrowEl.style.top = top + 'px';
            this.contentSkeletonEl.appendChild(arrowEl);
            nodes.push(arrowEl);
          }

          this.nowIndicatorEls = nodes;
        };

        TimeGrid.prototype.unrenderNowIndicator = function () {
          if (this.nowIndicatorEls) {
            this.nowIndicatorEls.forEach(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["removeElement"]);
            this.nowIndicatorEls = null;
          }
        };
        /* Coordinates
        ------------------------------------------------------------------------------------------------------------------*/


        TimeGrid.prototype.getTotalSlatHeight = function () {
          return this.slatContainerEl.getBoundingClientRect().height;
        }; // Computes the top coordinate, relative to the bounds of the grid, of the given date.
        // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.


        TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {
          if (!startOfDayDate) {
            startOfDayDate = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["startOfDay"])(when);
          }

          return this.computeTimeTop(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createDuration"])(when.valueOf() - startOfDayDate.valueOf()));
        }; // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).


        TimeGrid.prototype.computeTimeTop = function (duration) {
          var len = this.slatEls.length;
          var dateProfile = this.props.dateProfile;
          var slatCoverage = (duration.milliseconds - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(dateProfile.minTime)) / Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["asRoughMs"])(this.slotDuration); // floating-point value of # of slots covered

          var slatIndex;
          var slatRemainder; // compute a floating-point number for how many slats should be progressed through.
          // from 0 to number of slats (inclusive)
          // constrained because minTime/maxTime might be customized.

          slatCoverage = Math.max(0, slatCoverage);
          slatCoverage = Math.min(len, slatCoverage); // an integer index of the furthest whole slat
          // from 0 to number slats (*exclusive*, so len-1)

          slatIndex = Math.floor(slatCoverage);
          slatIndex = Math.min(slatIndex, len - 1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.
          // could be 1.0 if slatCoverage is covering *all* the slots

          slatRemainder = slatCoverage - slatIndex;
          return this.slatPositions.tops[slatIndex] + this.slatPositions.getHeight(slatIndex) * slatRemainder;
        }; // For each segment in an array, computes and assigns its top and bottom properties


        TimeGrid.prototype.computeSegVerticals = function (segs) {
          var options = this.context.options;
          var eventMinHeight = options.timeGridEventMinHeight;
          var i;
          var seg;
          var dayDate;

          for (i = 0; i < segs.length; i++) {
            seg = segs[i];
            dayDate = this.props.cells[seg.col].date;
            seg.top = this.computeDateTop(seg.start, dayDate);
            seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));
          }
        }; // Given segments that already have their top/bottom properties computed, applies those values to
        // the segments' elements.


        TimeGrid.prototype.assignSegVerticals = function (segs) {
          var i;
          var seg;

          for (i = 0; i < segs.length; i++) {
            seg = segs[i];
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["applyStyle"])(seg.el, this.generateSegVerticalCss(seg));
          }
        }; // Generates an object with CSS properties for the top/bottom coordinates of a segment element


        TimeGrid.prototype.generateSegVerticalCss = function (seg) {
          return {
            top: seg.top,
            bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container

          };
        };
        /* Sizing
        ------------------------------------------------------------------------------------------------------------------*/


        TimeGrid.prototype.buildPositionCaches = function () {
          this.buildColPositions();
          this.buildSlatPositions();
        };

        TimeGrid.prototype.buildColPositions = function () {
          this.colPositions.build();
        };

        TimeGrid.prototype.buildSlatPositions = function () {
          this.slatPositions.build();
        };
        /* Hit System
        ------------------------------------------------------------------------------------------------------------------*/


        TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {
          var dateEnv = this.context.dateEnv;

          var _a = this,
              snapsPerSlot = _a.snapsPerSlot,
              slatPositions = _a.slatPositions,
              colPositions = _a.colPositions;

          var colIndex = colPositions.leftToIndex(positionLeft);
          var slatIndex = slatPositions.topToIndex(positionTop);

          if (colIndex != null && slatIndex != null) {
            var slatTop = slatPositions.tops[slatIndex];
            var slatHeight = slatPositions.getHeight(slatIndex);
            var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1

            var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat

            var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;
            var dayDate = this.props.cells[colIndex].date;
            var time = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["addDurations"])(this.props.dateProfile.minTime, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["multiplyDuration"])(this.snapDuration, snapIndex));
            var start = dateEnv.add(dayDate, time);
            var end = dateEnv.add(start, this.snapDuration);
            return {
              col: colIndex,
              dateSpan: {
                range: {
                  start: start,
                  end: end
                },
                allDay: false
              },
              dayEl: this.colEls[colIndex],
              relativeRect: {
                left: colPositions.lefts[colIndex],
                right: colPositions.rights[colIndex],
                top: slatTop,
                bottom: slatTop + slatHeight
              }
            };
          }
        };
        /* Event Drag Visualization
        ------------------------------------------------------------------------------------------------------------------*/


        TimeGrid.prototype._renderEventDrag = function (state) {
          if (state) {
            this.eventRenderer.hideByHash(state.affectedInstances);

            if (state.isEvent) {
              this.mirrorRenderer.renderSegs(this.context, state.segs, {
                isDragging: true,
                sourceSeg: state.sourceSeg
              });
            } else {
              this.fillRenderer.renderSegs('highlight', this.context, state.segs);
            }
          }
        };

        TimeGrid.prototype._unrenderEventDrag = function (state) {
          if (state) {
            this.eventRenderer.showByHash(state.affectedInstances);

            if (state.isEvent) {
              this.mirrorRenderer.unrender(this.context, state.segs, {
                isDragging: true,
                sourceSeg: state.sourceSeg
              });
            } else {
              this.fillRenderer.unrender('highlight', this.context);
            }
          }
        };
        /* Event Resize Visualization
        ------------------------------------------------------------------------------------------------------------------*/


        TimeGrid.prototype._renderEventResize = function (state) {
          if (state) {
            this.eventRenderer.hideByHash(state.affectedInstances);
            this.mirrorRenderer.renderSegs(this.context, state.segs, {
              isResizing: true,
              sourceSeg: state.sourceSeg
            });
          }
        };

        TimeGrid.prototype._unrenderEventResize = function (state) {
          if (state) {
            this.eventRenderer.showByHash(state.affectedInstances);
            this.mirrorRenderer.unrender(this.context, state.segs, {
              isResizing: true,
              sourceSeg: state.sourceSeg
            });
          }
        };
        /* Selection
        ------------------------------------------------------------------------------------------------------------------*/
        // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.


        TimeGrid.prototype._renderDateSelection = function (segs) {
          if (segs) {
            if (this.context.options.selectMirror) {
              this.mirrorRenderer.renderSegs(this.context, segs, {
                isSelecting: true
              });
            } else {
              this.fillRenderer.renderSegs('highlight', this.context, segs);
            }
          }
        };

        TimeGrid.prototype._unrenderDateSelection = function (segs) {
          if (segs) {
            if (this.context.options.selectMirror) {
              this.mirrorRenderer.unrender(this.context, segs, {
                isSelecting: true
              });
            } else {
              this.fillRenderer.unrender('highlight', this.context);
            }
          }
        };

        return TimeGrid;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateComponent"]);

      var AllDaySplitter =
      /** @class */
      function (_super) {
        __extends(AllDaySplitter, _super);

        function AllDaySplitter() {
          return _super !== null && _super.apply(this, arguments) || this;
        }

        AllDaySplitter.prototype.getKeyInfo = function () {
          return {
            allDay: {},
            timed: {}
          };
        };

        AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {
          if (dateSpan.allDay) {
            return ['allDay'];
          } else {
            return ['timed'];
          }
        };

        AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {
          if (!eventDef.allDay) {
            return ['timed'];
          } else if (Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["hasBgRendering"])(eventDef)) {
            return ['timed', 'allDay'];
          } else {
            return ['allDay'];
          }
        };

        return AllDaySplitter;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Splitter"]);

      var TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;
      var WEEK_HEADER_FORMAT = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createFormatter"])({
        week: 'short'
      });
      /* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.
      ----------------------------------------------------------------------------------------------------------------------*/
      // Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).
      // Responsible for managing width/height.

      var AbstractTimeGridView =
      /** @class */
      function (_super) {
        __extends(AbstractTimeGridView, _super);

        function AbstractTimeGridView() {
          var _this = _super !== null && _super.apply(this, arguments) || this;

          _this.splitter = new AllDaySplitter();
          _this.renderSkeleton = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoizeRendering"])(_this._renderSkeleton, _this._unrenderSkeleton);
          /* Header Render Methods
          ------------------------------------------------------------------------------------------------------------------*/
          // Generates the HTML that will go before the day-of week header cells

          _this.renderHeadIntroHtml = function () {
            var _a = _this.context,
                theme = _a.theme,
                dateEnv = _a.dateEnv,
                options = _a.options;
            var range = _this.props.dateProfile.renderRange;
            var dayCnt = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["diffDays"])(range.start, range.end);
            var weekText;

            if (options.weekNumbers) {
              weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);
              return '' + '<th class="fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '" ' + _this.axisStyleAttr() + '>' + Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["buildGotoAnchorHtml"])( // aside from link, important for matchCellWidths
              options, dateEnv, {
                date: range.start,
                type: 'week',
                forceOff: dayCnt > 1
              }, Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["htmlEscape"])(weekText) // inner HTML
              ) + '</th>';
            } else {
              return '<th class="fc-axis ' + theme.getClass('widgetHeader') + '" ' + _this.axisStyleAttr() + '></th>';
            }
          };
          /* Time Grid Render Methods
          ------------------------------------------------------------------------------------------------------------------*/
          // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.


          _this.renderTimeGridBgIntroHtml = function () {
            var theme = _this.context.theme;
            return '<td class="fc-axis ' + theme.getClass('widgetContent') + '" ' + _this.axisStyleAttr() + '></td>';
          }; // Generates the HTML that goes before all other types of cells.
          // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.


          _this.renderTimeGridIntroHtml = function () {
            return '<td class="fc-axis" ' + _this.axisStyleAttr() + '></td>';
          };
          /* Day Grid Render Methods
          ------------------------------------------------------------------------------------------------------------------*/
          // Generates the HTML that goes before the all-day cells


          _this.renderDayGridBgIntroHtml = function () {
            var _a = _this.context,
                theme = _a.theme,
                options = _a.options;
            return '' + '<td class="fc-axis ' + theme.getClass('widgetContent') + '" ' + _this.axisStyleAttr() + '>' + '<span>' + // needed for matchCellWidths
            Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["getAllDayHtml"])(options) + '</span>' + '</td>';
          }; // Generates the HTML that goes before all other types of cells.
          // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.


          _this.renderDayGridIntroHtml = function () {
            return '<td class="fc-axis" ' + _this.axisStyleAttr() + '></td>';
          };

          return _this;
        }

        AbstractTimeGridView.prototype.render = function (props, context) {
          _super.prototype.render.call(this, props, context);

          this.renderSkeleton(context);
        };

        AbstractTimeGridView.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.renderSkeleton.unrender();
        };

        AbstractTimeGridView.prototype._renderSkeleton = function (context) {
          this.el.classList.add('fc-timeGrid-view');
          this.el.innerHTML = this.renderSkeletonHtml();
          this.scroller = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["ScrollComponent"]('hidden', // overflow x
          'auto' // overflow y
          );
          var timeGridWrapEl = this.scroller.el;
          this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);
          timeGridWrapEl.classList.add('fc-time-grid-container');
          var timeGridEl = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createElement"])('div', {
            className: 'fc-time-grid'
          });
          timeGridWrapEl.appendChild(timeGridEl);
          this.timeGrid = new TimeGrid(timeGridEl, {
            renderBgIntroHtml: this.renderTimeGridBgIntroHtml,
            renderIntroHtml: this.renderTimeGridIntroHtml
          });

          if (context.options.allDaySlot) {
            // should we display the "all-day" area?
            this.dayGrid = new _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_1__["DayGrid"]( // the all-day subcomponent of this view
            this.el.querySelector('.fc-day-grid'), {
              renderNumberIntroHtml: this.renderDayGridIntroHtml,
              renderBgIntroHtml: this.renderDayGridBgIntroHtml,
              renderIntroHtml: this.renderDayGridIntroHtml,
              colWeekNumbersVisible: false,
              cellWeekNumbersVisible: false
            }); // have the day-grid extend it's coordinate area over the <hr> dividing the two grids

            var dividerEl = this.el.querySelector('.fc-divider');
            this.dayGrid.bottomCoordPadding = dividerEl.getBoundingClientRect().height;
          }
        };

        AbstractTimeGridView.prototype._unrenderSkeleton = function () {
          this.el.classList.remove('fc-timeGrid-view');
          this.timeGrid.destroy();

          if (this.dayGrid) {
            this.dayGrid.destroy();
          }

          this.scroller.destroy();
        };
        /* Rendering
        ------------------------------------------------------------------------------------------------------------------*/
        // Builds the HTML skeleton for the view.
        // The day-grid and time-grid components will render inside containers defined by this HTML.


        AbstractTimeGridView.prototype.renderSkeletonHtml = function () {
          var _a = this.context,
              theme = _a.theme,
              options = _a.options;
          return '' + '<table class="' + theme.getClass('tableGrid') + '">' + (options.columnHeader ? '<thead class="fc-head">' + '<tr>' + '<td class="fc-head-container ' + theme.getClass('widgetHeader') + '">&nbsp;</td>' + '</tr>' + '</thead>' : '') + '<tbody class="fc-body">' + '<tr>' + '<td class="' + theme.getClass('widgetContent') + '">' + (options.allDaySlot ? '<div class="fc-day-grid"></div>' + '<hr class="fc-divider ' + theme.getClass('widgetHeader') + '" />' : '') + '</td>' + '</tr>' + '</tbody>' + '</table>';
        };
        /* Now Indicator
        ------------------------------------------------------------------------------------------------------------------*/


        AbstractTimeGridView.prototype.getNowIndicatorUnit = function () {
          return this.timeGrid.getNowIndicatorUnit();
        }; // subclasses should implement
        // renderNowIndicator(date: DateMarker) {
        // }


        AbstractTimeGridView.prototype.unrenderNowIndicator = function () {
          this.timeGrid.unrenderNowIndicator();
        };
        /* Dimensions
        ------------------------------------------------------------------------------------------------------------------*/


        AbstractTimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {
          _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first


          this.timeGrid.updateSize(isResize);

          if (this.dayGrid) {
            this.dayGrid.updateSize(isResize);
          }
        }; // Adjusts the vertical dimensions of the view to the specified values


        AbstractTimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {
          var _this = this;

          var eventLimit;
          var scrollerHeight;
          var scrollbarWidths; // make all axis cells line up

          this.axisWidth = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["matchCellWidths"])(Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, '.fc-axis')); // hack to give the view some height prior to timeGrid's columns being rendered
          // TODO: separate setting height from scroller VS timeGrid.

          if (!this.timeGrid.colEls) {
            if (!isAuto) {
              scrollerHeight = this.computeScrollerHeight(viewHeight);
              this.scroller.setHeight(scrollerHeight);
            }

            return;
          } // set of fake row elements that must compensate when scroller has scrollbars


          var noScrollRowEls = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["findElements"])(this.el, '.fc-row').filter(function (node) {
            return !_this.scroller.el.contains(node);
          }); // reset all dimensions back to the original state

          this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary

          this.scroller.clear(); // sets height to 'auto' and clears overflow

          noScrollRowEls.forEach(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["uncompensateScroll"]); // limit number of events in the all-day area

          if (this.dayGrid) {
            this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed

            eventLimit = this.context.options.eventLimit;

            if (eventLimit && typeof eventLimit !== 'number') {
              eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number
            }

            if (eventLimit) {
              this.dayGrid.limitRows(eventLimit);
            }
          }

          if (!isAuto) {
            // should we force dimensions of the scroll container?
            scrollerHeight = this.computeScrollerHeight(viewHeight);
            this.scroller.setHeight(scrollerHeight);
            scrollbarWidths = this.scroller.getScrollbarWidths();

            if (scrollbarWidths.left || scrollbarWidths.right) {
              // using scrollbars?
              // make the all-day and header rows lines up
              noScrollRowEls.forEach(function (rowEl) {
                Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["compensateScroll"])(rowEl, scrollbarWidths);
              }); // the scrollbar compensation might have changed text flow, which might affect height, so recalculate
              // and reapply the desired height to the scroller.

              scrollerHeight = this.computeScrollerHeight(viewHeight);
              this.scroller.setHeight(scrollerHeight);
            } // guarantees the same scrollbar widths


            this.scroller.lockOverflow(scrollbarWidths); // if there's any space below the slats, show the horizontal rule.
            // this won't cause any new overflow, because lockOverflow already called.

            if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {
              this.timeGrid.bottomRuleEl.style.display = '';
            }
          }
        }; // given a desired total height of the view, returns what the height of the scroller should be


        AbstractTimeGridView.prototype.computeScrollerHeight = function (viewHeight) {
          return viewHeight - Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["subtractInnerElHeight"])(this.el, this.scroller.el); // everything that's NOT the scroller
        };
        /* Scroll
        ------------------------------------------------------------------------------------------------------------------*/
        // Computes the initial pre-configured scroll state prior to allowing the user to change it


        AbstractTimeGridView.prototype.computeDateScroll = function (duration) {
          var top = this.timeGrid.computeTimeTop(duration); // zoom can give weird floating-point values. rather scroll a little bit further

          top = Math.ceil(top);

          if (top) {
            top++; // to overcome top border that slots beyond the first have. looks better
          }

          return {
            top: top
          };
        };

        AbstractTimeGridView.prototype.queryDateScroll = function () {
          return {
            top: this.scroller.getScrollTop()
          };
        };

        AbstractTimeGridView.prototype.applyDateScroll = function (scroll) {
          if (scroll.top !== undefined) {
            this.scroller.setScrollTop(scroll.top);
          }
        }; // Generates an HTML attribute string for setting the width of the axis, if it is known


        AbstractTimeGridView.prototype.axisStyleAttr = function () {
          if (this.axisWidth != null) {
            return 'style="width:' + this.axisWidth + 'px"';
          }

          return '';
        };

        return AbstractTimeGridView;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["View"]);

      AbstractTimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering

      var SimpleTimeGrid =
      /** @class */
      function (_super) {
        __extends(SimpleTimeGrid, _super);

        function SimpleTimeGrid(timeGrid) {
          var _this = _super.call(this, timeGrid.el) || this;

          _this.buildDayRanges = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(buildDayRanges);
          _this.slicer = new TimeGridSlicer();
          _this.timeGrid = timeGrid;
          return _this;
        }

        SimpleTimeGrid.prototype.firstContext = function (context) {
          context.calendar.registerInteractiveComponent(this, {
            el: this.timeGrid.el
          });
        };

        SimpleTimeGrid.prototype.destroy = function () {
          _super.prototype.destroy.call(this);

          this.context.calendar.unregisterInteractiveComponent(this);
        };

        SimpleTimeGrid.prototype.render = function (props, context) {
          var dateEnv = this.context.dateEnv;
          var dateProfile = props.dateProfile,
              dayTable = props.dayTable;
          var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, dateEnv);
          var timeGrid = this.timeGrid;
          timeGrid.receiveContext(context); // hack because context is used in sliceProps

          timeGrid.receiveProps(_assign4({}, this.slicer.sliceProps(props, dateProfile, null, context.calendar, timeGrid, dayRanges), {
            dateProfile: dateProfile,
            cells: dayTable.cells[0]
          }), context);
        };

        SimpleTimeGrid.prototype.renderNowIndicator = function (date) {
          this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);
        };

        SimpleTimeGrid.prototype.buildPositionCaches = function () {
          this.timeGrid.buildPositionCaches();
        };

        SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {
          var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);

          if (rawHit) {
            return {
              component: this.timeGrid,
              dateSpan: rawHit.dateSpan,
              dayEl: rawHit.dayEl,
              rect: {
                left: rawHit.relativeRect.left,
                right: rawHit.relativeRect.right,
                top: rawHit.relativeRect.top,
                bottom: rawHit.relativeRect.bottom
              },
              layer: 0
            };
          }
        };

        return SimpleTimeGrid;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DateComponent"]);

      function buildDayRanges(dayTable, dateProfile, dateEnv) {
        var ranges = [];

        for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {
          var date = _a[_i];
          ranges.push({
            start: dateEnv.add(date, dateProfile.minTime),
            end: dateEnv.add(date, dateProfile.maxTime)
          });
        }

        return ranges;
      }

      var TimeGridSlicer =
      /** @class */
      function (_super) {
        __extends(TimeGridSlicer, _super);

        function TimeGridSlicer() {
          return _super !== null && _super.apply(this, arguments) || this;
        }

        TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {
          var segs = [];

          for (var col = 0; col < dayRanges.length; col++) {
            var segRange = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["intersectRanges"])(range, dayRanges[col]);

            if (segRange) {
              segs.push({
                start: segRange.start,
                end: segRange.end,
                isStart: segRange.start.valueOf() === range.start.valueOf(),
                isEnd: segRange.end.valueOf() === range.end.valueOf(),
                col: col
              });
            }
          }

          return segs;
        };

        return TimeGridSlicer;
      }(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["Slicer"]);

      var TimeGridView =
      /** @class */
      function (_super) {
        __extends(TimeGridView, _super);

        function TimeGridView() {
          var _this = _super !== null && _super.apply(this, arguments) || this;

          _this.buildDayTable = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["memoize"])(buildDayTable);
          return _this;
        }

        TimeGridView.prototype.render = function (props, context) {
          _super.prototype.render.call(this, props, context); // for flags for updateSize. also _renderSkeleton/_unrenderSkeleton


          var _a = this.props,
              dateProfile = _a.dateProfile,
              dateProfileGenerator = _a.dateProfileGenerator;
          var nextDayThreshold = context.nextDayThreshold;
          var dayTable = this.buildDayTable(dateProfile, dateProfileGenerator);
          var splitProps = this.splitter.splitProps(props);

          if (this.header) {
            this.header.receiveProps({
              dateProfile: dateProfile,
              dates: dayTable.headerDates,
              datesRepDistinctDays: true,
              renderIntroHtml: this.renderHeadIntroHtml
            }, context);
          }

          this.simpleTimeGrid.receiveProps(_assign4({}, splitProps['timed'], {
            dateProfile: dateProfile,
            dayTable: dayTable
          }), context);

          if (this.simpleDayGrid) {
            this.simpleDayGrid.receiveProps(_assign4({}, splitProps['allDay'], {
              dateProfile: dateProfile,
              dayTable: dayTable,
              nextDayThreshold: nextDayThreshold,
              isRigid: false
            }), context);
          }

          this.startNowIndicator(dateProfile, dateProfileGenerator);
        };

        TimeGridView.prototype._renderSkeleton = function (context) {
          _super.prototype._renderSkeleton.call(this, context);

          if (context.options.columnHeader) {
            this.header = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DayHeader"](this.el.querySelector('.fc-head-container'));
          }

          this.simpleTimeGrid = new SimpleTimeGrid(this.timeGrid);

          if (this.dayGrid) {
            this.simpleDayGrid = new _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_1__["SimpleDayGrid"](this.dayGrid);
          }
        };

        TimeGridView.prototype._unrenderSkeleton = function () {
          _super.prototype._unrenderSkeleton.call(this);

          if (this.header) {
            this.header.destroy();
          }

          this.simpleTimeGrid.destroy();

          if (this.simpleDayGrid) {
            this.simpleDayGrid.destroy();
          }
        };

        TimeGridView.prototype.renderNowIndicator = function (date) {
          this.simpleTimeGrid.renderNowIndicator(date);
        };

        return TimeGridView;
      }(AbstractTimeGridView);

      function buildDayTable(dateProfile, dateProfileGenerator) {
        var daySeries = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DaySeries"](dateProfile.renderRange, dateProfileGenerator);
        return new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["DayTable"](daySeries, false);
      }

      var main = Object(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__["createPlugin"])({
        defaultView: 'timeGridWeek',
        views: {
          timeGrid: {
            "class": TimeGridView,
            allDaySlot: true,
            slotDuration: '00:30:00',
            slotEventOverlap: true // a bad name. confused with overlap/constraint system

          },
          timeGridDay: {
            type: 'timeGrid',
            duration: {
              days: 1
            }
          },
          timeGridWeek: {
            type: 'timeGrid',
            duration: {
              weeks: 1
            }
          }
        }
      });
      /* harmony default export */

      __webpack_exports__["default"] = main;
      /***/
    },

    /***/
    "./node_modules/atoa/atoa.js":
    /*!***********************************!*\
      !*** ./node_modules/atoa/atoa.js ***!
      \***********************************/

    /*! no static exports found */

    /***/
    function node_modulesAtoaAtoaJs(module, exports) {
      module.exports = function atoa(a, n) {
        return Array.prototype.slice.call(a, n);
      };
      /***/

    },

    /***/
    "./node_modules/contra/debounce.js":
    /*!*****************************************!*\
      !*** ./node_modules/contra/debounce.js ***!
      \*****************************************/

    /*! no static exports found */

    /***/
    function node_modulesContraDebounceJs(module, exports, __webpack_require__) {
      "use strict";

      var ticky = __webpack_require__(
      /*! ticky */
      "./node_modules/ticky/ticky-browser.js");

      module.exports = function debounce(fn, args, ctx) {
        if (!fn) {
          return;
        }

        ticky(function run() {
          fn.apply(ctx || null, args || []);
        });
      };
      /***/

    },

    /***/
    "./node_modules/contra/emitter.js":
    /*!****************************************!*\
      !*** ./node_modules/contra/emitter.js ***!
      \****************************************/

    /*! no static exports found */

    /***/
    function node_modulesContraEmitterJs(module, exports, __webpack_require__) {
      "use strict";

      var atoa = __webpack_require__(
      /*! atoa */
      "./node_modules/atoa/atoa.js");

      var debounce = __webpack_require__(
      /*! ./debounce */
      "./node_modules/contra/debounce.js");

      module.exports = function emitter(thing, options) {
        var opts = options || {};
        var evt = {};

        if (thing === undefined) {
          thing = {};
        }

        thing.on = function (type, fn) {
          if (!evt[type]) {
            evt[type] = [fn];
          } else {
            evt[type].push(fn);
          }

          return thing;
        };

        thing.once = function (type, fn) {
          fn._once = true; // thing.off(fn) still works!

          thing.on(type, fn);
          return thing;
        };

        thing.off = function (type, fn) {
          var c = arguments.length;

          if (c === 1) {
            delete evt[type];
          } else if (c === 0) {
            evt = {};
          } else {
            var et = evt[type];

            if (!et) {
              return thing;
            }

            et.splice(et.indexOf(fn), 1);
          }

          return thing;
        };

        thing.emit = function () {
          var args = atoa(arguments);
          return thing.emitterSnapshot(args.shift()).apply(this, args);
        };

        thing.emitterSnapshot = function (type) {
          var et = (evt[type] || []).slice(0);
          return function () {
            var args = atoa(arguments);
            var ctx = this || thing;

            if (type === 'error' && opts["throws"] !== false && !et.length) {
              throw args.length === 1 ? args[0] : args;
            }

            et.forEach(function emitter(listen) {
              if (opts.async) {
                debounce(listen, args, ctx);
              } else {
                listen.apply(ctx, args);
              }

              if (listen._once) {
                thing.off(type, listen);
              }
            });
            return thing;
          };
        };

        return thing;
      };
      /***/

    },

    /***/
    "./node_modules/crossvent/src/crossvent.js":
    /*!*************************************************!*\
      !*** ./node_modules/crossvent/src/crossvent.js ***!
      \*************************************************/

    /*! no static exports found */

    /***/
    function node_modulesCrossventSrcCrossventJs(module, exports, __webpack_require__) {
      "use strict";

      var customEvent = __webpack_require__(
      /*! custom-event */
      "./node_modules/custom-event/index.js");

      var eventmap = __webpack_require__(
      /*! ./eventmap */
      "./node_modules/crossvent/src/eventmap.js");

      var doc = global.document;
      var addEvent = addEventEasy;
      var removeEvent = removeEventEasy;
      var hardCache = [];

      if (!global.addEventListener) {
        addEvent = addEventHard;
        removeEvent = removeEventHard;
      }

      module.exports = {
        add: addEvent,
        remove: removeEvent,
        fabricate: fabricateEvent
      };

      function addEventEasy(el, type, fn, capturing) {
        return el.addEventListener(type, fn, capturing);
      }

      function addEventHard(el, type, fn) {
        return el.attachEvent('on' + type, wrap(el, type, fn));
      }

      function removeEventEasy(el, type, fn, capturing) {
        return el.removeEventListener(type, fn, capturing);
      }

      function removeEventHard(el, type, fn) {
        var listener = unwrap(el, type, fn);

        if (listener) {
          return el.detachEvent('on' + type, listener);
        }
      }

      function fabricateEvent(el, type, model) {
        var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();

        if (el.dispatchEvent) {
          el.dispatchEvent(e);
        } else {
          el.fireEvent('on' + type, e);
        }

        function makeClassicEvent() {
          var e;

          if (doc.createEvent) {
            e = doc.createEvent('Event');
            e.initEvent(type, true, true);
          } else if (doc.createEventObject) {
            e = doc.createEventObject();
          }

          return e;
        }

        function makeCustomEvent() {
          return new customEvent(type, {
            detail: model
          });
        }
      }

      function wrapperFactory(el, type, fn) {
        return function wrapper(originalEvent) {
          var e = originalEvent || global.event;
          e.target = e.target || e.srcElement;

          e.preventDefault = e.preventDefault || function preventDefault() {
            e.returnValue = false;
          };

          e.stopPropagation = e.stopPropagation || function stopPropagation() {
            e.cancelBubble = true;
          };

          e.which = e.which || e.keyCode;
          fn.call(el, e);
        };
      }

      function wrap(el, type, fn) {
        var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);
        hardCache.push({
          wrapper: wrapper,
          element: el,
          type: type,
          fn: fn
        });
        return wrapper;
      }

      function unwrap(el, type, fn) {
        var i = find(el, type, fn);

        if (i) {
          var wrapper = hardCache[i].wrapper;
          hardCache.splice(i, 1); // free up a tad of memory

          return wrapper;
        }
      }

      function find(el, type, fn) {
        var i, item;

        for (i = 0; i < hardCache.length; i++) {
          item = hardCache[i];

          if (item.element === el && item.type === type && item.fn === fn) {
            return i;
          }
        }
      }
      /***/

    },

    /***/
    "./node_modules/crossvent/src/eventmap.js":
    /*!************************************************!*\
      !*** ./node_modules/crossvent/src/eventmap.js ***!
      \************************************************/

    /*! no static exports found */

    /***/
    function node_modulesCrossventSrcEventmapJs(module, exports, __webpack_require__) {
      "use strict";

      var eventmap = [];
      var eventname = '';
      var ron = /^on/;

      for (eventname in global) {
        if (ron.test(eventname)) {
          eventmap.push(eventname.slice(2));
        }
      }

      module.exports = eventmap;
      /***/
    },

    /***/
    "./node_modules/custom-event/index.js":
    /*!********************************************!*\
      !*** ./node_modules/custom-event/index.js ***!
      \********************************************/

    /*! no static exports found */

    /***/
    function node_modulesCustomEventIndexJs(module, exports) {
      var NativeCustomEvent = global.CustomEvent;

      function useNative() {
        try {
          var p = new NativeCustomEvent('cat', {
            detail: {
              foo: 'bar'
            }
          });
          return 'cat' === p.type && 'bar' === p.detail.foo;
        } catch (e) {}

        return false;
      }
      /**
       * Cross-browser `CustomEvent` constructor.
       *
       * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
       *
       * @public
       */


      module.exports = useNative() ? NativeCustomEvent : // IE >= 9
      'function' === typeof document.createEvent ? function CustomEvent(type, params) {
        var e = document.createEvent('CustomEvent');

        if (params) {
          e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
        } else {
          e.initCustomEvent(type, false, false, void 0);
        }

        return e;
      } : // IE <= 8
      function CustomEvent(type, params) {
        var e = document.createEventObject();
        e.type = type;

        if (params) {
          e.bubbles = Boolean(params.bubbles);
          e.cancelable = Boolean(params.cancelable);
          e.detail = params.detail;
        } else {
          e.bubbles = false;
          e.cancelable = false;
          e.detail = void 0;
        }

        return e;
      };
      /***/
    },

    /***/
    "./node_modules/dragula/classes.js":
    /*!*****************************************!*\
      !*** ./node_modules/dragula/classes.js ***!
      \*****************************************/

    /*! no static exports found */

    /***/
    function node_modulesDragulaClassesJs(module, exports, __webpack_require__) {
      "use strict";

      var cache = {};
      var start = '(?:^|\\s)';
      var end = '(?:\\s|$)';

      function lookupClass(className) {
        var cached = cache[className];

        if (cached) {
          cached.lastIndex = 0;
        } else {
          cache[className] = cached = new RegExp(start + className + end, 'g');
        }

        return cached;
      }

      function addClass(el, className) {
        var current = el.className;

        if (!current.length) {
          el.className = className;
        } else if (!lookupClass(className).test(current)) {
          el.className += ' ' + className;
        }
      }

      function rmClass(el, className) {
        el.className = el.className.replace(lookupClass(className), ' ').trim();
      }

      module.exports = {
        add: addClass,
        rm: rmClass
      };
      /***/
    },

    /***/
    "./node_modules/dragula/dragula.js":
    /*!*****************************************!*\
      !*** ./node_modules/dragula/dragula.js ***!
      \*****************************************/

    /*! no static exports found */

    /***/
    function node_modulesDragulaDragulaJs(module, exports, __webpack_require__) {
      "use strict";

      var emitter = __webpack_require__(
      /*! contra/emitter */
      "./node_modules/contra/emitter.js");

      var crossvent = __webpack_require__(
      /*! crossvent */
      "./node_modules/crossvent/src/crossvent.js");

      var classes = __webpack_require__(
      /*! ./classes */
      "./node_modules/dragula/classes.js");

      var doc = document;
      var documentElement = doc.documentElement;

      function dragula(initialContainers, options) {
        var len = arguments.length;

        if (len === 1 && Array.isArray(initialContainers) === false) {
          options = initialContainers;
          initialContainers = [];
        }

        var _mirror; // mirror image


        var _source; // source container


        var _item; // item being dragged


        var _offsetX; // reference x


        var _offsetY; // reference y


        var _moveX; // reference move x


        var _moveY; // reference move y


        var _initialSibling; // reference sibling when grabbed


        var _currentSibling; // reference sibling now


        var _copy; // item used for copying


        var _renderTimer; // timer for setTimeout renderMirrorImage


        var _lastDropTarget = null; // last container item was over

        var _grabbed; // holds mousedown context until first mousemove


        var o = options || {};

        if (o.moves === void 0) {
          o.moves = always;
        }

        if (o.accepts === void 0) {
          o.accepts = always;
        }

        if (o.invalid === void 0) {
          o.invalid = invalidTarget;
        }

        if (o.containers === void 0) {
          o.containers = initialContainers || [];
        }

        if (o.isContainer === void 0) {
          o.isContainer = never;
        }

        if (o.copy === void 0) {
          o.copy = false;
        }

        if (o.copySortSource === void 0) {
          o.copySortSource = false;
        }

        if (o.revertOnSpill === void 0) {
          o.revertOnSpill = false;
        }

        if (o.removeOnSpill === void 0) {
          o.removeOnSpill = false;
        }

        if (o.direction === void 0) {
          o.direction = 'vertical';
        }

        if (o.ignoreInputTextSelection === void 0) {
          o.ignoreInputTextSelection = true;
        }

        if (o.mirrorContainer === void 0) {
          o.mirrorContainer = doc.body;
        }

        var drake = emitter({
          containers: o.containers,
          start: manualStart,
          end: end,
          cancel: cancel,
          remove: remove,
          destroy: destroy,
          canMove: canMove,
          dragging: false
        });

        if (o.removeOnSpill === true) {
          drake.on('over', spillOver).on('out', spillOut);
        }

        events();
        return drake;

        function isContainer(el) {
          return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
        }

        function events(remove) {
          var op = remove ? 'remove' : 'add';
          touchy(documentElement, op, 'mousedown', grab);
          touchy(documentElement, op, 'mouseup', release);
        }

        function eventualMovements(remove) {
          var op = remove ? 'remove' : 'add';
          touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
        }

        function movements(remove) {
          var op = remove ? 'remove' : 'add';
          crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8

          crossvent[op](documentElement, 'click', preventGrabbed);
        }

        function destroy() {
          events(true);
          release({});
        }

        function preventGrabbed(e) {
          if (_grabbed) {
            e.preventDefault();
          }
        }

        function grab(e) {
          _moveX = e.clientX;
          _moveY = e.clientY;
          var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;

          if (ignore) {
            return; // we only care about honest-to-god left clicks and touch events
          }

          var item = e.target;
          var context = canStart(item);

          if (!context) {
            return;
          }

          _grabbed = context;
          eventualMovements();

          if (e.type === 'mousedown') {
            if (isInput(item)) {
              // see also: https://github.com/bevacqua/dragula/issues/208
              item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
            } else {
              e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
            }
          }
        }

        function startBecauseMouseMoved(e) {
          if (!_grabbed) {
            return;
          }

          if (whichMouseButton(e) === 0) {
            release({});
            return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
          } // truthy check fixes #239, equality fixes #207


          if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {
            return;
          }

          if (o.ignoreInputTextSelection) {
            var clientX = getCoord('clientX', e);
            var clientY = getCoord('clientY', e);
            var elementBehindCursor = doc.elementFromPoint(clientX, clientY);

            if (isInput(elementBehindCursor)) {
              return;
            }
          }

          var grabbed = _grabbed; // call to end() unsets _grabbed

          eventualMovements(true);
          movements();
          end();
          start(grabbed);
          var offset = getOffset(_item);
          _offsetX = getCoord('pageX', e) - offset.left;
          _offsetY = getCoord('pageY', e) - offset.top;
          classes.add(_copy || _item, 'gu-transit');
          renderMirrorImage();
          drag(e);
        }

        function canStart(item) {
          if (drake.dragging && _mirror) {
            return;
          }

          if (isContainer(item)) {
            return; // don't drag container itself
          }

          var handle = item;

          while (getParent(item) && isContainer(getParent(item)) === false) {
            if (o.invalid(item, handle)) {
              return;
            }

            item = getParent(item); // drag target should be a top element

            if (!item) {
              return;
            }
          }

          var source = getParent(item);

          if (!source) {
            return;
          }

          if (o.invalid(item, handle)) {
            return;
          }

          var movable = o.moves(item, source, handle, nextEl(item));

          if (!movable) {
            return;
          }

          return {
            item: item,
            source: source
          };
        }

        function canMove(item) {
          return !!canStart(item);
        }

        function manualStart(item) {
          var context = canStart(item);

          if (context) {
            start(context);
          }
        }

        function start(context) {
          if (isCopy(context.item, context.source)) {
            _copy = context.item.cloneNode(true);
            drake.emit('cloned', _copy, context.item, 'copy');
          }

          _source = context.source;
          _item = context.item;
          _initialSibling = _currentSibling = nextEl(context.item);
          drake.dragging = true;
          drake.emit('drag', _item, _source);
        }

        function invalidTarget() {
          return false;
        }

        function end() {
          if (!drake.dragging) {
            return;
          }

          var item = _copy || _item;
          drop(item, getParent(item));
        }

        function ungrab() {
          _grabbed = false;
          eventualMovements(true);
          movements(true);
        }

        function release(e) {
          ungrab();

          if (!drake.dragging) {
            return;
          }

          var item = _copy || _item;
          var clientX = getCoord('clientX', e);
          var clientY = getCoord('clientY', e);
          var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
          var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);

          if (dropTarget && (_copy && o.copySortSource || !_copy || dropTarget !== _source)) {
            drop(item, dropTarget);
          } else if (o.removeOnSpill) {
            remove();
          } else {
            cancel();
          }
        }

        function drop(item, target) {
          var parent = getParent(item);

          if (_copy && o.copySortSource && target === _source) {
            parent.removeChild(_item);
          }

          if (isInitialPlacement(target)) {
            drake.emit('cancel', item, _source, _source);
          } else {
            drake.emit('drop', item, target, _source, _currentSibling);
          }

          cleanup();
        }

        function remove() {
          if (!drake.dragging) {
            return;
          }

          var item = _copy || _item;
          var parent = getParent(item);

          if (parent) {
            parent.removeChild(item);
          }

          drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
          cleanup();
        }

        function cancel(revert) {
          if (!drake.dragging) {
            return;
          }

          var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
          var item = _copy || _item;
          var parent = getParent(item);
          var initial = isInitialPlacement(parent);

          if (initial === false && reverts) {
            if (_copy) {
              if (parent) {
                parent.removeChild(_copy);
              }
            } else {
              _source.insertBefore(item, _initialSibling);
            }
          }

          if (initial || reverts) {
            drake.emit('cancel', item, _source, _source);
          } else {
            drake.emit('drop', item, parent, _source, _currentSibling);
          }

          cleanup();
        }

        function cleanup() {
          var item = _copy || _item;
          ungrab();
          removeMirrorImage();

          if (item) {
            classes.rm(item, 'gu-transit');
          }

          if (_renderTimer) {
            clearTimeout(_renderTimer);
          }

          drake.dragging = false;

          if (_lastDropTarget) {
            drake.emit('out', item, _lastDropTarget, _source);
          }

          drake.emit('dragend', item);
          _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
        }

        function isInitialPlacement(target, s) {
          var sibling;

          if (s !== void 0) {
            sibling = s;
          } else if (_mirror) {
            sibling = _currentSibling;
          } else {
            sibling = nextEl(_copy || _item);
          }

          return target === _source && sibling === _initialSibling;
        }

        function findDropTarget(elementBehindCursor, clientX, clientY) {
          var target = elementBehindCursor;

          while (target && !accepted()) {
            target = getParent(target);
          }

          return target;

          function accepted() {
            var droppable = isContainer(target);

            if (droppable === false) {
              return false;
            }

            var immediate = getImmediateChild(target, elementBehindCursor);
            var reference = getReference(target, immediate, clientX, clientY);
            var initial = isInitialPlacement(target, reference);

            if (initial) {
              return true; // should always be able to drop it right back where it was
            }

            return o.accepts(_item, target, _source, reference);
          }
        }

        function drag(e) {
          if (!_mirror) {
            return;
          }

          e.preventDefault();
          var clientX = getCoord('clientX', e);
          var clientY = getCoord('clientY', e);
          var x = clientX - _offsetX;
          var y = clientY - _offsetY;
          _mirror.style.left = x + 'px';
          _mirror.style.top = y + 'px';
          var item = _copy || _item;
          var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
          var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
          var changed = dropTarget !== null && dropTarget !== _lastDropTarget;

          if (changed || dropTarget === null) {
            out();
            _lastDropTarget = dropTarget;
            over();
          }

          var parent = getParent(item);

          if (dropTarget === _source && _copy && !o.copySortSource) {
            if (parent) {
              parent.removeChild(item);
            }

            return;
          }

          var reference;
          var immediate = getImmediateChild(dropTarget, elementBehindCursor);

          if (immediate !== null) {
            reference = getReference(dropTarget, immediate, clientX, clientY);
          } else if (o.revertOnSpill === true && !_copy) {
            reference = _initialSibling;
            dropTarget = _source;
          } else {
            if (_copy && parent) {
              parent.removeChild(item);
            }

            return;
          }

          if (reference === null && changed || reference !== item && reference !== nextEl(item)) {
            _currentSibling = reference;
            dropTarget.insertBefore(item, reference);
            drake.emit('shadow', item, dropTarget, _source);
          }

          function moved(type) {
            drake.emit(type, item, _lastDropTarget, _source);
          }

          function over() {
            if (changed) {
              moved('over');
            }
          }

          function out() {
            if (_lastDropTarget) {
              moved('out');
            }
          }
        }

        function spillOver(el) {
          classes.rm(el, 'gu-hide');
        }

        function spillOut(el) {
          if (drake.dragging) {
            classes.add(el, 'gu-hide');
          }
        }

        function renderMirrorImage() {
          if (_mirror) {
            return;
          }

          var rect = _item.getBoundingClientRect();

          _mirror = _item.cloneNode(true);
          _mirror.style.width = getRectWidth(rect) + 'px';
          _mirror.style.height = getRectHeight(rect) + 'px';
          classes.rm(_mirror, 'gu-transit');
          classes.add(_mirror, 'gu-mirror');
          o.mirrorContainer.appendChild(_mirror);
          touchy(documentElement, 'add', 'mousemove', drag);
          classes.add(o.mirrorContainer, 'gu-unselectable');
          drake.emit('cloned', _mirror, _item, 'mirror');
        }

        function removeMirrorImage() {
          if (_mirror) {
            classes.rm(o.mirrorContainer, 'gu-unselectable');
            touchy(documentElement, 'remove', 'mousemove', drag);
            getParent(_mirror).removeChild(_mirror);
            _mirror = null;
          }
        }

        function getImmediateChild(dropTarget, target) {
          var immediate = target;

          while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
            immediate = getParent(immediate);
          }

          if (immediate === documentElement) {
            return null;
          }

          return immediate;
        }

        function getReference(dropTarget, target, x, y) {
          var horizontal = o.direction === 'horizontal';
          var reference = target !== dropTarget ? inside() : outside();
          return reference;

          function outside() {
            // slower, but able to figure out any position
            var len = dropTarget.children.length;
            var i;
            var el;
            var rect;

            for (i = 0; i < len; i++) {
              el = dropTarget.children[i];
              rect = el.getBoundingClientRect();

              if (horizontal && rect.left + rect.width / 2 > x) {
                return el;
              }

              if (!horizontal && rect.top + rect.height / 2 > y) {
                return el;
              }
            }

            return null;
          }

          function inside() {
            // faster, but only available if dropped inside a child element
            var rect = target.getBoundingClientRect();

            if (horizontal) {
              return resolve(x > rect.left + getRectWidth(rect) / 2);
            }

            return resolve(y > rect.top + getRectHeight(rect) / 2);
          }

          function resolve(after) {
            return after ? nextEl(target) : target;
          }
        }

        function isCopy(item, container) {
          return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
        }
      }

      function touchy(el, op, type, fn) {
        var touch = {
          mouseup: 'touchend',
          mousedown: 'touchstart',
          mousemove: 'touchmove'
        };
        var pointers = {
          mouseup: 'pointerup',
          mousedown: 'pointerdown',
          mousemove: 'pointermove'
        };
        var microsoft = {
          mouseup: 'MSPointerUp',
          mousedown: 'MSPointerDown',
          mousemove: 'MSPointerMove'
        };

        if (global.navigator.pointerEnabled) {
          crossvent[op](el, pointers[type], fn);
        } else if (global.navigator.msPointerEnabled) {
          crossvent[op](el, microsoft[type], fn);
        } else {
          crossvent[op](el, touch[type], fn);
          crossvent[op](el, type, fn);
        }
      }

      function whichMouseButton(e) {
        if (e.touches !== void 0) {
          return e.touches.length;
        }

        if (e.which !== void 0 && e.which !== 0) {
          return e.which;
        } // see https://github.com/bevacqua/dragula/issues/261


        if (e.buttons !== void 0) {
          return e.buttons;
        }

        var button = e.button;

        if (button !== void 0) {
          // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
          return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
        }
      }

      function getOffset(el) {
        var rect = el.getBoundingClientRect();
        return {
          left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
          top: rect.top + getScroll('scrollTop', 'pageYOffset')
        };
      }

      function getScroll(scrollProp, offsetProp) {
        if (typeof global[offsetProp] !== 'undefined') {
          return global[offsetProp];
        }

        if (documentElement.clientHeight) {
          return documentElement[scrollProp];
        }

        return doc.body[scrollProp];
      }

      function getElementBehindPoint(point, x, y) {
        var p = point || {};
        var state = p.className;
        var el;
        p.className += ' gu-hide';
        el = doc.elementFromPoint(x, y);
        p.className = state;
        return el;
      }

      function never() {
        return false;
      }

      function always() {
        return true;
      }

      function getRectWidth(rect) {
        return rect.width || rect.right - rect.left;
      }

      function getRectHeight(rect) {
        return rect.height || rect.bottom - rect.top;
      }

      function getParent(el) {
        return el.parentNode === doc ? null : el.parentNode;
      }

      function isInput(el) {
        return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el);
      }

      function isEditable(el) {
        if (!el) {
          return false;
        } // no parents were editable


        if (el.contentEditable === 'false') {
          return false;
        } // stop the lookup


        if (el.contentEditable === 'true') {
          return true;
        } // found a contentEditable element in the chain


        return isEditable(getParent(el)); // contentEditable is set to 'inherit'
      }

      function nextEl(el) {
        return el.nextElementSibling || manually();

        function manually() {
          var sibling = el;

          do {
            sibling = sibling.nextSibling;
          } while (sibling && sibling.nodeType !== 1);

          return sibling;
        }
      }

      function getEventHost(e) {
        // on touchend event, we have to use `e.changedTouches`
        // see http://stackoverflow.com/questions/7192563/touchend-event-properties
        // see https://github.com/bevacqua/dragula/issues/34
        if (e.targetTouches && e.targetTouches.length) {
          return e.targetTouches[0];
        }

        if (e.changedTouches && e.changedTouches.length) {
          return e.changedTouches[0];
        }

        return e;
      }

      function getCoord(coord, e) {
        var host = getEventHost(e);
        var missMap = {
          pageX: 'clientX',
          // IE8
          pageY: 'clientY' // IE8

        };

        if (coord in missMap && !(coord in host) && missMap[coord] in host) {
          coord = missMap[coord];
        }

        return host[coord];
      }

      module.exports = dragula;
      /***/
    },

    /***/
    "./node_modules/fast-deep-equal/index.js":
    /*!***********************************************!*\
      !*** ./node_modules/fast-deep-equal/index.js ***!
      \***********************************************/

    /*! no static exports found */

    /***/
    function node_modulesFastDeepEqualIndexJs(module, exports, __webpack_require__) {
      "use strict"; // do not edit .js files directly - edit src/index.jst

      module.exports = function equal(a, b) {
        if (a === b) return true;

        if (a && b && typeof a == 'object' && typeof b == 'object') {
          if (a.constructor !== b.constructor) return false;
          var length, i, keys;

          if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length) return false;

            for (i = length; i-- !== 0;) {
              if (!equal(a[i], b[i])) return false;
            }

            return true;
          }

          if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
          keys = Object.keys(a);
          length = keys.length;
          if (length !== Object.keys(b).length) return false;

          for (i = length; i-- !== 0;) {
            if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
          }

          for (i = length; i-- !== 0;) {
            var key = keys[i];
            if (!equal(a[key], b[key])) return false;
          }

          return true;
        } // true if both NaN, false otherwise


        return a !== a && b !== b;
      };
      /***/

    },

    /***/
    "./node_modules/ng2-dragula/__ivy_ngcc__/dist/fesm2015/ng2-dragula.js":
    /*!****************************************************************************!*\
      !*** ./node_modules/ng2-dragula/__ivy_ngcc__/dist/fesm2015/ng2-dragula.js ***!
      \****************************************************************************/

    /*! exports provided: DragulaDirective, DragulaService, DragulaModule, dragula, DrakeFactory, Group, EventTypes, MockDrake, MockDrakeFactory */

    /***/
    function node_modulesNg2Dragula__ivy_ngcc__DistFesm2015Ng2DragulaJs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DragulaDirective", function () {
        return DragulaDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DragulaService", function () {
        return DragulaService;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DragulaModule", function () {
        return DragulaModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "dragula", function () {
        return dragula;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DrakeFactory", function () {
        return DrakeFactory;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Group", function () {
        return Group;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EventTypes", function () {
        return EventTypes;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MockDrake", function () {
        return MockDrake;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "MockDrakeFactory", function () {
        return MockDrakeFactory;
      });
      /* harmony import */


      var dragula__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! dragula */
      "./node_modules/dragula/dragula.js");
      /* harmony import */


      var dragula__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dragula__WEBPACK_IMPORTED_MODULE_0__);
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "./node_modules/rxjs/_esm2015/index.js");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs/operators */
      "./node_modules/rxjs/_esm2015/operators/index.js");
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */


      var Group =
      /**
       * @param {?} name
       * @param {?} drake
       * @param {?} options
       */
      function Group(name, drake, options) {
        _classCallCheck(this, Group);

        this.name = name;
        this.drake = drake;
        this.options = options;
        this.initEvents = false;
      };
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */

      /** @enum {string} */


      var EventTypes = {
        Cancel: "cancel",
        Cloned: "cloned",
        Drag: "drag",
        DragEnd: "dragend",
        Drop: "drop",
        Out: "out",
        Over: "over",
        Remove: "remove",
        Shadow: "shadow",
        DropModel: "dropModel",
        RemoveModel: "removeModel"
      };
      /** @type {?} */

      var AllEvents = Object.keys(EventTypes).map(function (k) {
        return (
          /** @type {?} */
          EventTypes[
          /** @type {?} */
          k]
        );
      });
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */

      /** @type {?} */

      var dragula = dragula__WEBPACK_IMPORTED_MODULE_0___default.a || dragula__WEBPACK_IMPORTED_MODULE_0__;

      var DrakeFactory =
      /**
       * @param {?=} build
       */
      function DrakeFactory() {
        var build = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dragula;

        _classCallCheck(this, DrakeFactory);

        this.build = build;
      };
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */

      /** @type {?} */


      var filterEvent = function filterEvent(eventType, filterDragType, projector) {
        return function (input) {
          return input.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function (_ref7) {
            var event = _ref7.event,
                name = _ref7.name;
            return event === eventType && (filterDragType === undefined || name === filterDragType);
          }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (_ref8) {
            var name = _ref8.name,
                args = _ref8.args;
            return projector(name, args);
          }));
        };
      };
      /** @type {?} */


      var elContainerSourceProjector = function elContainerSourceProjector(name, _ref9) {
        var _ref10 = _slicedToArray(_ref9, 3),
            el = _ref10[0],
            container = _ref10[1],
            source = _ref10[2];

        return {
          name: name,
          el: el,
          container: container,
          source: source
        };
      };

      var DragulaService = /*#__PURE__*/function () {
        /**
         * @param {?=} drakeFactory
         */
        function DragulaService() {
          var _this31 = this;

          var drakeFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

          _classCallCheck(this, DragulaService);

          this.drakeFactory = drakeFactory;
          this.dispatch$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();

          this.drag = function (groupName) {
            return _this31.dispatch$.pipe(filterEvent(EventTypes.Drag, groupName, function (name, _ref11) {
              var _ref12 = _slicedToArray(_ref11, 2),
                  el = _ref12[0],
                  source = _ref12[1];

              return {
                name: name,
                el: el,
                source: source
              };
            }));
          };

          this.dragend = function (groupName) {
            return _this31.dispatch$.pipe(filterEvent(EventTypes.DragEnd, groupName, function (name, _ref13) {
              var _ref14 = _slicedToArray(_ref13, 1),
                  el = _ref14[0];

              return {
                name: name,
                el: el
              };
            }));
          };

          this.drop = function (groupName) {
            return _this31.dispatch$.pipe(filterEvent(EventTypes.Drop, groupName, function (name, _ref15) {
              var _ref16 = _slicedToArray(_ref15, 4),
                  el = _ref16[0],
                  target = _ref16[1],
                  source = _ref16[2],
                  sibling = _ref16[3];

              return {
                name: name,
                el: el,
                target: target,
                source: source,
                sibling: sibling
              };
            }));
          };

          this.elContainerSource = function (eventType) {
            return function (groupName) {
              return _this31.dispatch$.pipe(filterEvent(eventType, groupName, elContainerSourceProjector));
            };
          };

          this.cancel = this.elContainerSource(EventTypes.Cancel);
          this.remove = this.elContainerSource(EventTypes.Remove);
          this.shadow = this.elContainerSource(EventTypes.Shadow);
          this.over = this.elContainerSource(EventTypes.Over);
          this.out = this.elContainerSource(EventTypes.Out);

          this.cloned = function (groupName) {
            return _this31.dispatch$.pipe(filterEvent(EventTypes.Cloned, groupName, function (name, _ref17) {
              var _ref18 = _slicedToArray(_ref17, 3),
                  clone = _ref18[0],
                  original = _ref18[1],
                  cloneType = _ref18[2];

              return {
                name: name,
                clone: clone,
                original: original,
                cloneType: cloneType
              };
            }));
          };

          this.dropModel = function (groupName) {
            return _this31.dispatch$.pipe(filterEvent(EventTypes.DropModel, groupName, function (name, _ref19) {
              var _ref20 = _slicedToArray(_ref19, 9),
                  el = _ref20[0],
                  target = _ref20[1],
                  source = _ref20[2],
                  sibling = _ref20[3],
                  item = _ref20[4],
                  sourceModel = _ref20[5],
                  targetModel = _ref20[6],
                  sourceIndex = _ref20[7],
                  targetIndex = _ref20[8];

              return {
                name: name,
                el: el,
                target: target,
                source: source,
                sibling: sibling,
                item: item,
                sourceModel: sourceModel,
                targetModel: targetModel,
                sourceIndex: sourceIndex,
                targetIndex: targetIndex
              };
            }));
          };

          this.removeModel = function (groupName) {
            return _this31.dispatch$.pipe(filterEvent(EventTypes.RemoveModel, groupName, function (name, _ref21) {
              var _ref22 = _slicedToArray(_ref21, 6),
                  el = _ref22[0],
                  container = _ref22[1],
                  source = _ref22[2],
                  item = _ref22[3],
                  sourceModel = _ref22[4],
                  sourceIndex = _ref22[5];

              return {
                name: name,
                el: el,
                container: container,
                source: source,
                item: item,
                sourceModel: sourceModel,
                sourceIndex: sourceIndex
              };
            }));
          };

          this.groups = {};

          if (this.drakeFactory === null) {
            this.drakeFactory = new DrakeFactory();
          }
        }
        /**
         * Public mainly for testing purposes. Prefer `createGroup()`.
         * @param {?} group
         * @return {?}
         */


        _createClass(DragulaService, [{
          key: "add",
          value: function add(group) {
            /** @type {?} */
            var existingGroup = this.find(group.name);

            if (existingGroup) {
              throw new Error('Group named: "' + group.name + '" already exists.');
            }

            this.groups[group.name] = group;
            this.handleModels(group);
            this.setupEvents(group);
            return group;
          }
          /**
           * @param {?} name
           * @return {?}
           */

        }, {
          key: "find",
          value: function find(name) {
            return this.groups[name];
          }
          /**
           * @param {?} name
           * @return {?}
           */

        }, {
          key: "destroy",
          value: function destroy(name) {
            /** @type {?} */
            var group = this.find(name);

            if (!group) {
              return;
            }

            group.drake && group.drake.destroy();
            delete this.groups[name];
          }
          /**
           * Creates a group with the specified name and options.
           *
           * Note: formerly known as `setOptions`
           * @template T
           * @param {?} name
           * @param {?} options
           * @return {?}
           */

        }, {
          key: "createGroup",
          value: function createGroup(name, options) {
            return this.add(new Group(name, this.drakeFactory.build([], options), options));
          }
          /**
           * @param {?} __0
           * @return {?}
           */

        }, {
          key: "handleModels",
          value: function handleModels(_ref23) {
            var _this32 = this;

            var name = _ref23.name,
                drake = _ref23.drake,
                options = _ref23.options;

            /** @type {?} */
            var dragElm;
            /** @type {?} */

            var dragIndex;
            /** @type {?} */

            var dropIndex;
            drake.on('remove', function (el, container, source) {
              if (!drake.models) {
                return;
              }
              /** @type {?} */


              var sourceModel = drake.models[drake.containers.indexOf(source)];
              sourceModel = sourceModel.slice(0);
              /** @type {?} */

              var item = sourceModel.splice(dragIndex, 1)[0]; // console.log('REMOVE');
              // console.log(sourceModel);

              _this32.dispatch$.next({
                event: EventTypes.RemoveModel,
                name: name,
                args: [el, container, source, item, sourceModel, dragIndex]
              });
            });
            drake.on('drag', function (el, source) {
              if (!drake.models) {
                return;
              }

              dragElm = el;
              dragIndex = _this32.domIndexOf(el, source);
            });
            drake.on('drop', function (dropElm, target, source, sibling) {
              if (!drake.models || !target) {
                return;
              }

              dropIndex = _this32.domIndexOf(dropElm, target);
              /** @type {?} */

              var sourceModel = drake.models[drake.containers.indexOf(source)];
              /** @type {?} */

              var targetModel = drake.models[drake.containers.indexOf(target)];
              /** @type {?} */

              var item;

              if (target === source) {
                sourceModel = sourceModel.slice(0);
                item = sourceModel.splice(dragIndex, 1)[0];
                sourceModel.splice(dropIndex, 0, item); // this was true before we cloned and updated sourceModel,
                // but targetModel still has the old value

                targetModel = sourceModel;
              } else {
                /** @type {?} */
                var isCopying = dragElm !== dropElm;
                item = sourceModel[dragIndex];

                if (isCopying) {
                  if (!options.copyItem) {
                    throw new Error("If you have enabled `copy` on a group, you must provide a `copyItem` function.");
                  }

                  item = options.copyItem(item);
                }

                if (!isCopying) {
                  sourceModel = sourceModel.slice(0);
                  sourceModel.splice(dragIndex, 1);
                }

                targetModel = targetModel.slice(0);
                targetModel.splice(dropIndex, 0, item);

                if (isCopying) {
                  try {
                    target.removeChild(dropElm);
                  } catch (e) {}
                }
              }

              _this32.dispatch$.next({
                event: EventTypes.DropModel,
                name: name,
                args: [dropElm, target, source, sibling, item, sourceModel, targetModel, dragIndex, dropIndex]
              });
            });
          }
          /**
           * @param {?} group
           * @return {?}
           */

        }, {
          key: "setupEvents",
          value: function setupEvents(group) {
            var _this33 = this;

            if (group.initEvents) {
              return;
            }

            group.initEvents = true;
            /** @type {?} */

            var name = group.name;
            /** @type {?} */

            var emitter = function emitter(event) {
              group.drake.on(event, function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                _this33.dispatch$.next({
                  event: event,
                  name: name,
                  args: args
                });
              });
            };

            AllEvents.forEach(emitter);
          }
          /**
           * @param {?} child
           * @param {?} parent
           * @return {?}
           */

        }, {
          key: "domIndexOf",
          value: function domIndexOf(child, parent) {
            return Array.prototype.indexOf.call(parent.children, child);
          }
        }]);

        return DragulaService;
      }();

      DragulaService.ɵfac = function DragulaService_Factory(t) {
        return new (t || DragulaService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](DrakeFactory, 8));
      };

      DragulaService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
        token: DragulaService,
        factory: DragulaService.ɵfac
      });
      /** @nocollapse */

      DragulaService.ctorParameters = function () {
        return [{
          type: DrakeFactory,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
          }]
        }];
      };
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DragulaService, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
        }], function () {
          return [{
            type: DrakeFactory,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }]
          }];
        }, null);
      })();
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */


      var DragulaDirective = /*#__PURE__*/function () {
        /**
         * @param {?} el
         * @param {?} dragulaService
         */
        function DragulaDirective(el, dragulaService) {
          _classCallCheck(this, DragulaDirective);

          this.el = el;
          this.dragulaService = dragulaService;
          this.dragulaModelChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        }
        /**
         * @return {?}
         */


        _createClass(DragulaDirective, [{
          key: "ngOnChanges",

          /**
           * @param {?} changes
           * @return {?}
           */
          value: function ngOnChanges(changes) {
            if (changes && changes.dragula) {
              var _changes$dragula = changes.dragula,
                  prev = _changes$dragula.previousValue,
                  current = _changes$dragula.currentValue,
                  firstChange = _changes$dragula.firstChange;
              /** @type {?} */

              var hadPreviousValue = !!prev;
              /** @type {?} */

              var hasNewValue = !!current; // something -> null       =>  teardown only
              // something -> something  =>  teardown, then setup
              //      null -> something  =>  setup only
              //
              //      null -> null (precluded by fact of change being present)

              if (hadPreviousValue) {
                this.teardown(prev);
              }

              if (hasNewValue) {
                this.setup();
              }
            } else if (changes && changes.dragulaModel) {
              var _changes$dragulaModel = changes.dragulaModel,
                  _prev = _changes$dragulaModel.previousValue,
                  _current = _changes$dragulaModel.currentValue,
                  _firstChange = _changes$dragulaModel.firstChange;
              var drake = this.group.drake;

              if (this.dragula && drake) {
                drake.models = drake.models || [];
                /** @type {?} */

                var prevIndex = drake.models.indexOf(_prev);

                if (prevIndex !== -1) {
                  // delete the previous
                  drake.models.splice(prevIndex, 1); // maybe insert a new one at the same spot

                  if (!!_current) {
                    drake.models.splice(prevIndex, 0, _current);
                  }
                } else if (!!_current) {
                  // no previous one to remove; just push this one.
                  drake.models.push(_current);
                }
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "setup",
          value: function setup() {
            var _this34 = this;

            /** @type {?} */
            var checkModel = function checkModel(group) {
              if (_this34.dragulaModel) {
                if (group.drake.models) {
                  group.drake.models.push(_this34.dragulaModel);
                } else {
                  group.drake.models = [_this34.dragulaModel];
                }
              }
            };
            /** @type {?} */


            var group = this.dragulaService.find(this.dragula);

            if (!group) {
              /** @type {?} */
              var options = {};
              group = this.dragulaService.createGroup(this.dragula, options);
            } // ensure model and container element are pushed


            checkModel(group);
            group.drake.containers.push(this.container);
            this.subscribe(this.dragula);
            this.group = group;
          }
          /**
           * @param {?} name
           * @return {?}
           */

        }, {
          key: "subscribe",
          value: function subscribe(name) {
            var _this35 = this;

            this.subs = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"]();
            this.subs.add(this.dragulaService.dropModel(name).subscribe(function (_ref24) {
              var source = _ref24.source,
                  target = _ref24.target,
                  sourceModel = _ref24.sourceModel,
                  targetModel = _ref24.targetModel;

              if (source === _this35.el.nativeElement) {
                _this35.dragulaModelChange.emit(sourceModel);
              } else if (target === _this35.el.nativeElement) {
                _this35.dragulaModelChange.emit(targetModel);
              }
            }));
            this.subs.add(this.dragulaService.removeModel(name).subscribe(function (_ref25) {
              var source = _ref25.source,
                  sourceModel = _ref25.sourceModel;

              if (source === _this35.el.nativeElement) {
                _this35.dragulaModelChange.emit(sourceModel);
              }
            }));
          }
          /**
           * @param {?} groupName
           * @return {?}
           */

        }, {
          key: "teardown",
          value: function teardown(groupName) {
            if (this.subs) {
              this.subs.unsubscribe();
            }
            /** @type {?} */


            var group = this.dragulaService.find(groupName);

            if (group) {
              /** @type {?} */
              var itemToRemove = group.drake.containers.indexOf(this.el.nativeElement);

              if (itemToRemove !== -1) {
                group.drake.containers.splice(itemToRemove, 1);
              }

              if (this.dragulaModel && group.drake && group.drake.models) {
                /** @type {?} */
                var modelIndex = group.drake.models.indexOf(this.dragulaModel);

                if (modelIndex !== -1) {
                  group.drake.models.splice(modelIndex, 1);
                }
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.teardown(this.dragula);
          }
        }, {
          key: "container",
          get: function get() {
            return this.el && this.el.nativeElement;
          }
        }]);

        return DragulaDirective;
      }();

      DragulaDirective.ɵfac = function DragulaDirective_Factory(t) {
        return new (t || DragulaDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](DragulaService));
      };

      DragulaDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: DragulaDirective,
        selectors: [["", "dragula", ""]],
        inputs: {
          dragula: "dragula",
          dragulaModel: "dragulaModel"
        },
        outputs: {
          dragulaModelChange: "dragulaModelChange"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]]
      });
      /** @nocollapse */

      DragulaDirective.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
        }, {
          type: DragulaService
        }];
      };

      DragulaDirective.propDecorators = {
        dragula: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        dragulaModel: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }],
        dragulaModelChange: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
        }]
      };
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DragulaDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
          args: [{
            selector: '[dragula]'
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]
          }, {
            type: DragulaService
          }];
        }, {
          dragulaModelChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"]
          }],
          dragula: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }],
          dragulaModel: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
          }]
        });
      })();
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */


      var DragulaModule = /*#__PURE__*/function () {
        function DragulaModule() {
          _classCallCheck(this, DragulaModule);
        }

        _createClass(DragulaModule, null, [{
          key: "forRoot",

          /**
           * @return {?}
           */
          value: function forRoot() {
            return {
              ngModule: DragulaModule,
              providers: [DragulaService]
            };
          }
        }]);

        return DragulaModule;
      }();

      DragulaModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: DragulaModule
      });
      DragulaModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function DragulaModule_Factory(t) {
          return new (t || DragulaModule)();
        }
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](DragulaModule, {
          declarations: [DragulaDirective],
          exports: [DragulaDirective]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DragulaModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
          args: [{
            exports: [DragulaDirective],
            declarations: [DragulaDirective]
          }]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */

      /** @type {?} */


      var MockDrakeFactory = new DrakeFactory(function (containers, options) {
        return new MockDrake(containers, options);
      });
      /**
       * You can use MockDrake to simulate Drake events.
       *
       * The three methods that actually do anything are `on(event, listener)`,
       * `destroy()`, and a new method, `emit()`. Use `emit()` to manually emit Drake
       * events, and if you injected MockDrake properly with MockDrakeFactory or
       * mocked the DragulaService.find() method, then you can make ng2-dragula think
       * drags and drops are happening.
       *
       * Caveats:
       *
       * 1. YOU MUST MAKE THE DOM CHANGES YOURSELF.
       * 2. REPEAT: YOU MUST MAKE THE DOM CHANGES YOURSELF.
       *    That means `source.removeChild(el)`, and `target.insertBefore(el)`.
       * 3. None of the other methods do anything.
       *    That's ok, because ng2-dragula doesn't use them.
       */

      var MockDrake = /*#__PURE__*/function () {
        /**
         * @param {?=} containers A list of container elements.
         * @param {?=} options These will NOT be used. At all.
         * @param {?=} models Nonstandard, but useful for testing using `new MockDrake()` directly.
         *               Note, default value is undefined, like a real Drake. Don't change that.
         */
        function MockDrake() {
          var containers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var models = arguments.length > 2 ? arguments[2] : undefined;

          _classCallCheck(this, MockDrake);

          this.containers = containers;
          this.options = options;
          this.models = models;
          /* Doesn't represent anything meaningful. */

          this.dragging = false;
          this.emitter$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
          this.subs = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"]();
        }
        /**
         * @param {?} item
         * @return {?}
         */


        _createClass(MockDrake, [{
          key: "start",
          value: function start(item) {
            this.dragging = true;
          }
          /**
           * @return {?}
           */

        }, {
          key: "end",
          value: function end() {
            this.dragging = false;
          }
          /**
           * @param {?=} revert
           * @return {?}
           */

        }, {
          key: "cancel",
          value: function cancel(revert) {
            this.dragging = false;
          }
          /**
           * @return {?}
           */

        }, {
          key: "remove",
          value: function remove() {
            this.dragging = false;
          }
          /**
           * @param {?} event
           * @param {?} callback
           * @return {?}
           */

        }, {
          key: "on",
          value: function on(event, callback) {
            this.subs.add(this.emitter$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function (_ref26) {
              var eventType = _ref26.eventType;
              return eventType === event;
            })).subscribe(function (_ref27) {
              var args = _ref27.args;
              callback.apply(void 0, _toConsumableArray(args));
            }));
          }
          /**
           * @return {?}
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.subs.unsubscribe();
          }
          /**
           * This is the most useful method. You can use it to manually fire events that would normally
           * be fired by a real drake.
           *
           * You're likely most interested in firing `drag`, `remove` and `drop`, the three events
           * DragulaService uses to implement [dragulaModel].
           *
           * See https://github.com/bevacqua/dragula#drakeon-events for what you should emit (and in what order).
           *
           * (Note also, firing dropModel and removeModel won't work. You would have to mock DragulaService for that.)
           * @param {?} eventType
           * @param {...?} args
           * @return {?}
           */

        }, {
          key: "emit",
          value: function emit(eventType) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            this.emitter$.next({
              eventType: eventType,
              args: args
            });
          }
        }]);

        return MockDrake;
      }();
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes} checked by tsc
       */
      //# sourceMappingURL=data:application/json;charset=utf-8;base64,

      /***/

    },

    /***/
    "./node_modules/ticky/ticky-browser.js":
    /*!*********************************************!*\
      !*** ./node_modules/ticky/ticky-browser.js ***!
      \*********************************************/

    /*! no static exports found */

    /***/
    function node_modulesTickyTickyBrowserJs(module, exports) {
      var si = typeof setImmediate === 'function',
          tick;

      if (si) {
        tick = function tick(fn) {
          setImmediate(fn);
        };
      } else {
        tick = function tick(fn) {
          setTimeout(fn, 0);
        };
      }

      module.exports = tick;
      /***/
    },

    /***/
    "./src/app/apps/apps-routing.module.ts":
    /*!*********************************************!*\
      !*** ./src/app/apps/apps-routing.module.ts ***!
      \*********************************************/

    /*! exports provided: AppsRoutingModule */

    /***/
    function srcAppAppsAppsRoutingModuleTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppsRoutingModule", function () {
        return AppsRoutingModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var _calendar_calendar_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./calendar/calendar.component */
      "./src/app/apps/calendar/calendar.component.ts");
      /* harmony import */


      var _chat_chat_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./chat/chat.component */
      "./src/app/apps/chat/chat.component.ts");
      /* harmony import */


      var _contact_grid_contact_grid_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./contact-grid/contact-grid.component */
      "./src/app/apps/contact-grid/contact-grid.component.ts");
      /* harmony import */


      var _contact_list_contact_list_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./contact-list/contact-list.component */
      "./src/app/apps/contact-list/contact-list.component.ts");
      /* harmony import */


      var _support_support_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./support/support.component */
      "./src/app/apps/support/support.component.ts");
      /* harmony import */


      var _drag_drop_drag_drop_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./drag-drop/drag-drop.component */
      "./src/app/apps/drag-drop/drag-drop.component.ts");
      /* harmony import */


      var _task_task_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./task/task.component */
      "./src/app/apps/task/task.component.ts");

      var routes = [{
        path: 'calendar',
        component: _calendar_calendar_component__WEBPACK_IMPORTED_MODULE_2__["CalendarComponent"]
      }, {
        path: 'task',
        component: _task_task_component__WEBPACK_IMPORTED_MODULE_8__["TaskComponent"]
      }, {
        path: 'chat',
        component: _chat_chat_component__WEBPACK_IMPORTED_MODULE_3__["ChatComponent"]
      }, {
        path: 'contact-grid',
        component: _contact_grid_contact_grid_component__WEBPACK_IMPORTED_MODULE_4__["ContactGridComponent"]
      }, {
        path: 'contact-list',
        component: _contact_list_contact_list_component__WEBPACK_IMPORTED_MODULE_5__["ContactListComponent"]
      }, {
        path: 'support',
        component: _support_support_component__WEBPACK_IMPORTED_MODULE_6__["SupportComponent"]
      }, {
        path: 'dragdrop',
        component: _drag_drop_drag_drop_component__WEBPACK_IMPORTED_MODULE_7__["DragDropComponent"]
      }];

      var AppsRoutingModule = function AppsRoutingModule() {
        _classCallCheck(this, AppsRoutingModule);
      };

      AppsRoutingModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: AppsRoutingModule
      });
      AppsRoutingModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function AppsRoutingModule_Factory(t) {
          return new (t || AppsRoutingModule)();
        },
        imports: [[_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forChild(routes)], _angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](AppsRoutingModule, {
          imports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]],
          exports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AppsRoutingModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forChild(routes)],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]]
          }]
        }], null, null);
      })();
      /***/

    },

    /***/
    "./src/app/apps/apps.module.ts":
    /*!*************************************!*\
      !*** ./src/app/apps/apps.module.ts ***!
      \*************************************/

    /*! exports provided: AppsModule */

    /***/
    function srcAppAppsAppsModuleTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "AppsModule", function () {
        return AppsModule;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/common */
      "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
      /* harmony import */


      var ng2_dragula__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ng2-dragula */
      "./node_modules/ng2-dragula/__ivy_ngcc__/dist/fesm2015/ng2-dragula.js");
      /* harmony import */


      var ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ngx-perfect-scrollbar */
      "./node_modules/ngx-perfect-scrollbar/__ivy_ngcc__/fesm2015/ngx-perfect-scrollbar.js");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
      /* harmony import */


      var _apps_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./apps-routing.module */
      "./src/app/apps/apps-routing.module.ts");
      /* harmony import */


      var _calendar_calendar_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./calendar/calendar.component */
      "./src/app/apps/calendar/calendar.component.ts");
      /* harmony import */


      var _chat_chat_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./chat/chat.component */
      "./src/app/apps/chat/chat.component.ts");
      /* harmony import */


      var _drag_drop_drag_drop_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./drag-drop/drag-drop.component */
      "./src/app/apps/drag-drop/drag-drop.component.ts");
      /* harmony import */


      var _contact_list_contact_list_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./contact-list/contact-list.component */
      "./src/app/apps/contact-list/contact-list.component.ts");
      /* harmony import */


      var _contact_grid_contact_grid_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ./contact-grid/contact-grid.component */
      "./src/app/apps/contact-grid/contact-grid.component.ts");
      /* harmony import */


      var _support_support_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ./support/support.component */
      "./src/app/apps/support/support.component.ts");
      /* harmony import */


      var _fullcalendar_angular__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @fullcalendar/angular */
      "./node_modules/@fullcalendar/angular/__ivy_ngcc__/fesm2015/fullcalendar-angular.js");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @angular/material/button */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");
      /* harmony import */


      var _swimlane_ngx_datatable__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @swimlane/ngx-datatable */
      "./node_modules/@swimlane/ngx-datatable/__ivy_ngcc__/fesm2015/swimlane-ngx-datatable.js");
      /* harmony import */


      var _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! @angular/material/datepicker */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/datepicker.js");
      /* harmony import */


      var _angular_material_table__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(
      /*! @angular/material/table */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/table.js");
      /* harmony import */


      var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(
      /*! @angular/material/paginator */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/paginator.js");
      /* harmony import */


      var _angular_material_icon__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(
      /*! @angular/material/icon */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js");
      /* harmony import */


      var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(
      /*! @angular/material/snack-bar */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js");
      /* harmony import */


      var _angular_material_select__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(
      /*! @angular/material/select */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js");
      /* harmony import */


      var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(
      /*! @angular/material/checkbox */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js");
      /* harmony import */


      var _angular_material_input__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(
      /*! @angular/material/input */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js");
      /* harmony import */


      var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(
      /*! @angular/material/tooltip */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js");
      /* harmony import */


      var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(
      /*! @angular/material/sidenav */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/sidenav.js");
      /* harmony import */


      var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(
      /*! @angular/cdk/drag-drop */
      "./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js");
      /* harmony import */


      var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(
      /*! @angular/material/dialog */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js");
      /* harmony import */


      var _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(
      /*! @angular-material-components/datetime-picker */
      "./node_modules/@angular-material-components/datetime-picker/__ivy_ngcc__/fesm2015/angular-material-components-datetime-picker.js");
      /* harmony import */


      var _angular_material_radio__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(
      /*! @angular/material/radio */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js");
      /* harmony import */


      var _calendar_dialogs_form_dialog_form_dialog_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(
      /*! ./calendar/dialogs/form-dialog/form-dialog.component */
      "./src/app/apps/calendar/dialogs/form-dialog/form-dialog.component.ts");
      /* harmony import */


      var _task_task_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(
      /*! ./task/task.component */
      "./src/app/apps/task/task.component.ts");

      var AppsModule = function AppsModule() {
        _classCallCheck(this, AppsModule);
      };

      AppsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: AppsModule
      });
      AppsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
        factory: function AppsModule_Factory(t) {
          return new (t || AppsModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _apps_routing_module__WEBPACK_IMPORTED_MODULE_5__["AppsRoutingModule"], _fullcalendar_angular__WEBPACK_IMPORTED_MODULE_12__["FullCalendarModule"], ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_3__["PerfectScrollbarModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_13__["MatButtonModule"], _swimlane_ngx_datatable__WEBPACK_IMPORTED_MODULE_14__["NgxDatatableModule"], _angular_material_table__WEBPACK_IMPORTED_MODULE_16__["MatTableModule"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_17__["MatPaginatorModule"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_18__["MatIconModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_20__["MatSelectModule"], _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_21__["MatCheckboxModule"], _angular_material_input__WEBPACK_IMPORTED_MODULE_22__["MatInputModule"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_26__["MatDialogModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_23__["MatTooltipModule"], _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_24__["MatSidenavModule"], _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_25__["DragDropModule"], _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_15__["MatDatepickerModule"], _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_19__["MatSnackBarModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_27__["NgxMatDatetimePickerModule"], _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_27__["NgxMatTimepickerModule"], _angular_material_radio__WEBPACK_IMPORTED_MODULE_28__["MatRadioModule"], ng2_dragula__WEBPACK_IMPORTED_MODULE_2__["DragulaModule"].forRoot()]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](AppsModule, {
          declarations: [_calendar_calendar_component__WEBPACK_IMPORTED_MODULE_6__["CalendarComponent"], _chat_chat_component__WEBPACK_IMPORTED_MODULE_7__["ChatComponent"], _drag_drop_drag_drop_component__WEBPACK_IMPORTED_MODULE_8__["DragDropComponent"], _contact_list_contact_list_component__WEBPACK_IMPORTED_MODULE_9__["ContactListComponent"], _contact_grid_contact_grid_component__WEBPACK_IMPORTED_MODULE_10__["ContactGridComponent"], _support_support_component__WEBPACK_IMPORTED_MODULE_11__["SupportComponent"], _calendar_dialogs_form_dialog_form_dialog_component__WEBPACK_IMPORTED_MODULE_29__["FormDialogComponent"], _task_task_component__WEBPACK_IMPORTED_MODULE_30__["TaskComponent"]],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _apps_routing_module__WEBPACK_IMPORTED_MODULE_5__["AppsRoutingModule"], _fullcalendar_angular__WEBPACK_IMPORTED_MODULE_12__["FullCalendarModule"], ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_3__["PerfectScrollbarModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_13__["MatButtonModule"], _swimlane_ngx_datatable__WEBPACK_IMPORTED_MODULE_14__["NgxDatatableModule"], _angular_material_table__WEBPACK_IMPORTED_MODULE_16__["MatTableModule"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_17__["MatPaginatorModule"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_18__["MatIconModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_20__["MatSelectModule"], _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_21__["MatCheckboxModule"], _angular_material_input__WEBPACK_IMPORTED_MODULE_22__["MatInputModule"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_26__["MatDialogModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_23__["MatTooltipModule"], _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_24__["MatSidenavModule"], _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_25__["DragDropModule"], _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_15__["MatDatepickerModule"], _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_19__["MatSnackBarModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_27__["NgxMatDatetimePickerModule"], _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_27__["NgxMatTimepickerModule"], _angular_material_radio__WEBPACK_IMPORTED_MODULE_28__["MatRadioModule"], ng2_dragula__WEBPACK_IMPORTED_MODULE_2__["DragulaModule"]]
        });
      })();
      /*@__PURE__*/


      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AppsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [_calendar_calendar_component__WEBPACK_IMPORTED_MODULE_6__["CalendarComponent"], _chat_chat_component__WEBPACK_IMPORTED_MODULE_7__["ChatComponent"], _drag_drop_drag_drop_component__WEBPACK_IMPORTED_MODULE_8__["DragDropComponent"], _contact_list_contact_list_component__WEBPACK_IMPORTED_MODULE_9__["ContactListComponent"], _contact_grid_contact_grid_component__WEBPACK_IMPORTED_MODULE_10__["ContactGridComponent"], _support_support_component__WEBPACK_IMPORTED_MODULE_11__["SupportComponent"], _calendar_dialogs_form_dialog_form_dialog_component__WEBPACK_IMPORTED_MODULE_29__["FormDialogComponent"], _task_task_component__WEBPACK_IMPORTED_MODULE_30__["TaskComponent"]],
            imports: [_angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"], _apps_routing_module__WEBPACK_IMPORTED_MODULE_5__["AppsRoutingModule"], _fullcalendar_angular__WEBPACK_IMPORTED_MODULE_12__["FullCalendarModule"], ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_3__["PerfectScrollbarModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_13__["MatButtonModule"], _swimlane_ngx_datatable__WEBPACK_IMPORTED_MODULE_14__["NgxDatatableModule"], _angular_material_table__WEBPACK_IMPORTED_MODULE_16__["MatTableModule"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_17__["MatPaginatorModule"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_18__["MatIconModule"], _angular_material_select__WEBPACK_IMPORTED_MODULE_20__["MatSelectModule"], _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_21__["MatCheckboxModule"], _angular_material_input__WEBPACK_IMPORTED_MODULE_22__["MatInputModule"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_26__["MatDialogModule"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_23__["MatTooltipModule"], _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_24__["MatSidenavModule"], _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_25__["DragDropModule"], _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_15__["MatDatepickerModule"], _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_19__["MatSnackBarModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["FormsModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_4__["ReactiveFormsModule"], _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_27__["NgxMatDatetimePickerModule"], _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_27__["NgxMatTimepickerModule"], _angular_material_radio__WEBPACK_IMPORTED_MODULE_28__["MatRadioModule"], ng2_dragula__WEBPACK_IMPORTED_MODULE_2__["DragulaModule"].forRoot()]
          }]
        }], null, null);
      })();
      /***/

    },

    /***/
    "./src/app/apps/calendar/calendar.component.ts":
    /*!*****************************************************!*\
      !*** ./src/app/apps/calendar/calendar.component.ts ***!
      \*****************************************************/

    /*! exports provided: CalendarComponent */

    /***/
    function srcAppAppsCalendarCalendarComponentTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "CalendarComponent", function () {
        return CalendarComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @fullcalendar/daygrid */
      "./node_modules/@fullcalendar/daygrid/main.esm.js");
      /* harmony import */


      var _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @fullcalendar/timegrid */
      "./node_modules/@fullcalendar/timegrid/main.esm.js");
      /* harmony import */


      var _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @fullcalendar/interaction */
      "./node_modules/@fullcalendar/interaction/main.esm.js");
      /* harmony import */


      var _fullcalendar_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @fullcalendar/list */
      "./node_modules/@fullcalendar/list/main.esm.js");
      /* harmony import */


      var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/dialog */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/forms */
      "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
      /* harmony import */


      var _calendar_model__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./calendar.model */
      "./src/app/apps/calendar/calendar.model.ts");
      /* harmony import */


      var _dialogs_form_dialog_form_dialog_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./dialogs/form-dialog/form-dialog.component */
      "./src/app/apps/calendar/dialogs/form-dialog/form-dialog.component.ts");
      /* harmony import */


      var _calendar_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./calendar.service */
      "./src/app/apps/calendar/calendar.service.ts");
      /* harmony import */


      var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/material/snack-bar */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/material/button */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");
      /* harmony import */


      var _angular_material_radio__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @angular/material/radio */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! @angular/common */
      "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
      /* harmony import */


      var _fullcalendar_angular__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! @fullcalendar/angular */
      "./node_modules/@fullcalendar/angular/__ivy_ngcc__/fesm2015/fullcalendar-angular.js");

      var _c0 = ["calendar"];
      var _c1 = ["callAPIDialog"];

      function CalendarComponent_mat_radio_button_33_Template(rf, ctx) {
        if (rf & 1) {
          var _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mat-radio-button", 27);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function CalendarComponent_mat_radio_button_33_Template_mat_radio_button_change_0_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r4);

            var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r3.changeCategory($event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var filter_r2 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", filter_r2.name)("checked", filter_r2.checked === "true");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", filter_r2.value, " ");
        }
      }

      var _c2 = function _c2() {
        return {
          left: "prev,next today",
          center: "title",
          right: "dayGridMonth,timeGridWeek,timeGridDay,listWeek"
        };
      };

      var d = new Date();
      var day = d.getDate();
      var month = d.getMonth();
      var year = d.getFullYear();

      var CalendarComponent = /*#__PURE__*/function () {
        function CalendarComponent(fb, dialog, calendarService, snackBar) {
          _classCallCheck(this, CalendarComponent);

          this.fb = fb;
          this.dialog = dialog;
          this.calendarService = calendarService;
          this.snackBar = snackBar;
          this.filterOptions = "All";
          this.filters = [{
            name: 'all',
            value: 'All',
            checked: 'true'
          }, {
            name: 'work',
            value: 'Work',
            checked: 'false'
          }, {
            name: 'personal',
            value: 'Personal',
            checked: 'false'
          }, {
            name: 'important',
            value: 'Important',
            checked: 'false'
          }, {
            name: 'travel',
            value: 'Travel',
            checked: 'false'
          }, {
            name: 'friends',
            value: 'Friends',
            checked: 'false'
          }];
          this.calendarVisible = true;
          this.calendarPlugins = [_fullcalendar_daygrid__WEBPACK_IMPORTED_MODULE_1__["default"], _fullcalendar_timegrid__WEBPACK_IMPORTED_MODULE_2__["default"], _fullcalendar_interaction__WEBPACK_IMPORTED_MODULE_3__["default"], _fullcalendar_list__WEBPACK_IMPORTED_MODULE_4__["default"]];
          this.calendarWeekends = true;
          this.dialogTitle = 'Add New Event';
          this.calendar = new _calendar_model__WEBPACK_IMPORTED_MODULE_7__["Calendar"]({});
          this.addCusForm = this.createContactForm(this.calendar);
        }

        _createClass(CalendarComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.calendarEvents = this.events();
            this.tempEvents = this.calendarEvents; // you can also get events from json file using following code
            // this.calendarService.getAllCalendars().subscribe((data: Calendar[]) => {
            //   this.calendarEvents = data;
            // })
          }
        }, {
          key: "createContactForm",
          value: function createContactForm(calendar) {
            return this.fb.group({
              id: [calendar.id],
              title: [calendar.title, [_angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].pattern('[a-zA-Z]+([a-zA-Z ]+)*')]],
              category: [calendar.category],
              startDate: [calendar.startDate, [_angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required]],
              endDate: [calendar.endDate, [_angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required]],
              details: [calendar.details, [_angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].pattern('[a-zA-Z]+([a-zA-Z ]+)*')]]
            });
          }
        }, {
          key: "addNewEvent",
          value: function addNewEvent() {
            var _this36 = this;

            var dialogRef = this.dialog.open(_dialogs_form_dialog_form_dialog_component__WEBPACK_IMPORTED_MODULE_8__["FormDialogComponent"], {
              data: {
                calendar: this.calendar,
                action: 'add'
              }
            });
            dialogRef.afterClosed().subscribe(function (result) {
              if (result === "submit") {
                _this36.calendarData = _this36.calendarService.getDialogData();
                _this36.calendarEvents = _this36.calendarEvents.concat({
                  id: _this36.calendarData.id,
                  title: _this36.calendarData.title,
                  start: _this36.calendarData.startDate,
                  end: _this36.calendarData.endDate,
                  className: _this36.calendarData.category,
                  groupId: _this36.calendarData.category,
                  details: _this36.calendarData.details
                });

                _this36.addCusForm.reset();

                _this36.showNotification('snackbar-success', 'Add Record Successfully...!!!', 'bottom', 'center');
              }
            });
          }
        }, {
          key: "eventClick",
          value: function eventClick(row) {
            var _this37 = this;

            var calendarData = {
              id: row.event.id,
              title: row.event.title,
              category: row.event.groupId,
              startDate: row.event.start,
              endDate: row.event.end,
              details: row.event.extendedProps.details
            };
            var dialogRef = this.dialog.open(_dialogs_form_dialog_form_dialog_component__WEBPACK_IMPORTED_MODULE_8__["FormDialogComponent"], {
              data: {
                calendar: calendarData,
                action: 'edit'
              }
            });
            dialogRef.afterClosed().subscribe(function (result) {
              if (result === "submit") {
                _this37.calendarData = _this37.calendarService.getDialogData();

                _this37.calendarEvents.forEach(function (element, index) {
                  if (this.calendarData.id === element.id) {
                    this.editEvent(index, this.calendarData);
                  }
                }, _this37);

                _this37.showNotification('black', 'Edit Record Successfully...!!!', 'bottom', 'center');

                _this37.addCusForm.reset();
              } else if (result === "delete") {
                _this37.calendarData = _this37.calendarService.getDialogData();

                _this37.calendarEvents.forEach(function (element, index) {
                  if (this.calendarData.id === element.id) {
                    this.filterEvent(element);
                  }
                }, _this37);

                _this37.showNotification('snackbar-danger', 'Delete Record Successfully...!!!', 'bottom', 'center');
              }
            });
          }
        }, {
          key: "editEvent",
          value: function editEvent(eventIndex, calendarData) {
            var calendarEvents = this.calendarEvents.slice();
            var singleEvent = Object.assign({}, calendarEvents[eventIndex]);
            singleEvent.id = calendarData.id;
            singleEvent.title = calendarData.title;
            singleEvent.start = calendarData.startDate;
            singleEvent.end = calendarData.endDate;
            singleEvent.className = this.getClassNameValue(calendarData.category);
            singleEvent.groupId = calendarData.category;
            singleEvent.details = calendarData.details;
            calendarEvents[eventIndex] = singleEvent;
            this.calendarEvents = calendarEvents; // reassign the array
          }
        }, {
          key: "handleEventRender",
          value: function handleEventRender(info) {// console.log(info)
            // this.todaysEvents = this.todaysEvents.concat(info);
          }
        }, {
          key: "changeCategory",
          value: function changeCategory(e) {
            this.filterOptions = e.value;
            this.calendarEvents = this.tempEvents;
            this.calendarEvents.forEach(function (element, index) {
              if (this.filterOptions !== "all" && this.filterOptions.toLowerCase() !== element.groupId) {
                this.filterEvent(element);
              }
            }, this);
          }
        }, {
          key: "filterEvent",
          value: function filterEvent(element) {
            this.calendarEvents = this.calendarEvents.filter(function (item) {
              return item !== element;
            });
          }
        }, {
          key: "submit",
          value: function submit() {// emppty stuff
          }
        }, {
          key: "onNoClick",
          value: function onNoClick() {}
        }, {
          key: "showNotification",
          value: function showNotification(colorName, text, placementFrom, placementAlign) {
            this.snackBar.open(text, '', {
              duration: 2000,
              verticalPosition: placementFrom,
              horizontalPosition: placementAlign,
              panelClass: colorName
            });
          }
        }, {
          key: "randomIDGenerate",
          value: function randomIDGenerate(length, chars) {
            var result = "";

            for (var i = length; i > 0; --i) {
              result += chars[Math.round(Math.random() * (chars.length - 1))];
            }

            return result;
          }
        }, {
          key: "getClassNameValue",
          value: function getClassNameValue(category) {
            var className;
            if (category === "work") className = "fc-event-success";else if (category === "personal") className = "fc-event-warning";else if (category === "important") className = "fc-event-primary";else if (category === "travel") className = "fc-event-danger";else if (category === "friends") className = "fc-event-info";
            return className;
          }
        }, {
          key: "events",
          value: function events() {
            return [{
              id: "event1",
              title: "All Day Event",
              start: new Date(year, month, 1, 0, 0),
              end: new Date(year, month, 1, 23, 59),
              className: "fc-event-success",
              groupId: "work",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see."
            }, {
              id: "event2",
              title: "Break",
              start: new Date(year, month, day + 28, 16, 0),
              end: new Date(year, month, day + 29, 20, 0),
              allDay: false,
              className: "fc-event-primary",
              groupId: "important",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see. "
            }, {
              id: "event3",
              title: "Shopping",
              start: new Date(year, month, day + 4, 12, 0),
              end: new Date(year, month, day + 4, 20, 0),
              allDay: false,
              className: "fc-event-warning",
              groupId: "personal",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see. "
            }, {
              id: "event4",
              title: "Meeting",
              start: new Date(year, month, day + 14, 10, 30),
              end: new Date(year, month, day + 16, 20, 0),
              allDay: false,
              className: "fc-event-success",
              groupId: "work",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see."
            }, {
              id: "event5",
              title: "Lunch",
              start: new Date(year, month, day, 11, 0),
              end: new Date(year, month, day, 14, 0),
              allDay: false,
              className: "fc-event-primary",
              groupId: "important",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see."
            }, {
              id: "event6",
              title: "Meeting",
              start: new Date(year, month, day + 2, 12, 30),
              end: new Date(year, month, day + 2, 14, 30),
              allDay: false,
              className: "fc-event-success",
              groupId: "work",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see."
            }, {
              id: "event7",
              title: "Birthday Party",
              start: new Date(year, month, day + 17, 19, 0),
              end: new Date(year, month, day + 17, 19, 30),
              allDay: false,
              className: "fc-event-warning",
              groupId: "personal",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see."
            }, {
              id: "event8",
              title: "Go to Delhi",
              start: new Date(year, month, day + -5, 10, 0),
              end: new Date(year, month, day + -4, 10, 30),
              allDay: false,
              className: "fc-event-danger",
              groupId: "travel",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see."
            }, {
              id: "event9",
              title: "Get To Gather",
              start: new Date(year, month, day + 6, 10, 0),
              end: new Date(year, month, day + 7, 10, 30),
              allDay: false,
              className: "fc-event-info",
              groupId: "friends",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see."
            }, {
              id: "event10",
              title: "Collage Party",
              start: new Date(year, month, day + 20, 10, 0),
              end: new Date(year, month, day + 20, 10, 30),
              allDay: false,
              className: "fc-event-info",
              groupId: "friends",
              details: "Her extensive perceived may any sincerity extremity. Indeed add rather may pretty see."
            }];
          }
        }]);

        return CalendarComponent;
      }();

      CalendarComponent.ɵfac = function CalendarComponent_Factory(t) {
        return new (t || CalendarComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__["MatDialog"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_calendar_service__WEBPACK_IMPORTED_MODULE_9__["CalendarService"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_10__["MatSnackBar"]));
      };

      CalendarComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: CalendarComponent,
        selectors: [["app-calendar"]],
        viewQuery: function CalendarComponent_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c0, true);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c1, true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.calendar = _t.first);
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.callAPIDialog = _t.first);
          }
        },
        decls: 38,
        vars: 6,
        consts: [[1, "content"], [1, "container-fluid"], [1, "block-header"], [1, "row"], [1, "col-xs-12", "col-sm-12", "col-md-12", "col-lg-12"], [1, "breadcrumb", "breadcrumb-style"], [1, "breadcrumb-item"], [1, "page-title"], [1, "breadcrumb-item", "bcrumb-1"], ["routerLink", "/dashboard/main"], [1, "fas", "fa-home"], [1, "breadcrumb-item", "active"], [1, "col-md-12", "col-sm-12"], [1, "card"], [1, "card-header", "container-fluid"], [1, "col-md-10"], [1, "card-body"], [1, "col-md-2", "col-sm-12", "p-l-30"], [1, "m-b-25"], ["mat-raised-button", "", "color", "primary", 3, "click"], [1, "filter-container"], ["aria-labelledby", "example-radio-group-label", 1, "example-radio-group"], ["class", "example-radio-button ml-0 filter", 3, "value", "checked", "change", 4, "ngFor", "ngForOf"], [1, "col-md-10", "col-sm-12"], [1, "panel-body"], ["defaultView", "dayGridMonth", 3, "header", "plugins", "weekends", "events", "eventRender", "eventClick", "dateClick"], ["calendar", ""], [1, "example-radio-button", "ml-0", "filter", 3, "value", "checked", "change"]],
        template: function CalendarComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "section", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "ul", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "h4", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8, "Events");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12, " Home");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](14, "Events");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "div", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](17, "div", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "h4");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](22, "Calendar");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](25, "div", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](26, "div", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "button", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function CalendarComponent_Template_button_click_27_listener() {
              return ctx.addNewEvent();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](28, "Add Event");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](30, "My Calendars");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "div", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](32, "mat-radio-group", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](33, CalendarComponent_mat_radio_button_33_Template, 2, 3, "mat-radio-button", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](34, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "full-calendar", 25, 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("eventRender", function CalendarComponent_Template_full_calendar_eventRender_36_listener($event) {
              return ctx.handleEventRender($event);
            })("eventClick", function CalendarComponent_Template_full_calendar_eventClick_36_listener($event) {
              return ctx.eventClick($event);
            })("dateClick", function CalendarComponent_Template_full_calendar_dateClick_36_listener() {
              return ctx.addNewEvent();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.filters);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("header", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction0"](5, _c2))("plugins", ctx.calendarPlugins)("weekends", ctx.calendarWeekends)("events", ctx.calendarEvents);
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_11__["RouterLinkWithHref"], _angular_material_button__WEBPACK_IMPORTED_MODULE_12__["MatButton"], _angular_material_radio__WEBPACK_IMPORTED_MODULE_13__["MatRadioGroup"], _angular_common__WEBPACK_IMPORTED_MODULE_14__["NgForOf"], _fullcalendar_angular__WEBPACK_IMPORTED_MODULE_15__["FullCalendarComponent"], _angular_material_radio__WEBPACK_IMPORTED_MODULE_13__["MatRadioButton"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcHMvY2FsZW5kYXIvY2FsZW5kYXIuY29tcG9uZW50LnNjc3MifQ== */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CalendarComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-calendar',
            templateUrl: './calendar.component.html',
            styleUrls: ['./calendar.component.scss']
          }]
        }], function () {
          return [{
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"]
          }, {
            type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__["MatDialog"]
          }, {
            type: _calendar_service__WEBPACK_IMPORTED_MODULE_9__["CalendarService"]
          }, {
            type: _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_10__["MatSnackBar"]
          }];
        }, {
          calendar: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
            args: ['calendar', {
              "static": false
            }]
          }],
          callAPIDialog: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
            args: ['callAPIDialog', {
              "static": false
            }]
          }]
        });
      })();
      /***/

    },

    /***/
    "./src/app/apps/calendar/calendar.model.ts":
    /*!*************************************************!*\
      !*** ./src/app/apps/calendar/calendar.model.ts ***!
      \*************************************************/

    /*! exports provided: Calendar */

    /***/
    function srcAppAppsCalendarCalendarModelTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "Calendar", function () {
        return Calendar;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");

      var Calendar = /*#__PURE__*/function () {
        function Calendar(calendar) {
          _classCallCheck(this, Calendar);

          {
            this.id = calendar.id || this.getRandomID();
            this.title = calendar.title || '';
            this.category = calendar.category || '';
            this.startDate = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["formatDate"])(new Date(), 'yyyy-MM-dd', 'en') || '';
            this.endDate = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["formatDate"])(new Date(), 'yyyy-MM-dd', 'en') || '';
            this.details = calendar.details || '';
          }
        }

        _createClass(Calendar, [{
          key: "getRandomID",
          value: function getRandomID() {
            var S4 = function S4() {
              return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
            };

            return S4() + S4();
          }
        }]);

        return Calendar;
      }();
      /***/

    },

    /***/
    "./src/app/apps/calendar/dialogs/form-dialog/form-dialog.component.ts":
    /*!****************************************************************************!*\
      !*** ./src/app/apps/calendar/dialogs/form-dialog/form-dialog.component.ts ***!
      \****************************************************************************/

    /*! exports provided: FormDialogComponent */

    /***/
    function srcAppAppsCalendarDialogsFormDialogFormDialogComponentTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "FormDialogComponent", function () {
        return FormDialogComponent;
      });
      /* harmony import */


      var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/material/dialog */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _calendar_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../../calendar.service */
      "./src/app/apps/calendar/calendar.service.ts");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/forms */
      "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
      /* harmony import */


      var _calendar_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ../../calendar.model */
      "./src/app/apps/calendar/calendar.model.ts");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/button */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");
      /* harmony import */


      var _angular_material_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/icon */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js");
      /* harmony import */


      var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/material/form-field */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/form-field.js");
      /* harmony import */


      var _angular_material_input__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/input */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js");
      /* harmony import */


      var _angular_material_select__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/material/select */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/material/core */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular-material-components/datetime-picker */
      "./node_modules/@angular-material-components/datetime-picker/__ivy_ngcc__/fesm2015/angular-material-components-datetime-picker.js");
      /* harmony import */


      var _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/material/datepicker */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/datepicker.js");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @angular/common */
      "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");

      function FormDialogComponent_div_67_Template(rf, ctx) {
        if (rf & 1) {
          var _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 24);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "button", 29);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function FormDialogComponent_div_67_Template_button_click_1_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r4);

            var ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();

            return ctx_r3.deleteEvent();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "mat-icon", 30);

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "delete");

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        }
      }

      var FormDialogComponent = /*#__PURE__*/function () {
        function FormDialogComponent(dialogRef, data, calendarService, fb) {
          _classCallCheck(this, FormDialogComponent);

          this.dialogRef = dialogRef;
          this.data = data;
          this.calendarService = calendarService;
          this.fb = fb;
          this.showDeleteBtn = false;
          this.formControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required // Validators.email,
          ]); // Set the defaults

          this.action = data.action;

          if (this.action === 'edit') {
            this.dialogTitle = data.calendar.title;
            this.calendar = data.calendar;
            this.showDeleteBtn = true;
          } else {
            this.dialogTitle = 'New Event';
            this.calendar = new _calendar_model__WEBPACK_IMPORTED_MODULE_4__["Calendar"]({});
            this.showDeleteBtn = false;
          }

          this.calendarForm = this.createContactForm();
        }

        _createClass(FormDialogComponent, [{
          key: "getErrorMessage",
          value: function getErrorMessage() {
            return this.formControl.hasError('required') ? 'Required field' : this.formControl.hasError('email') ? 'Not a valid email' : '';
          }
        }, {
          key: "createContactForm",
          value: function createContactForm() {
            return this.fb.group({
              id: [this.calendar.id],
              title: [this.calendar.title, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required]],
              category: [this.calendar.category],
              startDate: [this.calendar.startDate, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required]],
              endDate: [this.calendar.endDate, [_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required]],
              details: [this.calendar.details]
            });
          }
        }, {
          key: "submit",
          value: function submit() {// emppty stuff
          }
        }, {
          key: "deleteEvent",
          value: function deleteEvent() {
            this.calendarService.deleteCalendar(this.calendarForm.getRawValue());
            this.dialogRef.close('delete');
          }
        }, {
          key: "onNoClick",
          value: function onNoClick() {
            this.dialogRef.close();
          }
        }, {
          key: "confirmAdd",
          value: function confirmAdd() {
            this.calendarService.addUpdateCalendar(this.calendarForm.getRawValue());
            this.dialogRef.close('submit');
          }
        }]);

        return FormDialogComponent;
      }();

      FormDialogComponent.ɵfac = function FormDialogComponent_Factory(t) {
        return new (t || FormDialogComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_0__["MatDialogRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_material_dialog__WEBPACK_IMPORTED_MODULE_0__["MAT_DIALOG_DATA"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_calendar_service__WEBPACK_IMPORTED_MODULE_2__["CalendarService"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"]));
      };

      FormDialogComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
        type: FormDialogComponent,
        selectors: [["app-form-dialog"]],
        decls: 68,
        vars: 14,
        consts: [[1, "addContainer"], [1, "modalHeader"], [1, "editRowModal"], [1, "modalHeader", "clearfix"], [1, "modal-about"], [1, "font-weight-bold", "p-t-5", "p-l-10", "font-17"], ["mat-icon-button", "", "aria-label", "Close dialog", 3, "click"], ["mat-dialog-content", ""], [1, "register-form", "m-4", 3, "formGroup"], [1, "row"], [1, "col-xl-12", "col-lg-12", "col-md-12", "col-sm-12"], ["appearance", "outline", 1, "example-full-width", "mb-3"], ["matInput", "", "formControlName", "title", "required", ""], ["matSuffix", ""], ["formControlName", "category", "required", ""], [3, "value"], [1, "col-xl-6", "col-lg-6", "col-md-12", "col-sm-12"], ["matInput", "", "placeholder", "Choose a date", "formControlName", "startDate", 3, "ngxMatDatetimePicker"], ["matSuffix", "", 3, "for"], ["picker1", ""], ["matInput", "", "placeholder", "Choose a date", "formControlName", "endDate", 3, "ngxMatDatetimePicker"], ["picker2", ""], ["matInput", "", "formControlName", "details"], [1, "col-xl-10", "col-lg-10", "col-md-12", "col-sm-12"], [1, "example-button-row"], ["mat-raised-button", "", "color", "primary", 3, "type", "disabled", "click"], ["mat-raised-button", "", "color", "warn", "tabindex", "-1", 3, "click"], [1, "col-xl-2", "col-lg-2", "col-md-12", "col-sm-12"], ["class", "example-button-row", 4, "ngIf"], ["mat-mini-fab", "", "aria-label", "", "color", "warn", 3, "click"], [1, "font-20"]],
        template: function FormDialogComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](5, "div", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "button", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function FormDialogComponent_Template_button_click_7_listener() {
              return ctx.dialogRef.close();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](8, "mat-icon");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](9, "close");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](10, "div", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](11, "form", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](12, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](13, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](14, "mat-form-field", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](15, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](16, "Title");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](17, "input", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](18, "mat-icon", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](19, "turned_in_not");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](20, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](21, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](22, "mat-form-field", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](23, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](24, "Category");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](25, "mat-select", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](26, "mat-option", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](27, " Work ");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](28, "mat-option", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](29, " Personal ");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](30, "mat-option", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](31, " Important ");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](32, "mat-option", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](33, " Travel ");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](34, "mat-option", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](35, " Friends ");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](36, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](37, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](38, "mat-form-field", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](39, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](40, "Start date");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](41, "input", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](42, "mat-datepicker-toggle", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](43, "ngx-mat-datetime-picker", null, 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](45, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](46, "mat-form-field", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](47, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](48, "End date");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](49, "input", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](50, "mat-datepicker-toggle", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](51, "ngx-mat-datetime-picker", null, 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](53, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](54, "div", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](55, "mat-form-field", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](56, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](57, "Event Details");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](58, "textarea", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](59, "div", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](60, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](61, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](62, "button", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function FormDialogComponent_Template_button_click_62_listener() {
              return ctx.confirmAdd();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](63, "Save");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](64, "button", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function FormDialogComponent_Template_button_click_64_listener() {
              return ctx.dialogRef.close();
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](65, "Cancel");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](66, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](67, FormDialogComponent_div_67_Template, 4, 0, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](44);

            var _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](52);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", ctx.dialogTitle, "");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("formGroup", ctx.calendarForm);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](15);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", "work");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", "personal");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", "important");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", "travel");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("value", "friends");

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngxMatDatetimePicker", _r0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("for", _r0);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](7);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngxMatDatetimePicker", _r1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("for", _r1);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](12);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("type", ctx.submit)("disabled", !ctx.calendarForm.valid);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](5);

            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.showDeleteBtn);
          }
        },
        directives: [_angular_material_button__WEBPACK_IMPORTED_MODULE_5__["MatButton"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_6__["MatIcon"], _angular_material_dialog__WEBPACK_IMPORTED_MODULE_0__["MatDialogContent"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ɵangular_packages_forms_forms_y"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControlStatusGroup"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormGroupDirective"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__["MatFormField"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__["MatLabel"], _angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInput"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["DefaultValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["NgControlStatus"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControlName"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["RequiredValidator"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__["MatSuffix"], _angular_material_select__WEBPACK_IMPORTED_MODULE_9__["MatSelect"], _angular_material_core__WEBPACK_IMPORTED_MODULE_10__["MatOption"], _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_11__["NgxMatDatetimeInput"], _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_12__["MatDatepickerToggle"], _angular_material_components_datetime_picker__WEBPACK_IMPORTED_MODULE_11__["NgxMatDatetimePicker"], _angular_common__WEBPACK_IMPORTED_MODULE_13__["NgIf"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcHMvY2FsZW5kYXIvZGlhbG9ncy9mb3JtLWRpYWxvZy9mb3JtLWRpYWxvZy5jb21wb25lbnQuc2FzcyJ9 */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](FormDialogComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
          args: [{
            selector: 'app-form-dialog',
            templateUrl: './form-dialog.component.html',
            styleUrls: ['./form-dialog.component.sass']
          }]
        }], function () {
          return [{
            type: _angular_material_dialog__WEBPACK_IMPORTED_MODULE_0__["MatDialogRef"]
          }, {
            type: undefined,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
              args: [_angular_material_dialog__WEBPACK_IMPORTED_MODULE_0__["MAT_DIALOG_DATA"]]
            }]
          }, {
            type: _calendar_service__WEBPACK_IMPORTED_MODULE_2__["CalendarService"]
          }, {
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "./src/app/apps/chat/chat.component.ts":
    /*!*********************************************!*\
      !*** ./src/app/apps/chat/chat.component.ts ***!
      \*********************************************/

    /*! exports provided: ChatComponent */

    /***/
    function srcAppAppsChatChatComponentTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ChatComponent", function () {
        return ChatComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/forms */
      "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ngx-perfect-scrollbar */
      "./node_modules/ngx-perfect-scrollbar/__ivy_ngcc__/fesm2015/ngx-perfect-scrollbar.js");
      /* harmony import */


      var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/form-field */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/form-field.js");
      /* harmony import */


      var _angular_material_input__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/input */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/button */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");

      var ChatComponent = function ChatComponent() {
        _classCallCheck(this, ChatComponent);

        this.hideRequiredControl = new _angular_forms__WEBPACK_IMPORTED_MODULE_1__["FormControl"](false);
      };

      ChatComponent.ɵfac = function ChatComponent_Factory(t) {
        return new (t || ChatComponent)();
      };

      ChatComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: ChatComponent,
        selectors: [["app-chat"]],
        decls: 198,
        vars: 0,
        consts: [[1, "content"], [1, "container-fluid"], [1, "block-header"], [1, "row"], [1, "col-xs-12", "col-sm-12", "col-md-12", "col-lg-12"], [1, "breadcrumb", "breadcrumb-style"], [1, "breadcrumb-item"], [1, "page-title"], [1, "breadcrumb-item", "bcrumb-1"], ["routerLink", "dashboard/main"], [1, "fas", "fa-home"], [1, "breadcrumb-item", "bcrumb-2"], ["href", "#", "onClick", "return false;"], [1, "breadcrumb-item", "active"], [1, "col-xs-12", "col-sm-12", "col-md-3", "col-lg-3"], [1, "card"], [1, "body"], ["id", "plist", 1, "people-list"], [1, "form-line", "m-b-15"], ["type", "text", "placeholder", "Search...", 1, "form-control"], [1, "tab-content"], ["id", "chat_user", 2, "position", "relative", "max-height", "590px", 3, "perfectScrollbar"], [1, "chat-list", "list-unstyled", "m-b-0"], [1, "clearfix", "active"], ["src", "assets/images/user/user1.jpg", "alt", "avatar"], [1, "about"], [1, "name"], [1, "status"], [1, "material-icons", "offline"], [1, "clearfix"], ["src", "assets/images/user/user2.jpg", "alt", "avatar"], ["src", "assets/images/user/user3.jpg", "alt", "avatar"], [1, "material-icons", "online"], ["src", "assets/images/user/user4.jpg", "alt", "avatar"], ["src", "assets/images/user/user5.jpg", "alt", "avatar"], ["src", "assets/images/user/user6.jpg", "alt", "avatar"], ["src", "assets/images/user/user7.jpg", "alt", "avatar"], ["src", "assets/images/user/user8.jpg", "alt", "avatar"], ["src", "assets/images/user/user9.jpg", "alt", "avatar"], [1, "col-xs-12", "col-sm-12", "col-md-9", "col-lg-9"], [1, "chat"], [1, "chat-header", "clearfix"], [1, "chat-about"], [1, "chat-with"], [1, "chat-num-messages"], ["id", "chat-conversation", 1, "chat-history", 2, "position", "relative", "max-height", "449px", 3, "perfectScrollbar"], [1, "message-data", "text-right"], [1, "message-data-time"], [1, "message-data-name"], [1, "message", "other-message", "float-right"], [1, "message-data"], [1, "message", "my-message"], [1, "chat-message", "clearfix"], [1, "form-group"], [1, "form-line"], [1, "example-full-width"], ["matInput", "", "placeholder", "Enter text here.."], [1, "chat-upload"], ["mat-mini-fab", "", 1, "bg-deep-orange", "mr-2"], [1, "material-icons"], ["mat-mini-fab", "", 1, "bg-deep-orange"]],
        template: function ChatComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "section", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "ul", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "h4", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8, "Chat");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12, " Home");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Apps");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "li", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "Chat");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "div", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](24, "input", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](25, "div", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](26, "div", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "ul", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "li", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](29, "img", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](30, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](32, "William Smith");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](34, "i", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](35, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](36, " left 7 mins ago ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](37, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](38, "img", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](39, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](40, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](41, "Martha Williams");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](42, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](43, "i", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](44, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](45, " online ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](46, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](47, "img", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](48, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](49, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](50, "Joseph Clark");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](51, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](52, "i", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](53, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](54, " online ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](55, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](56, "img", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](57, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](58, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](59, "Nancy Taylor");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](60, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](61, "i", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](62, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](63, " online ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](64, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](65, "img", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](66, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](67, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](68, "Margaret Wilson");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](69, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](70, "i", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](71, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](72, " online ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](73, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](74, "img", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](75, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](76, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](77, "Joseph Jones");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](78, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](79, "i", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](80, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](81, " left 30 mins ago ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](82, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](83, "img", 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](84, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](85, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](86, "Jane Brown");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](87, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](88, "i", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](89, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](90, " left 10 hours ago ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](91, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](92, "img", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](93, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](94, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](95, "Eliza Johnson");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](96, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](97, "i", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](98, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](99, " online ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](100, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](101, "img", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](102, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](103, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](104, "Mike Clark");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](105, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](106, "i", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](107, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](108, " online ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](109, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](110, "img", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](111, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](112, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](113, "Ann Henry");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](114, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](115, "i", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](116, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](117, " online ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](118, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](119, "img", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](120, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](121, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](122, "Nancy Smith");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](123, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](124, "i", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](125, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](126, " online ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](127, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](128, "img", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](129, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](130, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](131, "David Wilson");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](132, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](133, "i", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](134, "fiber_manual_record");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](135, " offline since Oct 28 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](136, "div", 39);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](137, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](138, "div", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](139, "div", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](140, "img", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](141, "div", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](142, "div", 43);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](143, "Maria Smith");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](144, "div", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](145, "2 new messages");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](146, "div", 45);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](147, "ul");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](148, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](149, "div", 46);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](150, "span", 47);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](151, "10:10 AM, Today ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](152, " \xA0 \xA0 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](153, "span", 48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](154, "Maria");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](155, "div", 49);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](156, " Hi Robert , how are you? How is your work going on? ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](157, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](158, "div", 50);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](159, "span", 48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](160, "Robert ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](161, "span", 47);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](162, "10:12 AM, Today");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](163, "div", 51);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](164, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](165, "Its good. We completed almost all task assign by our manager.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](166, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](167, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](168, "div", 50);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](169, "span", 48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](170, "Robert ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](171, "span", 47);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](172, "10:12 AM, Today");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](173, "div", 51);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](174, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](175, "How are you feel today? What's about vacation?.");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](176, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](177, "li", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](178, "div", 46);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](179, "span", 47);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](180, "10:10 AM, Today ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](181, " \xA0 \xA0 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](182, "span", 48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](183, "Maria");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](184, "div", 49);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](185, " I am good, We think for next weekend. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](186, "div", 52);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](187, "div", 53);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](188, "div", 54);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](189, "mat-form-field", 55);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](190, "input", 56);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](191, "div", 57);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](192, "button", 58);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](193, "i", 59);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](194, "attach_file");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](195, "button", 60);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](196, "i", 59);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](197, "insert_emoticon");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterLinkWithHref"], ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_3__["PerfectScrollbarDirective"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_4__["MatFormField"], _angular_material_input__WEBPACK_IMPORTED_MODULE_5__["MatInput"], _angular_material_button__WEBPACK_IMPORTED_MODULE_6__["MatButton"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcHMvY2hhdC9jaGF0LmNvbXBvbmVudC5zY3NzIn0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ChatComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-chat',
            templateUrl: './chat.component.html',
            styleUrls: ['./chat.component.scss']
          }]
        }], function () {
          return [];
        }, null);
      })();
      /***/

    },

    /***/
    "./src/app/apps/contact-grid/contact-grid.component.ts":
    /*!*************************************************************!*\
      !*** ./src/app/apps/contact-grid/contact-grid.component.ts ***!
      \*************************************************************/

    /*! exports provided: ContactGridComponent */

    /***/
    function srcAppAppsContactGridContactGridComponentTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ContactGridComponent", function () {
        return ContactGridComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/material/button */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");

      var ContactGridComponent = /*#__PURE__*/function () {
        function ContactGridComponent() {
          _classCallCheck(this, ContactGridComponent);
        }

        _createClass(ContactGridComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }]);

        return ContactGridComponent;
      }();

      ContactGridComponent.ɵfac = function ContactGridComponent_Factory(t) {
        return new (t || ContactGridComponent)();
      };

      ContactGridComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: ContactGridComponent,
        selectors: [["app-contact-grid"]],
        decls: 311,
        vars: 0,
        consts: [[1, "content"], [1, "container-fluid"], [1, "block-header"], [1, "row"], [1, "col-xs-12", "col-sm-12", "col-md-12", "col-lg-12"], [1, "breadcrumb", "breadcrumb-style"], [1, "breadcrumb-item"], [1, "page-title"], [1, "breadcrumb-item", "bcrumb-1"], ["routerLink", "/dashboard/main"], [1, "fas", "fa-home"], [1, "breadcrumb-item", "bcrumb-2"], ["href", "#", "onClick", "return false;"], [1, "breadcrumb-item", "active"], [1, "row", "clearfix"], [1, "card"], [1, "header"], [1, "col-xs-12", "col-sm-6"], [1, "header-dropdown", "m-r--5"], [1, "dropdown"], ["href", "#", "onClick", "return false;", "data-toggle", "dropdown", "role", "button", "aria-haspopup", "true", "aria-expanded", "false"], [1, "material-icons"], [1, "dropdown-menu", "pull-right"], [1, "body"], [1, "col-md-4"], [1, "card", "border-apply"], [1, "m-b-20"], [1, "contact-grid"], [1, "profile-header", "l-bg-purple-dark"], [1, "user-name"], [1, "name-center"], ["src", "assets/images/user/usrbig1.jpg", "alt", "", 1, "user-img"], [1, "phone"], [1, "profile-userbuttons"], ["mat-flat-button", "", "color", "primary"], [1, "profile-header", "bg-cyan"], ["src", "assets/images/user/usrbig2.jpg", "alt", "", 1, "user-img"], [1, "profile-header", "bg-dark"], ["src", "assets/images/user/usrbig3.jpg", "alt", "", 1, "user-img"], [1, "profile-header", "l-bg-orange"], ["src", "assets/images/user/usrbig4.jpg", "alt", "", 1, "user-img"], [1, "profile-header", "bg-green"], ["src", "assets/images/user/usrbig5.jpg", "alt", "", 1, "user-img"], [1, "profile-header", "l-bg-red"], ["src", "assets/images/user/usrbig6.jpg", "alt", "", 1, "user-img"], [1, "profile-header", "bg-indigo"], ["src", "assets/images/user/usrbig7.jpg", "alt", "", 1, "user-img"], [1, "profile-header", "bg-brown"], ["src", "assets/images/user/usrbig8.jpg", "alt", "", 1, "user-img"], [1, "profile-header", "bg-amber"], ["src", "assets/images/user/usrbig9.jpg", "alt", "", 1, "user-img"]],
        template: function ContactGridComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "section", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "ul", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "h4", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8, "Contact Grid");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12, " Home");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Apps");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "li", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "Contact Grid");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](25, "Contact");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](26, " Grid");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "ul", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "li", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "a", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](30, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](31, "more_vert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](32, "ul", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](34, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](35, "Action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](37, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](38, "Another action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](39, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](40, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](41, "Something else here");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](42, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](43, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](44, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](46, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](47, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](48, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](49, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](50, "Pooja Patel");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](51, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](52, "General Manager");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](53, "img", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](54, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](55, " A-103, shyam gokul flats, Mahatma Road ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](56, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](57, "Mumbai ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](58, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](59, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](60, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](61, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](62, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](63, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](64, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](65, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](66, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](67, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](68, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](69, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](70, "div", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](71, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](72, "Smita Patil");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](73, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](74, "Housekeeper");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](75, "img", 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](76, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](77, " 45, Krishna Tower, Near Bus Stop, Satellite, ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](78, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](79, "Ahmedabad ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](80, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](81, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](82, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](83, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](84, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](85, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](86, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](87, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](88, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](89, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](90, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](91, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](92, "div", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](93, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](94, "John Smith");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](95, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](96, "Cook");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](97, "img", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](98, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](99, " 456, Estern evenue, Courtage area, ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](100, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](101, "New York ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](102, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](103, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](104, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](105, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](106, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](107, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](108, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](109, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](110, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](111, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](112, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](113, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](114, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](115, "div", 39);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](116, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](117, "Pooja Patel");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](118, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](119, "General Manager");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](120, "img", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](121, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](122, " A-103, shyam gokul flats, Mahatma Road ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](123, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](124, "Mumbai ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](125, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](126, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](127, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](128, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](129, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](130, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](131, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](132, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](133, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](134, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](135, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](136, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](137, "div", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](138, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](139, "Smita Patil");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](140, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](141, "Housekeeper");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](142, "img", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](143, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](144, " 45, Krishna Tower, Near Bus Stop, Satellite, ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](145, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](146, "Ahmedabad ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](147, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](148, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](149, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](150, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](151, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](152, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](153, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](154, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](155, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](156, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](157, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](158, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](159, "div", 43);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](160, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](161, "John Smith");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](162, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](163, "Cook");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](164, "img", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](165, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](166, " 456, Estern evenue, Courtage area, ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](167, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](168, "New York ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](169, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](170, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](171, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](172, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](173, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](174, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](175, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](176, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](177, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](178, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](179, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](180, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](181, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](182, "div", 45);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](183, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](184, "Pooja Patel");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](185, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](186, "General Manager");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](187, "img", 46);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](188, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](189, " A-103, shyam gokul flats, Mahatma Road ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](190, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](191, "Mumbai ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](192, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](193, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](194, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](195, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](196, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](197, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](198, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](199, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](200, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](201, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](202, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](203, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](204, "div", 47);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](205, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](206, "Smita Patil");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](207, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](208, "Housekeeper");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](209, "img", 48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](210, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](211, " 45, Krishna Tower, Near Bus Stop, Satellite, ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](212, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](213, "Ahmedabad ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](214, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](215, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](216, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](217, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](218, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](219, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](220, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](221, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](222, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](223, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](224, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](225, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](226, "div", 49);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](227, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](228, "John Smith");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](229, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](230, "Cook");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](231, "img", 50);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](232, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](233, " 456, Estern evenue, Courtage area, ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](234, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](235, "New York ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](236, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](237, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](238, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](239, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](240, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](241, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](242, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](243, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](244, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](245, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](246, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](247, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](248, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](249, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](250, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](251, "Pooja Patel");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](252, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](253, "General Manager");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](254, "img", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](255, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](256, " A-103, shyam gokul flats, Mahatma Road ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](257, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](258, "Mumbai ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](259, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](260, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](261, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](262, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](263, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](264, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](265, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](266, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](267, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](268, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](269, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](270, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](271, "div", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](272, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](273, "Smita Patil");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](274, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](275, "Housekeeper");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](276, "img", 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](277, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](278, " 45, Krishna Tower, Near Bus Stop, Satellite, ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](279, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](280, "Ahmedabad ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](281, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](282, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](283, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](284, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](285, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](286, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](287, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](288, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](289, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](290, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](291, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](292, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](293, "div", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](294, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](295, "John Smith");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](296, "div", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](297, "Cook");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](298, "img", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](299, "p");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](300, " 456, Estern evenue, Courtage area, ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](301, "br");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](302, "New York ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](303, "div");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](304, "span", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](305, "i", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](306, "phone");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](307, "264-625-2583");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](308, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](309, "button", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](310, "Read More");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterLinkWithHref"], _angular_material_button__WEBPACK_IMPORTED_MODULE_2__["MatButton"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcHMvY29udGFjdC1ncmlkL2NvbnRhY3QtZ3JpZC5jb21wb25lbnQuc2NzcyJ9 */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ContactGridComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-contact-grid',
            templateUrl: './contact-grid.component.html',
            styleUrls: ['./contact-grid.component.scss']
          }]
        }], function () {
          return [];
        }, null);
      })();
      /***/

    },

    /***/
    "./src/app/apps/contact-list/contact-list.component.ts":
    /*!*************************************************************!*\
      !*** ./src/app/apps/contact-list/contact-list.component.ts ***!
      \*************************************************************/

    /*! exports provided: ContactListComponent */

    /***/
    function srcAppAppsContactListContactListComponentTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ContactListComponent", function () {
        return ContactListComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/material/paginator */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/paginator.js");
      /* harmony import */


      var _angular_material_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/material/table */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/table.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/button */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");
      /* harmony import */


      var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/checkbox */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/forms */
      "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
      /* harmony import */


      var _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/material/icon */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js");

      function ContactListComponent_th_60_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 45);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " # ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ContactListComponent_td_61_Template(rf, ctx) {
        if (rf & 1) {
          var _r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 46);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "mat-checkbox", 47);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function ContactListComponent_td_61_Template_mat_checkbox_ngModelChange_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r16);

            var element_r14 = ctx.$implicit;
            return element_r14.checked = $event;
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r14 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", element_r14.checked);
        }
      }

      function ContactListComponent_th_63_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 45);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Image ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ContactListComponent_td_64_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 48);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "img", 49);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r17 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", element_r17.imageUrl, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);
        }
      }

      function ContactListComponent_th_66_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 50);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Name ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ContactListComponent_td_67_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 46);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r18 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r18.name, " ");
        }
      }

      function ContactListComponent_th_69_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 50);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Phone ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ContactListComponent_td_70_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 46);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r19 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r19.phoneNo, " ");
        }
      }

      function ContactListComponent_th_72_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 51);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Address ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ContactListComponent_td_73_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 46);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r20 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r20.address, " ");
        }
      }

      function ContactListComponent_th_75_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 50);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Actions ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ContactListComponent_td_76_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 46);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "button", 52);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mat-icon");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3, "edit");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 52);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "mat-icon", 53);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "delete");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function ContactListComponent_tr_77_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tr", 54);
        }
      }

      function ContactListComponent_tr_78_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tr", 55);
        }
      }

      var _c0 = function _c0() {
        return [5, 10, 20];
      };

      var ELEMENT_DATA = [{
        checked: false,
        imageUrl: 'assets/images/user/user1.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user2.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user3.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user4.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user5.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user6.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user7.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user8.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user9.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user10.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user1.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user2.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user3.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user4.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user5.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user6.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user7.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user8.jpg',
        name: 'Tim Hank',
        phoneNo: '123456789',
        address: '70 Bowman St. South Windsor, CT 06074',
        action: ''
      }];

      var ContactListComponent = /*#__PURE__*/function () {
        function ContactListComponent() {
          _classCallCheck(this, ContactListComponent);

          this.displayedColumns = ['checked', 'imageUrl', 'name', 'phoneNo', 'address', 'action'];
          this.dataSource = new _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatTableDataSource"](ELEMENT_DATA);
        }

        _createClass(ContactListComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.dataSource.paginator = this.paginator;
          }
        }]);

        return ContactListComponent;
      }();

      ContactListComponent.ɵfac = function ContactListComponent_Factory(t) {
        return new (t || ContactListComponent)();
      };

      ContactListComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: ContactListComponent,
        selectors: [["app-contact-list"]],
        viewQuery: function ContactListComponent_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticViewQuery"](_angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginator"], true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.paginator = _t.first);
          }
        },
        decls: 80,
        vars: 6,
        consts: [[1, "content"], [1, "container-fluid"], [1, "block-header"], [1, "row"], [1, "col-xs-12", "col-sm-12", "col-md-12", "col-lg-12"], [1, "breadcrumb", "breadcrumb-style"], [1, "breadcrumb-item"], [1, "page-title"], [1, "breadcrumb-item", "bcrumb-1"], ["routerLink", "/dashboard/main"], [1, "fas", "fa-home"], [1, "breadcrumb-item", "bcrumb-2"], ["href", "#", "onClick", "return false;"], [1, "breadcrumb-item", "active"], [1, "col-xs-12", "col-sm-12", "col-md-3", "col-lg-3"], [1, "card", "body"], [1, "contact-photo"], ["src", "assets/images/usrbig.jpg", "alt", "", 1, "img-responsive"], [1, "contact-usertitle"], [1, "contact-usertitle-name"], [1, "contact-usertitle-job"], [1, "list-group", "list-group-unbordered"], [1, "list-group-item"], [1, "pull-right"], [1, "newLabelBtn"], ["mat-flat-button", "", "color", "primary"], [1, "col-xs-12", "col-sm-12", "col-md-9", "col-lg-9"], [1, "card"], [1, "body"], [1, "table-responsive"], ["mat-table", "", 1, "w-100", 3, "dataSource"], ["matColumnDef", "checked"], ["mat-header-cell", "", "width", "10%", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "imageUrl"], ["mat-cell", "", "class", "table-img", 4, "matCellDef"], ["matColumnDef", "name"], ["mat-header-cell", "", "width", "15%", 4, "matHeaderCellDef"], ["matColumnDef", "phoneNo"], ["matColumnDef", "address"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["matColumnDef", "action"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["showFirstLastButtons", "", 3, "pageSize", "pageSizeOptions"], ["mat-header-cell", "", "width", "10%"], ["mat-cell", ""], [3, "ngModel", "ngModelChange"], ["mat-cell", "", 1, "table-img"], [3, "src"], ["mat-header-cell", "", "width", "15%"], ["mat-header-cell", ""], ["mat-icon-button", "", "aria-label", "Example icon-button with a heart icon"], [1, "col-orange"], ["mat-header-row", ""], ["mat-row", ""]],
        template: function ContactListComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "section", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "ul", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "h4", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8, "Contact List");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12, " Home");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Apps");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "li", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "Contact List");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](23, "img", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "div", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](25, "div", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](26, " Emily Smith ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "div", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](28, " Engineer ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "ul", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](30, "li", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "b");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](32, "All Contacts");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "a", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](34, "1,200");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "li", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](36, " Friends ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](37, "a", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](38, "450");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](39, "li", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](40, " Family ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](41, "a", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](42, "345");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](43, "li", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](44, " Office ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "a", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](46, "172");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](47, "li", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](48, " Social ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](49, "a", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](50, "432");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](51, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](52, "button", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](53, "New Label");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](54, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](55, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](56, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](57, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](58, "table", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](59, 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](60, ContactListComponent_th_60_Template, 2, 0, "th", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](61, ContactListComponent_td_61_Template, 2, 1, "td", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](62, 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](63, ContactListComponent_th_63_Template, 2, 0, "th", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](64, ContactListComponent_td_64_Template, 2, 1, "td", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](65, 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](66, ContactListComponent_th_66_Template, 2, 0, "th", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](67, ContactListComponent_td_67_Template, 2, 1, "td", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](68, 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](69, ContactListComponent_th_69_Template, 2, 0, "th", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](70, ContactListComponent_td_70_Template, 2, 1, "td", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](71, 39);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](72, ContactListComponent_th_72_Template, 2, 0, "th", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](73, ContactListComponent_td_73_Template, 2, 1, "td", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](74, 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](75, ContactListComponent_th_75_Template, 2, 0, "th", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](76, ContactListComponent_td_76_Template, 7, 0, "td", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](77, ContactListComponent_tr_77_Template, 1, 0, "tr", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](78, ContactListComponent_tr_78_Template, 1, 0, "tr", 43);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](79, "mat-paginator", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](58);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dataSource", ctx.dataSource);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matHeaderRowDef", ctx.displayedColumns);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matRowDefColumns", ctx.displayedColumns);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("pageSize", 10)("pageSizeOptions", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction0"](5, _c0));
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterLinkWithHref"], _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["MatButton"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatTable"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatColumnDef"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatHeaderCellDef"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatCellDef"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatHeaderRowDef"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatRowDef"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginator"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatHeaderCell"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatCell"], _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_5__["MatCheckbox"], _angular_forms__WEBPACK_IMPORTED_MODULE_6__["NgControlStatus"], _angular_forms__WEBPACK_IMPORTED_MODULE_6__["NgModel"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__["MatIcon"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatHeaderRow"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatRow"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcHMvY29udGFjdC1saXN0L2NvbnRhY3QtbGlzdC5jb21wb25lbnQuc2NzcyJ9 */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ContactListComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-contact-list',
            templateUrl: './contact-list.component.html',
            styleUrls: ['./contact-list.component.scss']
          }]
        }], function () {
          return [];
        }, {
          paginator: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
            args: [_angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginator"], {
              "static": true
            }]
          }]
        });
      })();
      /***/

    },

    /***/
    "./src/app/apps/drag-drop/drag-drop.component.ts":
    /*!*******************************************************!*\
      !*** ./src/app/apps/drag-drop/drag-drop.component.ts ***!
      \*******************************************************/

    /*! exports provided: DragDropComponent */

    /***/
    function srcAppAppsDragDropDragDropComponentTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DragDropComponent", function () {
        return DragDropComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var ng2_dragula__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ng2-dragula */
      "./node_modules/ng2-dragula/__ivy_ngcc__/dist/fesm2015/ng2-dragula.js");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "./node_modules/rxjs/_esm2015/index.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");

      var DragDropComponent = /*#__PURE__*/function () {
        function DragDropComponent(dragulaService) {
          var _this38 = this;

          _classCallCheck(this, DragDropComponent);

          this.dragulaService = dragulaService;
          this.BAG = 'DRAGULA_EVENTS';
          this.subs = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subscription"]();
          this.dragulaService.createGroup('VAMPIRES', {});
          this.dragulaService.dropModel('VAMPIRES').subscribe(function (args) {
            console.log(args);
          });
          this.subs.add(dragulaService.drag(this.BAG).subscribe(function (_ref28) {
            var el = _ref28.el;

            _this38.removeClass(el, 'ex-moved');
          }));
          this.subs.add(dragulaService.drop(this.BAG).subscribe(function (_ref29) {
            var el = _ref29.el;

            _this38.addClass(el, 'ex-moved');
          }));
          this.subs.add(dragulaService.over(this.BAG).subscribe(function (_ref30) {
            var el = _ref30.el,
                container = _ref30.container;
            console.log('over', container);

            _this38.addClass(container, 'ex-over');
          }));
          this.subs.add(dragulaService.out(this.BAG).subscribe(function (_ref31) {
            var el = _ref31.el,
                container = _ref31.container;
            console.log('out', container);

            _this38.removeClass(container, 'ex-over');
          })); // spill

          dragulaService.createGroup('SPILL', {
            removeOnSpill: true
          }); // revert

          dragulaService.createGroup('REVERT', {
            revertOnSpill: true
          });
          dragulaService.createGroup('COPYABLE', {
            copy: function copy(el, source) {
              return source.id === 'left';
            },
            accepts: function accepts(el, target, source, sibling) {
              // To avoid dragging from right to left container
              return target.id !== 'left';
            }
          });
        }

        _createClass(DragDropComponent, [{
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.dragulaService.destroy('VAMPIRES');
            this.dragulaService.destroy('SPILL');
            this.dragulaService.destroy('REVERT');
            this.dragulaService.destroy('COPYABLE');
            this.subs.unsubscribe();
          }
        }, {
          key: "hasClass",
          value: function hasClass(el, name) {
            return new RegExp('(?:^|\\s+)' + name + '(?:\\s+|$)').test(el.className);
          }
        }, {
          key: "addClass",
          value: function addClass(el, name) {
            if (!this.hasClass(el, name)) {
              el.className = el.className ? [el.className, name].join(' ') : name;
            }
          }
        }, {
          key: "removeClass",
          value: function removeClass(el, name) {
            if (this.hasClass(el, name)) {
              el.className = el.className.replace(new RegExp('(?:^|\\s+)' + name + '(?:\\s+|$)', 'g'), '');
            }
          }
        }]);

        return DragDropComponent;
      }();

      DragDropComponent.ɵfac = function DragDropComponent_Factory(t) {
        return new (t || DragDropComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ng2_dragula__WEBPACK_IMPORTED_MODULE_1__["DragulaService"]));
      };

      DragDropComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: DragDropComponent,
        selectors: [["app-drag-drop"]],
        decls: 329,
        vars: 0,
        consts: [[1, "content"], [1, "container-fluid"], [1, "block-header"], [1, "row"], [1, "col-xs-12", "col-sm-12", "col-md-12", "col-lg-12"], [1, "breadcrumb", "breadcrumb-style"], [1, "breadcrumb-item"], [1, "page-title"], [1, "breadcrumb-item", "bcrumb-1"], ["routerLink", "/dashboard/main"], [1, "fas", "fa-home"], [1, "breadcrumb-item", "bcrumb-2"], ["href", "#", "onClick", "return false;"], [1, "breadcrumb-item", "active"], [1, "row", "clearfix"], [1, "card"], [1, "header"], [1, "header-dropdown", "m-r--5"], [1, "dropdown"], ["href", "#", "onClick", "return false;", "data-toggle", "dropdown", "role", "button", "aria-haspopup", "true", "aria-expanded", "false"], [1, "material-icons"], [1, "dropdown-menu", "pull-right"], [1, "body"], [1, "alert", "alert-info"], [1, "col-xs-12", "col-sm-12", "col-md-6", "col-lg-6"], [1, "board"], ["id", "left", 1, "cards"], ["dragula", "VAMPIRES", 1, "container"], [1, "drop-card"], [1, "table-img", "msg-user"], ["src", "assets/images/user/user5.jpg", "alt", ""], [1, "cardtitle", "noselect"], ["src", "assets/images/user/user6.jpg", "alt", ""], ["src", "assets/images/user/user7.jpg", "alt", ""], ["src", "assets/images/user/user8.jpg", "alt", ""], ["id", "right", 1, "cards"], ["src", "assets/images/user/user1.jpg", "alt", ""], ["src", "assets/images/user/user2.jpg", "alt", ""], [1, "alert", "alert-info", 2, "width", "100%"], ["href", "https://github.com/bevacqua/dragula#drakeon-events"], ["dragula", "DRAGULA_EVENTS", 1, "container"], ["src", "assets/images/user/user3.jpg", "alt", ""], ["src", "assets/images/user/user4.jpg", "alt", ""], ["dragula", "SPILL", 1, "container"], ["dragula", "REVERT", 1, "container"], ["dragula", "COPYABLE", "id", "left", 1, "container"], ["dragula", "COPYABLE", "id", "right", 1, "container"]],
        template: function DragDropComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "section", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "ul", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "h4", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8, "Drag & Drop");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12, " Home");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Apps");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "li", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "Drag & Drop");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](24, "Basic");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](25, " Drag & Drop");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](26, "ul", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "li", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "a", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](30, "more_vert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "ul", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](32, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](34, "Action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](37, "Another action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](38, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](39, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](40, "Something else here");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](41, "div", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](42, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](43, " Move stuff between these two containers. Note how the stuff gets inserted near the mouse pointer? Great stuff. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](44, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](46, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](47, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](48, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](49, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](50, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](51, "img", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](52, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](53, " User card #1");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](54, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](55, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](56, "img", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](57, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](58, "User card #2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](59, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](60, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](61, "img", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](62, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](63, "User card #3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](64, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](65, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](66, "img", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](67, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](68, "User card #4");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](69, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](70, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](71, "div", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](72, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](73, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](74, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](75, "img", 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](76, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](77, "User card #7");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](78, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](79, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](80, "img", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](81, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](82, "User card #8");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](83, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](84, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](85, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](86, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](87, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](88, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](89, "Drag");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](90, " & Drop Events");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](91, "ul", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](92, "li", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](93, "a", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](94, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](95, "more_vert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](96, "ul", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](97, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](98, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](99, "Action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](100, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](101, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](102, "Another action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](103, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](104, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](105, "Something else here");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](106, "div", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](107, "div", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](108, " There are plenty of events along the lifetime of a drag event. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](109, "a", 39);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](110, "all of them");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](111, " in the docs! ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](112, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](113, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](114, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](115, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](116, "div", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](117, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](118, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](119, "img", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](120, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](121, " User card #1");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](122, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](123, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](124, "img", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](125, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](126, "User card #2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](127, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](128, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](129, "img", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](130, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](131, "User card #3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](132, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](133, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](134, "img", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](135, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](136, "User card #4");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](137, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](138, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](139, "div", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](140, "div", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](141, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](142, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](143, "img", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](144, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](145, "User card #5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](146, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](147, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](148, "img", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](149, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](150, "User card #6");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](151, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](152, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](153, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](154, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](155, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](156, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](157, "Spill");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](158, "ul", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](159, "li", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](160, "a", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](161, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](162, "more_vert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](163, "ul", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](164, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](165, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](166, "Action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](167, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](168, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](169, "Another action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](170, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](171, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](172, "Something else here");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](173, "div", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](174, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](175, " Need to be able to quickly delete stuff when it spills out of the chosen containers? Note how you can easily sort the items in any containers by just dragging and dropping. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](176, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](177, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](178, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](179, "div", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](180, "div", 43);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](181, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](182, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](183, "img", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](184, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](185, " User card #1");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](186, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](187, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](188, "img", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](189, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](190, "User card #2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](191, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](192, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](193, "img", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](194, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](195, "User card #3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](196, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](197, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](198, "img", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](199, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](200, "User card #4");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](201, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](202, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](203, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](204, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](205, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](206, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](207, "Revert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](208, "ul", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](209, "li", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](210, "a", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](211, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](212, "more_vert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](213, "ul", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](214, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](215, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](216, "Action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](217, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](218, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](219, "Another action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](220, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](221, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](222, "Something else here");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](223, "div", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](224, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](225, " By default, dropping an element outside of any known containers will keep the element in the last place it went over. You can make elements go back to origin if they're dropped outside of known containers, too. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](226, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](227, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](228, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](229, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](230, "div", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](231, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](232, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](233, "img", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](234, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](235, " User card #1");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](236, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](237, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](238, "img", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](239, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](240, "User card #2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](241, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](242, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](243, "img", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](244, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](245, "User card #3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](246, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](247, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](248, "img", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](249, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](250, "User card #4");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](251, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](252, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](253, "div", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](254, "div", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](255, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](256, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](257, "img", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](258, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](259, "User card #5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](260, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](261, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](262, "img", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](263, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](264, "User card #6");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](265, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](266, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](267, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](268, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](269, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](270, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](271, "Revert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](272, "ul", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](273, "li", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](274, "a", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](275, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](276, "more_vert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](277, "ul", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](278, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](279, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](280, "Action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](281, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](282, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](283, "Another action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](284, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](285, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](286, "Something else here");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](287, "div", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](288, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](289, " Copying Elements from left side to right side made it easy for you. ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](290, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](291, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](292, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](293, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](294, "div", 45);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](295, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](296, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](297, "img", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](298, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](299, " User card #1");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](300, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](301, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](302, "img", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](303, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](304, "User card #2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](305, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](306, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](307, "img", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](308, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](309, "User card #3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](310, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](311, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](312, "img", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](313, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](314, "User card #4");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](315, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](316, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](317, "div", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](318, "div", 46);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](319, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](320, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](321, "img", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](322, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](323, "User card #5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](324, "div", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](325, "span", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](326, "img", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](327, "span", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](328, "User card #6");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterLinkWithHref"], ng2_dragula__WEBPACK_IMPORTED_MODULE_1__["DragulaDirective"]],
        styles: [".container[_ngcontent-%COMP%]   .ex-moved[_ngcontent-%COMP%] {\n  background-color: rgba(255, 21, 45, 0.75);\n  color: #fff;\n}\n\n.container.ex-over[_ngcontent-%COMP%] {\n  background-color: rgba(255, 255, 255, 0.3);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwcy9kcmFnLWRyb3AvZHJhZy1kcm9wLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UseUNBQXlDO0VBQ3pDLFdBQVc7QUFDYjs7QUFDQTtFQUNFLDBDQUEwQztBQUU1QyIsImZpbGUiOiJzcmMvYXBwL2FwcHMvZHJhZy1kcm9wL2RyYWctZHJvcC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIgLmV4LW1vdmVkIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI5MywgMjEsIDQ1LCAwLjc1KTtcclxuICBjb2xvcjogI2ZmZjtcclxufVxyXG4uY29udGFpbmVyLmV4LW92ZXIge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKTtcclxufVxyXG4iXX0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DragDropComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-drag-drop',
            templateUrl: './drag-drop.component.html',
            styleUrls: ['./drag-drop.component.scss']
          }]
        }], function () {
          return [{
            type: ng2_dragula__WEBPACK_IMPORTED_MODULE_1__["DragulaService"]
          }];
        }, null);
      })();
      /***/

    },

    /***/
    "./src/app/apps/support/support.component.ts":
    /*!***************************************************!*\
      !*** ./src/app/apps/support/support.component.ts ***!
      \***************************************************/

    /*! exports provided: SupportComponent */

    /***/
    function srcAppAppsSupportSupportComponentTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SupportComponent", function () {
        return SupportComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/material/paginator */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/paginator.js");
      /* harmony import */


      var _angular_material_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/material/table */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/table.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/checkbox */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/forms */
      "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/button */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");
      /* harmony import */


      var _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/material/icon */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js");

      function SupportComponent_th_90_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 54);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " # ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_91_Template(rf, ctx) {
        if (rf & 1) {
          var _r22 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "mat-checkbox", 56);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("ngModelChange", function SupportComponent_td_91_Template_mat_checkbox_ngModelChange_1_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r22);

            var element_r20 = ctx.$implicit;
            return element_r20.checked = $event;
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r20 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngModel", element_r20.checked);
        }
      }

      function SupportComponent_th_93_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 57);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " User ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_94_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 58);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "img", 59);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r23 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", element_r23.imageUrl, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);
        }
      }

      function SupportComponent_th_96_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 54);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Opened By ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_97_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r24 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r24.name, " ");
        }
      }

      function SupportComponent_th_99_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 60);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Email ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_100_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r25 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r25.email, " ");
        }
      }

      function SupportComponent_th_102_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 60);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Subject ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_103_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r26 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r26.subject, " ");
        }
      }

      function SupportComponent_th_105_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 57);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Status ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_106_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 61);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r27 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r27.status, "");
        }
      }

      function SupportComponent_th_108_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 54);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Assign To ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_109_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r28 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r28.assignTo, " ");
        }
      }

      function SupportComponent_th_111_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 54);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Date ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_112_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var element_r29 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", element_r29.date, " ");
        }
      }

      function SupportComponent_th_114_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "th", 62);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " Actions ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_td_115_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "td", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "button", 63);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mat-icon");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3, "edit");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "button", 64);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "mat-icon");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](6, "delete");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function SupportComponent_tr_116_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tr", 65);
        }
      }

      function SupportComponent_tr_117_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tr", 66);
        }
      }

      var _c0 = function _c0() {
        return [5, 10, 20];
      };

      var ELEMENT_DATA = [{
        checked: false,
        imageUrl: 'assets/images/user/user1.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user2.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user3.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'open',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user4.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user5.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'open',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user6.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user7.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'open',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user8.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'pending',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user9.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user10.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user1.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'open',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user2.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user3.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'pending',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user4.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user5.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user6.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'pending',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user7.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }, {
        checked: false,
        imageUrl: 'assets/images/user/user8.jpg',
        name: 'Tim Hank',
        email: 'test@example.com',
        subject: 'Image not Proper',
        status: 'closed',
        assignTo: 'John Deo',
        date: '27/05/2016',
        action: ''
      }];

      var SupportComponent = /*#__PURE__*/function () {
        function SupportComponent() {
          _classCallCheck(this, SupportComponent);

          this.displayedColumns = ['checked', 'imageUrl', 'name', 'email', 'subject', 'status', 'assignTo', 'date', 'action'];
          this.dataSource = new _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatTableDataSource"](ELEMENT_DATA);
        }

        _createClass(SupportComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            this.dataSource.paginator = this.paginator;
            $('.chart.chart-bar').sparkline(undefined, {
              type: 'bar',
              barColor: '#fff',
              negBarColor: '#fff',
              barWidth: '4px',
              height: '45px'
            }); // Chart Pie

            $('.chart.chart-pie').sparkline(undefined, {
              type: 'pie',
              height: '45px',
              sliceColors: ['rgba(255,255,255,0.70)', 'rgba(255,255,255,0.85)', 'rgba(255,255,255,0.95)', 'rgba(255,255,255,1)']
            }); // Chart Line

            $('.chart.chart-line').sparkline(undefined, {
              type: 'line',
              width: '60px',
              height: '45px',
              lineColor: '#fff',
              lineWidth: 1.3,
              fillColor: 'rgba(0,0,0,0)',
              spotColor: 'rgba(255,255,255,0.40)',
              maxSpotColor: 'rgba(255,255,255,0.40)',
              minSpotColor: 'rgba(255,255,255,0.40)',
              spotRadius: 3,
              highlightSpotColor: '#fff'
            });
          }
        }]);

        return SupportComponent;
      }();

      SupportComponent.ɵfac = function SupportComponent_Factory(t) {
        return new (t || SupportComponent)();
      };

      SupportComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: SupportComponent,
        selectors: [["app-support"]],
        viewQuery: function SupportComponent_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstaticViewQuery"](_angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginator"], true);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.paginator = _t.first);
          }
        },
        decls: 119,
        vars: 6,
        consts: [[1, "content"], [1, "container-fluid"], [1, "block-header"], [1, "row"], [1, "col-xs-12", "col-sm-12", "col-md-12", "col-lg-12"], [1, "breadcrumb", "breadcrumb-style"], [1, "breadcrumb-item"], [1, "page-title"], [1, "breadcrumb-item", "bcrumb-1"], ["routerLink", "/dashboard/main"], [1, "fas", "fa-home"], [1, "breadcrumb-item", "bcrumb-2"], ["href", "#", "onClick", "return false;"], [1, "breadcrumb-item", "active"], [1, "col-lg-12", "col-md-12", "col-sm-12"], [1, "card"], [1, "header"], [1, "header-dropdown", "m-r--5"], [1, "dropdown"], ["href", "#", "onClick", "return false;", "data-toggle", "dropdown", "role", "button", "aria-haspopup", "true", "aria-expanded", "false"], [1, "material-icons"], [1, "dropdown-menu", "pull-right"], [1, "body"], [1, "col-lg-3", "col-sm-6"], [1, "support-box", "text-center", "l-bg-red"], [1, "icon", "m-b-10"], [1, "chart", "chart-bar"], [1, "text", "m-b-10"], [1, "m-b-0"], [1, "support-box", "text-center", "l-bg-cyan"], [1, "chart", "chart-line"], [1, "support-box", "text-center", "l-bg-orange"], [1, "chart", "chart-pie"], [1, "support-box", "text-center", "bg-green"], [1, "table-responsive"], ["mat-table", "", 1, "w-100", 3, "dataSource"], ["matColumnDef", "checked"], ["mat-header-cell", "", "width", "10%", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["matColumnDef", "imageUrl"], ["mat-header-cell", "", "width", "8%", 4, "matHeaderCellDef"], ["mat-cell", "", "class", "table-img", 4, "matCellDef"], ["matColumnDef", "name"], ["matColumnDef", "email"], ["mat-header-cell", "", 4, "matHeaderCellDef"], ["matColumnDef", "subject"], ["matColumnDef", "status"], ["matColumnDef", "assignTo"], ["matColumnDef", "date"], ["matColumnDef", "action"], ["mat-header-cell", "", "width", "15%", 4, "matHeaderCellDef"], ["mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["showFirstLastButtons", "", 3, "pageSize", "pageSizeOptions"], ["mat-header-cell", "", "width", "10%"], ["mat-cell", ""], [3, "ngModel", "ngModelChange"], ["mat-header-cell", "", "width", "8%"], ["mat-cell", "", 1, "table-img"], [3, "src"], ["mat-header-cell", ""], [1, "badge"], ["mat-header-cell", "", "width", "15%"], ["mat-icon-button", "", 1, "btn-tbl-edit"], ["mat-icon-button", "", 1, "btn-tbl-delete"], ["mat-header-row", ""], ["mat-row", ""]],
        template: function SupportComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "section", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "ul", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "h4", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8, "Support");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12, " Home");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](14, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](15, "Apps");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "li", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](17, "Support");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](23, "strong");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](24, "Support");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](25, " Tickets ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](26, "ul", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "li", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](28, "a", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](30, "more_vert");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "ul", 21);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](32, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](33, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](34, "Action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](36, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](37, "Another action");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](38, "li");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](39, "a", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](40, "Something else here");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](41, "div", 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](42, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](43, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](44, "div", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](46, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](47, "6,4,8,6,8,10,5,6,7,9,5,6,4,8,6,8,10,5,6,7,9,5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](48, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](49, "Total Ticket");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](50, "h3", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](51, "1512 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](52, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](53, "trending_up");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](54, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](55, "div", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](56, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](57, "span", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](58, "9,4,6,5,6,4,7,3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](59, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](60, "Reply");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](61, "h3", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](62, "1236 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](63, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](64, "trending_up");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](65, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](66, "div", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](67, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](68, "div", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](69, "30, 35, 25, 8");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](70, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](71, "Resolve");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](72, "h3", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](73, "1107 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](74, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](75, "trending_down");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](76, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](77, "div", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](78, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](79, "div", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](80, " 4,6,-3,-1,2,-2,4,3,6,7,-2,3,4,6,-3,-1,2,-2,4,3,6,7,-2,3");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](81, "div", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](82, "Pending");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](83, "h3", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](84, "167 ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](85, "i", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](86, "trending_down");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](87, "div", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](88, "table", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](89, 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](90, SupportComponent_th_90_Template, 2, 0, "th", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](91, SupportComponent_td_91_Template, 2, 1, "td", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](92, 39);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](93, SupportComponent_th_93_Template, 2, 0, "th", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](94, SupportComponent_td_94_Template, 2, 1, "td", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](95, 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](96, SupportComponent_th_96_Template, 2, 0, "th", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](97, SupportComponent_td_97_Template, 2, 1, "td", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](98, 43);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](99, SupportComponent_th_99_Template, 2, 0, "th", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](100, SupportComponent_td_100_Template, 2, 1, "td", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](101, 45);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](102, SupportComponent_th_102_Template, 2, 0, "th", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](103, SupportComponent_td_103_Template, 2, 1, "td", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](104, 46);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](105, SupportComponent_th_105_Template, 2, 0, "th", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](106, SupportComponent_td_106_Template, 3, 1, "td", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](107, 47);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](108, SupportComponent_th_108_Template, 2, 0, "th", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](109, SupportComponent_td_109_Template, 2, 1, "td", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](110, 48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](111, SupportComponent_th_111_Template, 2, 0, "th", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](112, SupportComponent_td_112_Template, 2, 1, "td", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](113, 49);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](114, SupportComponent_th_114_Template, 2, 0, "th", 50);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](115, SupportComponent_td_115_Template, 7, 0, "td", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](116, SupportComponent_tr_116_Template, 1, 0, "tr", 51);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](117, SupportComponent_tr_117_Template, 1, 0, "tr", 52);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](118, "mat-paginator", 53);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](88);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("dataSource", ctx.dataSource);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matHeaderRowDef", ctx.displayedColumns);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matRowDefColumns", ctx.displayedColumns);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("pageSize", 10)("pageSizeOptions", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction0"](5, _c0));
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterLinkWithHref"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatTable"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatColumnDef"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatHeaderCellDef"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatCellDef"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatHeaderRowDef"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatRowDef"], _angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginator"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatHeaderCell"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatCell"], _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_4__["MatCheckbox"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgControlStatus"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["NgModel"], _angular_material_button__WEBPACK_IMPORTED_MODULE_6__["MatButton"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__["MatIcon"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatHeaderRow"], _angular_material_table__WEBPACK_IMPORTED_MODULE_2__["MatRow"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcHMvc3VwcG9ydC9zdXBwb3J0LmNvbXBvbmVudC5zY3NzIn0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SupportComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-support',
            templateUrl: './support.component.html',
            styleUrls: ['./support.component.scss']
          }]
        }], function () {
          return [];
        }, {
          paginator: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"],
            args: [_angular_material_paginator__WEBPACK_IMPORTED_MODULE_1__["MatPaginator"], {
              "static": true
            }]
          }]
        });
      })();
      /***/

    },

    /***/
    "./src/app/apps/task/task.component.ts":
    /*!*********************************************!*\
      !*** ./src/app/apps/task/task.component.ts ***!
      \*********************************************/

    /*! exports provided: TaskComponent */

    /***/
    function srcAppAppsTaskTaskComponentTs(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TaskComponent", function () {
        return TaskComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/cdk/drag-drop */
      "./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/forms */
      "./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/router */
      "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/button */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/button.js");
      /* harmony import */


      var _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/material/sidenav */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/sidenav.js");
      /* harmony import */


      var _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/material/icon */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js");
      /* harmony import */


      var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/form-field */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/form-field.js");
      /* harmony import */


      var _angular_material_input__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/material/input */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js");
      /* harmony import */


      var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/material/checkbox */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js");
      /* harmony import */


      var _angular_material_select__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/material/select */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/select.js");
      /* harmony import */


      var _angular_material_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! @angular/material/core */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/core.js");
      /* harmony import */


      var _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @angular/material/datepicker */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/datepicker.js");
      /* harmony import */


      var ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! ngx-perfect-scrollbar */
      "./node_modules/ngx-perfect-scrollbar/__ivy_ngcc__/fesm2015/ngx-perfect-scrollbar.js");
      /* harmony import */


      var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! @angular/material/tooltip */
      "./node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js");

      function TaskComponent_button_38_Template(rf, ctx) {
        if (rf & 1) {
          var _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 51);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TaskComponent_button_38_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r7);

            var ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](33);

            return ctx_r6.deleteTask(_r0);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "mat-icon");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "delete");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function TaskComponent_button_39_Template(rf, ctx) {
        if (rf & 1) {
          var _r9 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 52);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TaskComponent_button_39_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r9);

            var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r8.saveTask();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "mat-icon");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "save");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function TaskComponent_button_40_Template(rf, ctx) {
        if (rf & 1) {
          var _r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 53);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TaskComponent_button_40_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r11);

            var ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r10.editTask();
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "mat-icon");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](2, "save");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function TaskComponent_div_113_div_6_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 66);
        }
      }

      function TaskComponent_div_113_mat_icon_10_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mat-icon", 67);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "arrow_downward ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function TaskComponent_div_113_mat_icon_11_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mat-icon", 68);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "arrow_upward ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      function TaskComponent_div_113_mat_icon_12_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "mat-icon", 69);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, " remove");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }
      }

      var _c0 = function _c0(a0) {
        return {
          done: a0
        };
      };

      var _c1 = function _c1(a0, a1, a2) {
        return {
          "task-low": a0,
          "task-high": a1,
          "task-normal": a2
        };
      };

      function TaskComponent_div_113_Template(rf, ctx) {
        if (rf & 1) {
          var _r18 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 54);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TaskComponent_div_113_Template_div_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r18);

            var task_r12 = ctx.$implicit;

            var ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](33);

            return ctx_r17.taskClick(task_r12, _r0);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 55);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "mat-icon", 56);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](4, "drag_indicator");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "mat-checkbox", 57);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("change", function TaskComponent_div_113_Template_mat_checkbox_change_5_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r18);

            var task_r12 = ctx.$implicit;

            var ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](33);

            return ctx_r19.toggle(task_r12, _r0);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, TaskComponent_div_113_div_6_Template, 1, 0, "div", 58);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "div", 59);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "div", 60);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](10, TaskComponent_div_113_mat_icon_10_Template, 2, 0, "mat-icon", 61);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](11, TaskComponent_div_113_mat_icon_11_Template, 2, 0, "mat-icon", 62);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](12, TaskComponent_div_113_mat_icon_12_Template, 2, 0, "mat-icon", 63);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](13);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](14, "img", 64);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "div", 65);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](16);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](17, "date");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var task_r12 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](5);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("checked", !!task_r12.done);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](13, _c0, task_r12.done));

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", task_r12.title, "");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction3"](15, _c1, task_r12.priority == "Low", task_r12.priority == "High", task_r12.priority == "Normal"));

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (task_r12 == null ? null : task_r12.priority) == "Low");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (task_r12 == null ? null : task_r12.priority) == "High");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (task_r12 == null ? null : task_r12.priority) == "Normal");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"](" ", task_r12.priority, " ");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpropertyInterpolate"]("src", task_r12.img, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsanitizeUrl"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpropertyInterpolate"]("matTooltip", task_r12.name);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](17, 11, task_r12.due_date));
        }
      }

      var TaskComponent = /*#__PURE__*/function () {
        function TaskComponent(fb) {
          _classCallCheck(this, TaskComponent);

          this.fb = fb;
          this.mode = new _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControl"]('side');
          this.showFiller = false;
          this.isNewEvent = false;
          this.tasks = [{
            id: '1',
            img: 'assets/images/user/user1.jpg',
            name: 'Sarah Smith',
            title: 'Develop angular project',
            done: true,
            note: 'note details',
            priority: "High",
            due_date: "2/12/2020"
          }, {
            id: '2',
            img: 'assets/images/user/user2.jpg',
            name: 'John Deo',
            title: 'File not found exception solve',
            done: false,
            note: 'note details',
            priority: "High",
            due_date: "2/12/2019"
          }, {
            id: '3',
            img: 'assets/images/user/user3.jpg',
            name: 'Jens Brincker',
            title: 'Test project and find bug',
            done: false,
            note: 'note details',
            priority: "Low",
            due_date: "2/12/2017"
          }, {
            id: '4',
            img: 'assets/images/user/user4.jpg',
            name: 'Mark Hay',
            title: 'Image not found error',
            done: true,
            note: 'note details',
            priority: "Normal",
            due_date: "2/12/2020"
          }, {
            id: '5',
            img: 'assets/images/user/user5.jpg',
            name: 'Anthony Davie',
            title: 'Solve client error in form',
            done: false,
            note: 'note details',
            priority: "High",
            due_date: "2/12/2019"
          }, {
            id: '6',
            img: 'assets/images/user/user6.jpg',
            name: 'Sue Woodger',
            title: 'Tab button is flickering on hover',
            done: false,
            note: 'note details',
            priority: "Normal",
            due_date: "2/12/2017"
          }, {
            id: '7',
            img: 'assets/images/user/user7.jpg',
            name: 'John Deo',
            title: 'Chart responsive issue solve',
            done: true,
            note: 'note details',
            priority: "High",
            due_date: "2/12/2019"
          }, {
            id: '8',
            img: 'assets/images/user/user8.jpg',
            name: 'Jens Brincker',
            title: 'Web service data load issue',
            done: false,
            note: 'note details',
            priority: "High",
            due_date: "2/12/2020"
          }, {
            id: '9',
            img: 'assets/images/user/user9.jpg',
            name: 'Sarah Smith',
            title: 'Java compile error',
            done: false,
            note: 'note details',
            priority: "Low",
            due_date: "2/12/2017"
          }, {
            id: '10',
            img: 'assets/images/user/user10.jpg',
            name: 'Mark Hay',
            title: 'Integrate project with spring boot',
            done: true,
            note: 'note details',
            priority: "High",
            due_date: "2/12/2019"
          }, {
            id: '11',
            img: 'assets/images/user/user1.jpg',
            name: 'John Deo',
            title: 'Update latest angular version',
            done: false,
            note: 'note details',
            priority: "High",
            due_date: "2/12/2017"
          }, {
            id: '12',
            img: 'assets/images/user/user2.jpg',
            name: 'Jens Brincker',
            title: 'Integrate lazy loading on project',
            done: false,
            note: 'note details',
            priority: "Normal",
            due_date: "2/12/2020"
          }, {
            id: '13',
            img: 'assets/images/user/user3.jpg',
            name: 'Mark Hay',
            title: 'js file not load properly',
            done: true,
            note: 'note details',
            priority: "Normal",
            due_date: "2/12/2019"
          }, {
            id: '14',
            img: 'assets/images/user/user4.jpg',
            name: 'Anthony Davie',
            title: 'need to change color of table',
            done: false,
            note: 'note details',
            priority: "Normal",
            due_date: "2/12/2017"
          }, {
            id: '15',
            img: 'assets/images/user/user5.jpg',
            name: 'Sue Woodger',
            title: 'modal window select item issue',
            done: false,
            note: 'note details',
            priority: "Low",
            due_date: "2/12/2017"
          }];
          this.taskForm = this.createFormGroup(null);
        }

        _createClass(TaskComponent, [{
          key: "drop",
          value: function drop(event) {
            Object(_angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__["moveItemInArray"])(this.tasks, event.previousIndex, event.currentIndex);
          }
        }, {
          key: "toggle",
          value: function toggle(task, nav) {
            nav.close();
            task.done = !task.done;
          }
        }, {
          key: "addNewTask",
          value: function addNewTask(nav) {
            this.resetFormField();
            this.isNewEvent = true;
            this.dialogTitle = 'New Task';
            this.userImg = 'assets/images/user/user1.jpg';
            nav.open();
          }
        }, {
          key: "taskClick",
          value: function taskClick(task, nav) {
            this.isNewEvent = false;
            this.dialogTitle = 'Edit Task';
            this.userImg = task.img;
            nav.open();
            this.taskForm = this.createFormGroup(task);
          }
        }, {
          key: "closeSlider",
          value: function closeSlider(nav) {
            if (nav.open()) {
              nav.close();
            }
          }
        }, {
          key: "createFormGroup",
          value: function createFormGroup(data) {
            return this.fb.group({
              id: [data ? data.id : this.getRandomID()],
              img: [data ? data.img : 'assets/images/user/user1.jpg'],
              name: [data ? data.name : null],
              title: [data ? data.title : null],
              done: [data ? data.done : null],
              priority: [data ? data.priority : null],
              due_date: [Object(_angular_common__WEBPACK_IMPORTED_MODULE_3__["formatDate"])(data ? data.due_date : Object(_angular_common__WEBPACK_IMPORTED_MODULE_3__["formatDate"])(new Date(), 'yyyy-MM-dd', 'en') || '', 'yyyy-MM-dd', 'en')],
              note: [data ? data.note : null]
            });
          }
        }, {
          key: "saveTask",
          value: function saveTask() {
            this.tasks.unshift(this.taskForm.value);
            this.resetFormField();
          }
        }, {
          key: "editTask",
          value: function editTask() {
            var targetIdx = this.tasks.map(function (item) {
              return item.id;
            }).indexOf(this.taskForm.value.id);
            this.tasks[targetIdx] = this.taskForm.value;
          }
        }, {
          key: "deleteTask",
          value: function deleteTask(nav) {
            var targetIdx = this.tasks.map(function (item) {
              return item.id;
            }).indexOf(this.taskForm.value.id);
            this.tasks.splice(targetIdx, 1);
            nav.close();
          }
        }, {
          key: "resetFormField",
          value: function resetFormField() {
            this.taskForm.controls.name.reset();
            this.taskForm.controls.title.reset();
            this.taskForm.controls.done.reset();
            this.taskForm.controls.priority.reset();
            this.taskForm.controls.due_date.reset();
            this.taskForm.controls.note.reset();
          }
        }, {
          key: "getRandomID",
          value: function getRandomID() {
            var S4 = function S4() {
              return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
            };

            return S4() + S4();
          }
        }, {
          key: "ngOnInit",
          value: function ngOnInit() {}
        }]);

        return TaskComponent;
      }();

      TaskComponent.ɵfac = function TaskComponent_Factory(t) {
        return new (t || TaskComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"]));
      };

      TaskComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: TaskComponent,
        selectors: [["app-task"]],
        decls: 114,
        vars: 21,
        consts: [[1, "content"], [1, "container-fluid"], [1, "block-header"], [1, "row"], [1, "col-xs-12", "col-sm-12", "col-md-12", "col-lg-12"], [1, "breadcrumb", "breadcrumb-style"], [1, "breadcrumb-item"], [1, "page-title"], [1, "breadcrumb-item", "bcrumb-1"], ["routerLink", "/dashboard/main"], [1, "fas", "fa-home"], [1, "breadcrumb-item", "active"], [1, "col-md-12", "col-sm-12"], [1, "card", "h-100"], [1, "card-body"], [1, "task-module"], [1, "task-header"], [1, "task-title"], [1, "header-button"], ["mat-raised-button", "", "color", "primary", 3, "click"], [1, "task-container"], ["position", "end", 3, "mode"], ["sidenav", ""], [1, "header"], [1, "header-title"], [1, "header-close", "m-l-0"], ["mat-icon-button", "", "matTooltip", "Delete Task", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "matTooltip", "Save Task", 3, "click", 4, "ngIf"], ["mat-icon-button", "", "matTooltip", "Edit Task", 3, "click", 4, "ngIf"], ["mat-icon-button", "", 3, "click"], [1, "register-form", "m-4", 3, "formGroup"], [1, "col-xl-12", "col-lg-12", "col-md-12", "col-sm-12"], [3, "hidden"], ["matInput", "", "formControlName", "id"], ["matInput", "", "formControlName", "img"], ["appearance", "outline", 1, "example-full-width"], ["matInput", "", "formControlName", "title"], ["matSuffix", ""], [1, "col-xl-12", "col-lg-12", "col-md-12", "col-sm-12", "mb-3"], ["formControlName", "done", "color", "primary", 1, "example-margin"], ["formControlName", "name"], [3, "value"], [1, "col-xl-6", "col-lg-6", "col-md-12", "col-sm-12", "mb-2"], ["formControlName", "priority"], ["matInput", "", "formControlName", "due_date", 3, "matDatepicker"], ["matSuffix", "", 3, "for"], ["picker1", ""], ["matInput", "", "formControlName", "note"], [1, "col-xl-10", "col-lg-10", "col-md-12", "col-sm-12"], ["cdkDropList", "", 1, "task-list", 2, "position", "relative", "max-height", "500px", 3, "perfectScrollbar", "cdkDropListDropped"], ["class", "task-box", "cdkDrag", "", 3, "click", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", "matTooltip", "Delete Task", 3, "click"], ["mat-icon-button", "", "matTooltip", "Save Task", 3, "click"], ["mat-icon-button", "", "matTooltip", "Edit Task", 3, "click"], ["cdkDrag", "", 1, "task-box", 3, "click"], ["cdkDragHandle", "", 1, "task-handle", "m-r-20"], ["aria-hidden", "false"], ["color", "primary", 1, "m-r-15", 3, "checked", "change"], ["class", "task-custom-placeholder", 4, "cdkDragPlaceholder"], ["matTooltip", "Title", 3, "ngClass"], [3, "ngClass"], ["matTooltip", "Low", "aria-hidden", "false", "class", "lbl-low", 4, "ngIf"], ["matTooltip", "High", "aria-hidden", "false", "class", "lbl-high", 4, "ngIf"], ["matTooltip", "Normal", "aria-hidden", "false", "class", "lbl-normal", 4, "ngIf"], [1, "task-user-img", 3, "src", "matTooltip"], ["matTooltip", "Due Date", 1, "task-date"], [1, "task-custom-placeholder"], ["matTooltip", "Low", "aria-hidden", "false", 1, "lbl-low"], ["matTooltip", "High", "aria-hidden", "false", 1, "lbl-high"], ["matTooltip", "Normal", "aria-hidden", "false", 1, "lbl-normal"]],
        template: function TaskComponent_Template(rf, ctx) {
          if (rf & 1) {
            var _r20 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "section", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](3, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "div", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](5, "ul", 5);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](6, "li", 6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](7, "h4", 7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](8, "Task");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](9, "li", 8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](10, "a", 9);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](11, "i", 10);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](12, " Home");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](13, "li", 11);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](14, "Task");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](15, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](16, "div", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](17, "div", 13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](18, "div", 14);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](19, "div", 15);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](20, "div", 16);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](21, "div", 17);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](22, "h2");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](23, "Tasks");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](24, "h5");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](26, "div", 18);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](27, "button", 19);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TaskComponent_Template_button_click_27_listener() {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r20);

              var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](33);

              return ctx.addNewTask(_r0);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](28, "Add Task");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](29, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](30, "div", 12);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](31, "mat-sidenav-container", 20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](32, "mat-sidenav", 21, 22);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](34, "div", 23);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](35, "h2", 24);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](37, "div", 25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](38, TaskComponent_button_38_Template, 3, 0, "button", 26);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](39, TaskComponent_button_39_Template, 3, 0, "button", 27);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](40, TaskComponent_button_40_Template, 3, 0, "button", 28);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](41, "button", 29);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TaskComponent_Template_button_click_41_listener() {
              _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r20);

              var _r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](33);

              return ctx.closeSlider(_r0);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](42, "mat-icon");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](43, "close");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](44, "form", 30);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](45, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](46, "div", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](47, "mat-form-field", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](48, "input", 33);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](49, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](50, "div", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](51, "mat-form-field", 32);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](52, "input", 34);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](53, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](54, "div", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](55, "mat-form-field", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](56, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](57, "Title");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](58, "input", 36);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](59, "mat-icon", 37);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](60, "turned_in_not");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](61, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](62, "div", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](63, "mat-checkbox", 39);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](64, "Mark as complete ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](65, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](66, "div", 38);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](67, "mat-form-field", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](68, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](69, "Assigned Name");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](70, "mat-select", 40);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](71, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](72, " Sarah Smith ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](73, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](74, " John Deo ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](75, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](76, " Jens Brincker ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](77, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](78, " Mark Hay ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](79, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](80, " Anthony Davie ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](81, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](82, " Sue Woodger ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](83, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](84, "div", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](85, "mat-form-field", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](86, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](87, "Priority");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](88, "mat-select", 43);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](89, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](90, " Low ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](91, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](92, " Normal ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](93, "mat-option", 41);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](94, " High ");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](95, "div", 42);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](96, "mat-form-field", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](97, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](98, "Due date");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](99, "input", 44);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](100, "mat-datepicker-toggle", 45);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](101, "mat-datepicker", null, 46);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](103, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](104, "div", 31);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](105, "mat-form-field", 35);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](106, "mat-label");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](107, "Event Details");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](108, "textarea", 47);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](109, "div", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](110, "div", 48);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](111, "mat-sidenav-content");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](112, "div", 49);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("cdkDropListDropped", function TaskComponent_Template_div_cdkDropListDropped_112_listener($event) {
              return ctx.drop($event);
            });

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](113, TaskComponent_div_113_Template, 18, 19, "div", 50);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            var _r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](102);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](25);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate1"]("", ctx.tasks.length, " Total task");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](7);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("mode", ctx.mode.value);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx.dialogTitle);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.isNewEvent);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.isNewEvent);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", !ctx.isNewEvent);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("formGroup", ctx.taskForm);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("hidden", true);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("hidden", true);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](20);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "Sarah Smith");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "John Deo");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "Jens Brincker");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "Mark Hay");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "Anthony Davie");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "Sue Woodger");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](8);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "Low");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "Normal");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("value", "High");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](6);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("matDatepicker", _r4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("for", _r4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](13);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.tasks);
          }
        },
        directives: [_angular_router__WEBPACK_IMPORTED_MODULE_4__["RouterLinkWithHref"], _angular_material_button__WEBPACK_IMPORTED_MODULE_5__["MatButton"], _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_6__["MatSidenavContainer"], _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_6__["MatSidenav"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgIf"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__["MatIcon"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ɵangular_packages_forms_forms_y"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NgControlStatusGroup"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroupDirective"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__["MatFormField"], _angular_material_input__WEBPACK_IMPORTED_MODULE_9__["MatInput"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["DefaultValueAccessor"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NgControlStatus"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormControlName"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__["MatLabel"], _angular_material_form_field__WEBPACK_IMPORTED_MODULE_8__["MatSuffix"], _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_10__["MatCheckbox"], _angular_material_select__WEBPACK_IMPORTED_MODULE_11__["MatSelect"], _angular_material_core__WEBPACK_IMPORTED_MODULE_12__["MatOption"], _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_13__["MatDatepickerInput"], _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_13__["MatDatepickerToggle"], _angular_material_datepicker__WEBPACK_IMPORTED_MODULE_13__["MatDatepicker"], _angular_material_sidenav__WEBPACK_IMPORTED_MODULE_6__["MatSidenavContent"], _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__["CdkDropList"], ngx_perfect_scrollbar__WEBPACK_IMPORTED_MODULE_14__["PerfectScrollbarDirective"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgForOf"], _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_15__["MatTooltip"], _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__["CdkDrag"], _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__["CdkDragHandle"], _angular_cdk_drag_drop__WEBPACK_IMPORTED_MODULE_1__["CdkDragPlaceholder"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["NgClass"]],
        pipes: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DatePipe"]],
        styles: ["\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcHMvdGFzay90YXNrLmNvbXBvbmVudC5zYXNzIn0= */"]
      });
      /*@__PURE__*/

      (function () {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TaskComponent, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
          args: [{
            selector: 'app-task',
            templateUrl: './task.component.html',
            styleUrls: ['./task.component.sass']
          }]
        }], function () {
          return [{
            type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"]
          }];
        }, null);
      })();
      /***/

    }
  }]);
})();
//# sourceMappingURL=apps-apps-module-es5.js.map